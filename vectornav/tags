!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASYNCMODE_BOTH	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ASYNCMODE_BOTH	= 3		\/\/\/< Both serial ports.$/;"	e	enum:vn::protocol::uart::AsyncMode
ASYNCMODE_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ASYNCMODE_NONE	= 0,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::AsyncMode
ASYNCMODE_PORT1	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ASYNCMODE_PORT1	= 1,	\/\/\/< Serial port 1.$/;"	e	enum:vn::protocol::uart::AsyncMode
ASYNCMODE_PORT2	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ASYNCMODE_PORT2	= 2,	\/\/\/< Serial port 2.$/;"	e	enum:vn::protocol::uart::AsyncMode
ATOFD	vnproglib-1.1.4.0/cpp/src/packet.cpp	30;"	d	file:
ATOFF	vnproglib-1.1.4.0/cpp/src/packet.cpp	29;"	d	file:
ATOU16	vnproglib-1.1.4.0/cpp/src/packet.cpp	33;"	d	file:
ATOU16X	vnproglib-1.1.4.0/cpp/src/packet.cpp	32;"	d	file:
ATOU32	vnproglib-1.1.4.0/cpp/src/packet.cpp	31;"	d	file:
ATOU8	vnproglib-1.1.4.0/cpp/src/packet.cpp	34;"	d	file:
ATTITUDEGROUP_ACCELNED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_ACCELNED			= 0x0020,	\/\/\/< AccelNed.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_DCM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_DCM				= 0x0008,	\/\/\/< DCM.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_LINEARACCELBODY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_LINEARACCELBODY	= 0x0040,	\/\/\/< LinearAccelBody.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_LINEARACCELNED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_LINEARACCELNED	= 0x0080,	\/\/\/< LinearAccelNed.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_MAGNED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_MAGNED			= 0x0010,	\/\/\/< MagNed.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_NONE				= 0x0000,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_QUATERNION	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_QUATERNION		= 0x0004,	\/\/\/< Quaternion.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_VPESTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_VPESTATUS			= 0x0001,	\/\/\/< VpeStatus.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_YAWPITCHROLL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_YAWPITCHROLL		= 0x0002,	\/\/\/< YawPitchRoll.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATTITUDEGROUP_YPRU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ATTITUDEGROUP_YPRU				= 0x0100,	\/\/\/< YprU.$/;"	e	enum:vn::protocol::uart::AttitudeGroup
ATT_Dcm	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^		ATT_Dcm$/;"	e	enum:vn::math::AttitudeF::AttitudeType
ATT_Quat	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^		ATT_Quat,$/;"	e	enum:vn::math::AttitudeF::AttitudeType
ATT_YprDegs	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^		ATT_YprDegs,$/;"	e	enum:vn::math::AttitudeF::AttitudeType
ATT_YprRads	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^		ATT_YprRads,$/;"	e	enum:vn::math::AttitudeF::AttitudeType
AccelerationCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	AccelerationCompensationRegister($/;"	f	struct:vn::sensors::AccelerationCompensationRegister
AccelerationCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	AccelerationCompensationRegister() { }$/;"	f	struct:vn::sensors::AccelerationCompensationRegister
AccelerationCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct AccelerationCompensationRegister$/;"	s	namespace:vn::sensors
AccelerationType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum AccelerationType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
AngularRateType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum AngularRateType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
ApiVersion	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	/^class ApiVersion$/;"	c	namespace:vn
AsciiAsync	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum AsciiAsync$/;"	g	namespace:vn::protocol::uart
AsciiEndChar1	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const uint8_t AsciiEndChar1 = '\\r';$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
AsciiEndChar2	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const uint8_t AsciiEndChar2 = '\\n';$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
AsciiStartChar	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const uint8_t AsciiStartChar = '$';$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
AsciiTracker	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		AsciiTracker() :$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker
AsciiTracker	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	struct AsciiTracker$/;"	s	struct:vn::protocol::uart::PacketFinder::Impl	file:
AsyncMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum AsyncMode$/;"	g	namespace:vn::protocol::uart
AsyncPacketReceivedEvent	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	typedef Event<protocol::uart::Packet&, size_t, xplat::TimeStamp> AsyncPacketReceivedEvent;$/;"	t	class:vn::sensors::VnSensor
AsyncPacketReceivedHandler	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	typedef void(*AsyncPacketReceivedHandler)(void* userData, protocol::uart::Packet& asyncPacket, size_t packetStartRunningIndex);$/;"	t	class:vn::sensors::VnSensor
AttitudeF	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^	AttitudeF() { }$/;"	f	class:vn::math::AttitudeF
AttitudeF	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^class vn_proglib_DLLEXPORT AttitudeF$/;"	c	namespace:vn::math
AttitudeF	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^AttitudeF::AttitudeF(AttitudeType type, void* attitude) :$/;"	f	class:vn::math::AttitudeF
AttitudeGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum AttitudeGroup$/;"	g	namespace:vn::protocol::uart
AttitudeType	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^	enum AttitudeType$/;"	g	class:vn::math::AttitudeF
AttitudeType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum AttitudeType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
BINARYGROUP_ATTITUDE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	BINARYGROUP_ATTITUDE = 0x10,	\/\/\/< Attitude group.$/;"	e	enum:vn::protocol::uart::BinaryGroup
BINARYGROUP_COMMON	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	BINARYGROUP_COMMON = 0x01,		\/\/\/< Common group.$/;"	e	enum:vn::protocol::uart::BinaryGroup
BINARYGROUP_GPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	BINARYGROUP_GPS = 0x08,			\/\/\/< GPS group.$/;"	e	enum:vn::protocol::uart::BinaryGroup
BINARYGROUP_IMU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	BINARYGROUP_IMU = 0x04,			\/\/\/< IMU group.$/;"	e	enum:vn::protocol::uart::BinaryGroup
BINARYGROUP_INS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	BINARYGROUP_INS = 0x20			\/\/\/< INS group.$/;"	e	enum:vn::protocol::uart::BinaryGroup
BINARYGROUP_TIME	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	BINARYGROUP_TIME = 0x02,		\/\/\/< Time group.$/;"	e	enum:vn::protocol::uart::BinaryGroup
BackReference	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	MemoryPort *BackReference;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
BackReference	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	VnSensor* BackReference;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
BackReference	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	SerialPort* BackReference;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
Baudrate	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	uint32_t Baudrate;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
BinaryAsyncMessageReceived	src/main.cpp	/^void BinaryAsyncMessageReceived(void* userData, Packet& p, size_t index)$/;"	f
BinaryGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum BinaryGroup$/;"	g	namespace:vn::protocol::uart
BinaryGroupLengths	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^	static const unsigned char BinaryGroupLengths[sizeof(uint8_t)*8][sizeof(uint16_t)*8];$/;"	m	struct:vn::protocol::uart::Packet
BinaryGroupLengths	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^const unsigned char Packet::BinaryGroupLengths[sizeof(uint8_t)*8][sizeof(uint16_t)*8] = {$/;"	m	class:vn::protocol::uart::Packet	file:
BinaryOutputRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	BinaryOutputRegister($/;"	f	struct:vn::sensors::BinaryOutputRegister
BinaryOutputRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	BinaryOutputRegister() :$/;"	f	struct:vn::sensors::BinaryOutputRegister
BinaryOutputRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct BinaryOutputRegister$/;"	s	namespace:vn::sensors
BinaryStartChar	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const uint8_t BinaryStartChar = 0xFA;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
BinaryTracker	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	explicit BinaryTracker(size_t possibleStartIndex, size_t runningDataIndex, TimeStamp timeFound_) :$/;"	f	struct:vn::protocol::uart::BinaryTracker
BinaryTracker	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^struct BinaryTracker$/;"	s	namespace:vn::protocol::uart	file:
CDACC_Ecef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_Ecef,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_LinearBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_LinearBody,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_LinearEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_LinearEcef,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_LinearNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_LinearNed,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_Ned	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_Ned,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_Normal	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_Normal,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDACC_Uncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDACC_Uncompensated,$/;"	e	enum:vn::sensors::CompositeData::Impl::AccelerationType	file:
CDANR_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDANR_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::AngularRateType	file:
CDANR_Normal	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDANR_Normal,$/;"	e	enum:vn::sensors::CompositeData::Impl::AngularRateType	file:
CDANR_Uncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDANR_Uncompensated,$/;"	e	enum:vn::sensors::CompositeData::Impl::AngularRateType	file:
CDATT_DirectionCosineMatrix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDATT_DirectionCosineMatrix$/;"	e	enum:vn::sensors::CompositeData::Impl::AttitudeType	file:
CDATT_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDATT_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::AttitudeType	file:
CDATT_Quaternion	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDATT_Quaternion,$/;"	e	enum:vn::sensors::CompositeData::Impl::AttitudeType	file:
CDATT_YawPitchRoll	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDATT_YawPitchRoll,$/;"	e	enum:vn::sensors::CompositeData::Impl::AttitudeType	file:
CDMAG_Ecef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDMAG_Ecef,$/;"	e	enum:vn::sensors::CompositeData::Impl::MagneticType	file:
CDMAG_Ned	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDMAG_Ned,$/;"	e	enum:vn::sensors::CompositeData::Impl::MagneticType	file:
CDMAG_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDMAG_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::MagneticType	file:
CDMAG_Normal	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDMAG_Normal,$/;"	e	enum:vn::sensors::CompositeData::Impl::MagneticType	file:
CDMAG_Uncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDMAG_Uncompensated,$/;"	e	enum:vn::sensors::CompositeData::Impl::MagneticType	file:
CDPOS_EstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOS_EstimatedEcef$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionType	file:
CDPOS_EstimatedLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOS_EstimatedLla,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionType	file:
CDPOS_GpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOS_GpsEcef,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionType	file:
CDPOS_GpsLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOS_GpsLla,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionType	file:
CDPOS_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOS_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionType	file:
CDPOU_Estimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOU_Estimated$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionUncertaintyType	file:
CDPOU_GpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOU_GpsEcef,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionUncertaintyType	file:
CDPOU_GpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOU_GpsNed,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionUncertaintyType	file:
CDPOU_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPOU_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::PositionUncertaintyType	file:
CDPRE_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPRE_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::PressureType	file:
CDPRE_Normal	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDPRE_Normal$/;"	e	enum:vn::sensors::CompositeData::Impl::PressureType	file:
CDTEM_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDTEM_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::TemperatureType	file:
CDTEM_Normal	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDTEM_Normal,$/;"	e	enum:vn::sensors::CompositeData::Impl::TemperatureType	file:
CDVEL_EstimatedBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEL_EstimatedBody$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityType	file:
CDVEL_EstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEL_EstimatedEcef,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityType	file:
CDVEL_EstimatedNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEL_EstimatedNed,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityType	file:
CDVEL_GpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEL_GpsEcef,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityType	file:
CDVEL_GpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEL_GpsNed,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityType	file:
CDVEL_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEL_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityType	file:
CDVEU_Estimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEU_Estimated$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityUncertaintyType	file:
CDVEU_Gps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEU_Gps,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityUncertaintyType	file:
CDVEU_None	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		CDVEU_None,$/;"	e	enum:vn::sensors::CompositeData::Impl::VelocityUncertaintyType	file:
CHECKSUMMODE_CHECKSUM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	CHECKSUMMODE_CHECKSUM = 1,$/;"	e	enum:vn::protocol::uart::ChecksumMode
CHECKSUMMODE_CRC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	CHECKSUMMODE_CRC = 2$/;"	e	enum:vn::protocol::uart::ChecksumMode
CHECKSUMMODE_OFF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	CHECKSUMMODE_OFF = 0,$/;"	e	enum:vn::protocol::uart::ChecksumMode
COMMAND_MAX_LENGTH	vnproglib-1.1.4.0/cpp/src/sensors.cpp	29;"	d	file:
COMMONGROUP_ACCEL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_ACCEL				= 0x0100,	\/\/\/< Accel.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_ANGULARRATE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_ANGULARRATE			= 0x0020,	\/\/\/< AngularRate.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_DELTATHETA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_DELTATHETA			= 0x0800,	\/\/\/< DeltaTheta.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_IMU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_IMU					= 0x0200,	\/\/\/< Imu.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_INSSTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_INSSTATUS			= 0x1000,	\/\/\/< InsStatus.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_MAGPRES	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_MAGPRES				= 0x0400,	\/\/\/< MagPres.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_NONE				= 0x0000,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_POSITION	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_POSITION			= 0x0040,	\/\/\/< Position.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_QUATERNION	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_QUATERNION			= 0x0010,	\/\/\/< Quaternion.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_SYNCINCNT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_SYNCINCNT			= 0x2000,	\/\/\/< SyncInCnt.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_TIMEGPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_TIMEGPS				= 0x0002,	\/\/\/< TimeGps.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_TIMEGPSPPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_TIMEGPSPPS			= 0x4000	\/\/\/< TimeGpsPps.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_TIMESTARTUP	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_TIMESTARTUP			= 0x0001,	\/\/\/< TimeStartup.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_TIMESYNCIN	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_TIMESYNCIN			= 0x0004,	\/\/\/< TimeSyncIn.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_VELOCITY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_VELOCITY			= 0x0080,	\/\/\/< Velocity.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMMONGROUP_YAWPITCHROLL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMMONGROUP_YAWPITCHROLL		= 0x0008,	\/\/\/< YawPitchRoll.$/;"	e	enum:vn::protocol::uart::CommonGroup
COMPENSATIONMODE_BIAS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMPENSATIONMODE_BIAS = 1$/;"	e	enum:vn::protocol::uart::CompensationMode
COMPENSATIONMODE_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COMPENSATIONMODE_NONE = 0,$/;"	e	enum:vn::protocol::uart::CompensationMode
COUNTMODE_GPSPPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COUNTMODE_GPSPPS = 4$/;"	e	enum:vn::protocol::uart::CountMode
COUNTMODE_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COUNTMODE_NONE = 0,$/;"	e	enum:vn::protocol::uart::CountMode
COUNTMODE_SYNCINCOUNT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COUNTMODE_SYNCINCOUNT = 1,$/;"	e	enum:vn::protocol::uart::CountMode
COUNTMODE_SYNCINTIME	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COUNTMODE_SYNCINTIME = 2,$/;"	e	enum:vn::protocol::uart::CountMode
COUNTMODE_SYNCOUTCOUNTER	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	COUNTMODE_SYNCOUTCOUNTER = 3,$/;"	e	enum:vn::protocol::uart::CountMode
CTRL_C	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^		CTRL_C$/;"	e	enum:vn::xplat::Signal::SignalType
CalculatedMagnetometerCalibrationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	CalculatedMagnetometerCalibrationRegister($/;"	f	struct:vn::sensors::CalculatedMagnetometerCalibrationRegister
CalculatedMagnetometerCalibrationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	CalculatedMagnetometerCalibrationRegister() { }$/;"	f	struct:vn::sensors::CalculatedMagnetometerCalibrationRegister
CalculatedMagnetometerCalibrationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct CalculatedMagnetometerCalibrationRegister$/;"	s	namespace:vn::sensors
ChangingBaudrate	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool ChangingBaudrate;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
Checksum8	vnproglib-1.1.4.0/cpp/include/vn/error_detection.h	/^class Checksum8$/;"	c	namespace:vn::data::integrity
ChecksumMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum ChecksumMode$/;"	g	namespace:vn::protocol::uart
CommonGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum CommonGroup$/;"	g	namespace:vn::protocol::uart
CommunicationProtocolControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	CommunicationProtocolControlRegister($/;"	f	struct:vn::sensors::CommunicationProtocolControlRegister
CommunicationProtocolControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	CommunicationProtocolControlRegister() { }$/;"	f	struct:vn::sensors::CommunicationProtocolControlRegister
CommunicationProtocolControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct CommunicationProtocolControlRegister$/;"	s	namespace:vn::sensors
CompensationMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum CompensationMode$/;"	g	namespace:vn::protocol::uart
CompositeData	vnproglib-1.1.4.0/cpp/include/vn/compositedata.h	/^class vn_proglib_DLLEXPORT CompositeData$/;"	c	namespace:vn::sensors
CompositeData	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^CompositeData::CompositeData() :$/;"	f	class:vn::sensors::CompositeData
CompositeData	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^CompositeData::CompositeData(const CompositeData& cd) :$/;"	f	class:vn::sensors::CompositeData
ContinueHandlingSerialPortEvents	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool ContinueHandlingSerialPortEvents;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
CountMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum CountMode$/;"	g	namespace:vn::protocol::uart
Crc16	vnproglib-1.1.4.0/cpp/include/vn/error_detection.h	/^class Crc16$/;"	c	namespace:vn::data::integrity
CriticalSection	vnproglib-1.1.4.0/cpp/include/vn/criticalsection.h	/^class vn_proglib_DLLEXPORT CriticalSection : private util::NoCopy$/;"	c	namespace:vn::xplat
CriticalSection	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^	CRITICAL_SECTION CriticalSection;$/;"	m	struct:vn::xplat::CriticalSection::Impl	file:
CriticalSection	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^CriticalSection::CriticalSection() :$/;"	f	class:vn::xplat::CriticalSection
DataAvailableForRead	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	const uint8_t* DataAvailableForRead;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
DataAvailableForReadLength	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	size_t DataAvailableForReadLength;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
DataReceivedHandler	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^	typedef void(*DataReceivedHandler)(void* userData);$/;"	t	class:vn::xplat::IPort
DataWrittenHandler	vnproglib-1.1.4.0/cpp/include/vn/memoryport.h	/^	typedef void(*DataWrittenHandler)(void* userData, const char* rawData, size_t length);$/;"	t	class:vn::util::MemoryPort
DefaultReadBufferSize	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	static const size_t DefaultReadBufferSize = 256;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
DefaultReceiveBufferSize	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const size_t DefaultReceiveBufferSize = 512;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
DefaultResponseTimeoutMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	static const uint16_t DefaultResponseTimeoutMs = 500;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
DefaultRetransmitDelayMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	static const uint16_t DefaultRetransmitDelayMs = 200;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
DeltaThetaAndDeltaVelocityConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	DeltaThetaAndDeltaVelocityConfigurationRegister($/;"	f	struct:vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister
DeltaThetaAndDeltaVelocityConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	DeltaThetaAndDeltaVelocityConfigurationRegister() { }$/;"	f	struct:vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister
DeltaThetaAndDeltaVelocityConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct DeltaThetaAndDeltaVelocityConfigurationRegister$/;"	s	namespace:vn::sensors
DeltaThetaAndDeltaVelocityRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	DeltaThetaAndDeltaVelocityRegister($/;"	f	struct:vn::sensors::DeltaThetaAndDeltaVelocityRegister
DeltaThetaAndDeltaVelocityRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	DeltaThetaAndDeltaVelocityRegister() { }$/;"	f	struct:vn::sensors::DeltaThetaAndDeltaVelocityRegister
DeltaThetaAndDeltaVelocityRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct DeltaThetaAndDeltaVelocityRegister$/;"	s	namespace:vn::sensors
DidWeOpenSimplePort	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	bool DidWeOpenSimplePort;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
DllValidator	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^class DllValidator$/;"	c
DllValidator	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^DllValidator::DllValidator()$/;"	f	class:DllValidator
DllValidator	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^DllValidator::DllValidator(std::string dllName, std::string currentDirectory) :$/;"	f	class:DllValidator
DllValidatorVisitor	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	struct DllValidatorVisitor : public PeLib::PeFileVisitor$/;"	s	class:DllValidator
ERRORDETECTIONMODE_CHECKSUM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERRORDETECTIONMODE_CHECKSUM,	\/\/\/< 8-bit XOR checksum is used.$/;"	e	enum:vn::protocol::uart::ErrorDetectionMode
ERRORDETECTIONMODE_CRC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERRORDETECTIONMODE_CRC			\/\/\/< 16-bit CRC16-CCITT is used.$/;"	e	enum:vn::protocol::uart::ErrorDetectionMode
ERRORDETECTIONMODE_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERRORDETECTIONMODE_NONE,		\/\/\/< No error detection is used.$/;"	e	enum:vn::protocol::uart::ErrorDetectionMode
ERRORMODE_IGNORE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERRORMODE_IGNORE = 0,$/;"	e	enum:vn::protocol::uart::ErrorMode
ERRORMODE_SEND	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERRORMODE_SEND = 1,$/;"	e	enum:vn::protocol::uart::ErrorMode
ERRORMODE_SENDANDOFF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERRORMODE_SENDANDOFF = 2$/;"	e	enum:vn::protocol::uart::ErrorMode
ERR_ERROR_BUFFER_OVERFLOW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_ERROR_BUFFER_OVERFLOW = 255		\/\/\/< Error buffer overflow.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_HARD_FAULT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_HARD_FAULT = 1,					\/\/\/< Hard fault.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_INSUFFICIENT_BAUD_RATE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_INSUFFICIENT_BAUD_RATE = 12,	\/\/\/< Insufficient baud rate.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_INVALID_CHECKSUM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_INVALID_CHECKSUM = 3,			\/\/\/< Invalid checksum.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_INVALID_COMMAND	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_INVALID_COMMAND = 4,			\/\/\/< Invalid command.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_INVALID_PARAMETER	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_INVALID_PARAMETER = 7,			\/\/\/< Invalid parameter.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_INVALID_REGISTER	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_INVALID_REGISTER = 8,			\/\/\/< Invalid register.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_NOT_ENOUGH_PARAMETERS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_NOT_ENOUGH_PARAMETERS = 5,		\/\/\/< Not enough parameters.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_OUTPUT_BUFFER_OVERFLOW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_OUTPUT_BUFFER_OVERFLOW = 11,	\/\/\/< Output buffer overflow.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_SERIAL_BUFFER_OVERFLOW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_SERIAL_BUFFER_OVERFLOW = 2,		\/\/\/< Serial buffer overflow.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_TOO_MANY_PARAMETERS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_TOO_MANY_PARAMETERS = 6,		\/\/\/< Too many parameters.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_UNAUTHORIZED_ACCESS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_UNAUTHORIZED_ACCESS = 9,		\/\/\/< Unauthorized access.$/;"	e	enum:vn::protocol::uart::SensorError
ERR_WATCHDOG_RESET	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	ERR_WATCHDOG_RESET = 10,			\/\/\/< Watchdog reset.$/;"	e	enum:vn::protocol::uart::SensorError
EXTERNALSENSORMODE_EXTERNAL200HZ	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	EXTERNALSENSORMODE_EXTERNAL200HZ = 1,$/;"	e	enum:vn::protocol::uart::ExternalSensorMode
EXTERNALSENSORMODE_EXTERNALONUPDATE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	EXTERNALSENSORMODE_EXTERNALONUPDATE = 2$/;"	e	enum:vn::protocol::uart::ExternalSensorMode
EXTERNALSENSORMODE_INTERNAL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	EXTERNALSENSORMODE_INTERNAL = 0,$/;"	e	enum:vn::protocol::uart::ExternalSensorMode
ErrorDetectionMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum ErrorDetectionMode$/;"	g	namespace:vn::protocol::uart
ErrorMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum ErrorMode$/;"	g	namespace:vn::protocol::uart
ErrorPacketReceivedHandler	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	typedef void(*ErrorPacketReceivedHandler)(void* userData, protocol::uart::Packet& errorPacket, size_t packetStartRunningIndex);$/;"	t	class:vn::sensors::VnSensor
Event	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^class vn_proglib_DLLEXPORT Event : private util::NoCopy$/;"	c	namespace:vn::xplat
Event	vnproglib-1.1.4.0/cpp/src/event.cpp	/^Event::Event() :$/;"	f	class:vn::xplat::Event
EventHandle	vnproglib-1.1.4.0/cpp/src/event.cpp	/^	HANDLE EventHandle;$/;"	m	struct:vn::xplat::Event::Impl	file:
ExternalSensorMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum ExternalSensorMode$/;"	g	namespace:vn::protocol::uart
ExternalStopRequest	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool ExternalStopRequest;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
EzAsyncData	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^class vn_proglib_DLLEXPORT EzAsyncData : private util::NoCopy$/;"	c	namespace:vn::sensors
EzAsyncData	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^EzAsyncData::EzAsyncData(VnSensor* sensor) :$/;"	f	class:vn::sensors::EzAsyncData
FILTERMODE_BOTH	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FILTERMODE_BOTH = 3$/;"	e	enum:vn::protocol::uart::FilterMode
FILTERMODE_NOFILTERING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FILTERMODE_NOFILTERING = 0,$/;"	e	enum:vn::protocol::uart::FilterMode
FILTERMODE_ONLYCOMPENSATED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FILTERMODE_ONLYCOMPENSATED = 2,$/;"	e	enum:vn::protocol::uart::FilterMode
FILTERMODE_ONLYRAW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FILTERMODE_ONLYRAW = 1,$/;"	e	enum:vn::protocol::uart::FilterMode
FOAMINIT_FOAMINITHEADINGPITCHROLL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FOAMINIT_FOAMINITHEADINGPITCHROLL = 2,$/;"	e	enum:vn::protocol::uart::FoamInit
FOAMINIT_FOAMINITHEADINGPITCHROLLCOVARIANCE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FOAMINIT_FOAMINITHEADINGPITCHROLLCOVARIANCE = 4$/;"	e	enum:vn::protocol::uart::FoamInit
FOAMINIT_FOAMINITPITCHROLL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FOAMINIT_FOAMINITPITCHROLL = 1,$/;"	e	enum:vn::protocol::uart::FoamInit
FOAMINIT_FOAMINITPITCHROLLCOVARIANCE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FOAMINIT_FOAMINITPITCHROLLCOVARIANCE = 3,$/;"	e	enum:vn::protocol::uart::FoamInit
FOAMINIT_NOFOAMINIT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	FOAMINIT_NOFOAMINIT = 0,$/;"	e	enum:vn::protocol::uart::FoamInit
Family	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	enum Family$/;"	g	class:vn::sensors::VnSensor
FilterActiveTuningParametersRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	FilterActiveTuningParametersRegister($/;"	f	struct:vn::sensors::FilterActiveTuningParametersRegister
FilterActiveTuningParametersRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	FilterActiveTuningParametersRegister() { }$/;"	f	struct:vn::sensors::FilterActiveTuningParametersRegister
FilterActiveTuningParametersRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct FilterActiveTuningParametersRegister$/;"	s	namespace:vn::sensors
FilterBasicControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	FilterBasicControlRegister($/;"	f	struct:vn::sensors::FilterBasicControlRegister
FilterBasicControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	FilterBasicControlRegister() { }$/;"	f	struct:vn::sensors::FilterBasicControlRegister
FilterBasicControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct FilterBasicControlRegister$/;"	s	namespace:vn::sensors
FilterMeasurementsVarianceParametersRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	FilterMeasurementsVarianceParametersRegister($/;"	f	struct:vn::sensors::FilterMeasurementsVarianceParametersRegister
FilterMeasurementsVarianceParametersRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	FilterMeasurementsVarianceParametersRegister() { }$/;"	f	struct:vn::sensors::FilterMeasurementsVarianceParametersRegister
FilterMeasurementsVarianceParametersRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct FilterMeasurementsVarianceParametersRegister$/;"	s	namespace:vn::sensors
FilterMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum FilterMode$/;"	g	namespace:vn::protocol::uart
FoamInit	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum FoamInit$/;"	g	namespace:vn::protocol::uart
GPSFIX_2D	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSFIX_2D = 2,$/;"	e	enum:vn::protocol::uart::GpsFix
GPSFIX_3D	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSFIX_3D = 3$/;"	e	enum:vn::protocol::uart::GpsFix
GPSFIX_NOFIX	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSFIX_NOFIX = 0,$/;"	e	enum:vn::protocol::uart::GpsFix
GPSFIX_TIMEONLY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSFIX_TIMEONLY = 1,$/;"	e	enum:vn::protocol::uart::GpsFix
GPSGROUP_DOP	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  GPSGROUP_DOP          = 0x2000,	\/\/\/< Dop.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_FIX	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_FIX					= 0x0010,	\/\/\/< Fix.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_NONE					= 0x0000,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_NUMSATS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_NUMSATS				= 0x0008,	\/\/\/< NumSats.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_POSECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_POSECEF				= 0x0040,	\/\/\/< PosEcef.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_POSLLA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_POSLLA					= 0x0020,	\/\/\/< PosLla.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_POSU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_POSU					= 0x0200,	\/\/\/< PosU.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_TIMEINFO	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  GPSGROUP_TIMEINFO     = 0x1000,	\/\/\/< TimeInfo.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_TIMEU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_TIMEU				= 0x0800,	\/\/\/< TimeU.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_TOW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_TOW					= 0x0002,	\/\/\/< Tow.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_UTC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_UTC					= 0x0001,	\/\/\/< UTC.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_VELECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_VELECEF				= 0x0100,	\/\/\/< VelEcef.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_VELNED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_VELNED					= 0x0080,	\/\/\/< VelNed.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_VELU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_VELU					= 0x0400,	\/\/\/< VelU.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSGROUP_WEEK	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSGROUP_WEEK					= 0x0004,	\/\/\/< Week.$/;"	e	enum:vn::protocol::uart::GpsGroup
GPSMODE_EXTERNALGPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSMODE_EXTERNALGPS = 1,$/;"	e	enum:vn::protocol::uart::GpsMode
GPSMODE_EXTERNALVN200GPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSMODE_EXTERNALVN200GPS = 2$/;"	e	enum:vn::protocol::uart::GpsMode
GPSMODE_ONBOARDGPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	GPSMODE_ONBOARDGPS = 0,$/;"	e	enum:vn::protocol::uart::GpsMode
GnssDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^struct GnssDop$/;"	s	namespace:vn::protocol::uart
GpsCompassBaselineRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsCompassBaselineRegister($/;"	f	struct:vn::sensors::GpsCompassBaselineRegister
GpsCompassBaselineRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsCompassBaselineRegister() { }$/;"	f	struct:vn::sensors::GpsCompassBaselineRegister
GpsCompassBaselineRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct GpsCompassBaselineRegister$/;"	s	namespace:vn::sensors
GpsCompassEstimatedBaselineRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsCompassEstimatedBaselineRegister($/;"	f	struct:vn::sensors::GpsCompassEstimatedBaselineRegister
GpsCompassEstimatedBaselineRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsCompassEstimatedBaselineRegister() { }$/;"	f	struct:vn::sensors::GpsCompassEstimatedBaselineRegister
GpsCompassEstimatedBaselineRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct GpsCompassEstimatedBaselineRegister$/;"	s	namespace:vn::sensors
GpsConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsConfigurationRegister($/;"	f	struct:vn::sensors::GpsConfigurationRegister
GpsConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsConfigurationRegister() { }$/;"	f	struct:vn::sensors::GpsConfigurationRegister
GpsConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct GpsConfigurationRegister$/;"	s	namespace:vn::sensors
GpsFix	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum GpsFix$/;"	g	namespace:vn::protocol::uart
GpsGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum GpsGroup$/;"	g	namespace:vn::protocol::uart
GpsMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum GpsMode$/;"	g	namespace:vn::protocol::uart
GpsSolutionEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsSolutionEcefRegister($/;"	f	struct:vn::sensors::GpsSolutionEcefRegister
GpsSolutionEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsSolutionEcefRegister() { }$/;"	f	struct:vn::sensors::GpsSolutionEcefRegister
GpsSolutionEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct GpsSolutionEcefRegister$/;"	s	namespace:vn::sensors
GpsSolutionLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsSolutionLlaRegister($/;"	f	struct:vn::sensors::GpsSolutionLlaRegister
GpsSolutionLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GpsSolutionLlaRegister() { }$/;"	f	struct:vn::sensors::GpsSolutionLlaRegister
GpsSolutionLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct GpsSolutionLlaRegister$/;"	s	namespace:vn::sensors
GyroCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GyroCompensationRegister($/;"	f	struct:vn::sensors::GyroCompensationRegister
GyroCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	GyroCompensationRegister() { }$/;"	f	struct:vn::sensors::GyroCompensationRegister
GyroCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct GyroCompensationRegister$/;"	s	namespace:vn::sensors
HEADINGMODE_ABSOLUTE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HEADINGMODE_ABSOLUTE = 0,$/;"	e	enum:vn::protocol::uart::HeadingMode
HEADINGMODE_INDOOR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HEADINGMODE_INDOOR = 2$/;"	e	enum:vn::protocol::uart::HeadingMode
HEADINGMODE_RELATIVE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HEADINGMODE_RELATIVE = 1,$/;"	e	enum:vn::protocol::uart::HeadingMode
HSIMODE_OFF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HSIMODE_OFF = 0,$/;"	e	enum:vn::protocol::uart::HsiMode
HSIMODE_RESET	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HSIMODE_RESET = 2$/;"	e	enum:vn::protocol::uart::HsiMode
HSIMODE_RUN	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HSIMODE_RUN = 1,$/;"	e	enum:vn::protocol::uart::HsiMode
HSIOUTPUT_NOONBOARD	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HSIOUTPUT_NOONBOARD = 1,$/;"	e	enum:vn::protocol::uart::HsiOutput
HSIOUTPUT_USEONBOARD	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	HSIOUTPUT_USEONBOARD = 3$/;"	e	enum:vn::protocol::uart::HsiOutput
HandleSerialPortNotifications	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	static void HandleSerialPortNotifications(void* data)$/;"	f	struct:vn::xplat::SerialPort::Impl
HandleSerialPortNotifications	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void HandleSerialPortNotifications()$/;"	f	struct:vn::xplat::SerialPort::Impl
HandleSignalFunc	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^	typedef bool (*HandleSignalFunc)(Signal signal);$/;"	t	class:vn::xplat::Signal
HeadingMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum HeadingMode$/;"	g	namespace:vn::protocol::uart
HsiMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum HsiMode$/;"	g	namespace:vn::protocol::uart
HsiOutput	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum HsiOutput$/;"	g	namespace:vn::protocol::uart
IMUGROUP_ACCEL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_ACCEL					= 0x0200,	\/\/\/< Accel.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_ANGULARRATE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_ANGULARRATE			= 0x0400,	\/\/\/< AngularRate.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_DELTATHETA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_DELTATHETA				= 0x0040,	\/\/\/< DeltaTheta.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_DELTAVEL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_DELTAVEL				= 0x0080,	\/\/\/< DeltaVel.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_IMUSTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_IMUSTATUS				= 0x0001,	\/\/\/< ImuStatus.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_MAG	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_MAG					= 0x0100,	\/\/\/< Mag.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_NONE					= 0x0000,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_PRES	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_PRES					= 0x0020,	\/\/\/< Pres.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_SENSSAT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_SENSSAT				= 0x0800,	\/\/\/< SensSat.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_TEMP	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_TEMP					= 0x0010,	\/\/\/< Temp.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_UNCOMPACCEL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_UNCOMPACCEL			= 0x0004,	\/\/\/< UncompAccel.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_UNCOMPGYRO	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_UNCOMPGYRO				= 0x0008,	\/\/\/< UncompGyro.$/;"	e	enum:vn::protocol::uart::ImuGroup
IMUGROUP_UNCOMPMAG	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	IMUGROUP_UNCOMPMAG				= 0x0002,	\/\/\/< UncompMag.$/;"	e	enum:vn::protocol::uart::ImuGroup
INSGROUP_ACCELECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_ACCELECEF				= 0x0080,	\/\/\/< AccelEcef.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_INSSTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_INSSTATUS				= 0x0001,	\/\/\/< InsStatus.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_LINEARACCELECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_LINEARACCELECEF		= 0x0100,	\/\/\/< LinearAccelEcef.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_MAGECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_MAGECEF				= 0x0040,	\/\/\/< MagEcef.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_NONE					= 0x0000,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_POSECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_POSECEF				= 0x0004,	\/\/\/< PosEcef.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_POSLLA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_POSLLA					= 0x0002,	\/\/\/< PosLla.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_POSU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_POSU					= 0x0200,	\/\/\/< PosU.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_VELBODY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_VELBODY				= 0x0008,	\/\/\/< VelBody.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_VELECEF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_VELECEF				= 0x0020,	\/\/\/< VelEcef.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_VELNED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_VELNED					= 0x0010,	\/\/\/< VelNed.$/;"	e	enum:vn::protocol::uart::InsGroup
INSGROUP_VELU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSGROUP_VELU					= 0x0400,	\/\/\/< VelU.$/;"	e	enum:vn::protocol::uart::InsGroup
INSSTATUS_GPS_ERROR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_GPS_ERROR = 0x40						\/\/\/< \\brief GPS communication error.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_GPS_FIX	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_GPS_FIX = 0x04,						\/\/\/< \\brief Indicates proper GPS fix.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_IMU_ERROR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_IMU_ERROR = 0x10,						\/\/\/< \\brief IMU communication error.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_MAG_PRES_ERROR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_MAG_PRES_ERROR = 0x20,				\/\/\/< \\brief Magnetometer or pressure sensor error.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_NOT_TRACKING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_NOT_TRACKING = 0x00,					\/\/\/< \\brief Not tracking.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_SUFFICIENT_DYNAMIC_MOTION	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_SUFFICIENT_DYNAMIC_MOTION = 0x01,		\/\/\/< \\brief Sufficient dynamic motion.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_TIME_ERROR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_TIME_ERROR = 0x08,					\/\/\/< \\brief INS filter loop exceeds 5 ms.$/;"	e	enum:vn::protocol::uart::InsStatus
INSSTATUS_TRACKING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INSSTATUS_TRACKING = 0x02,						\/\/\/< \\brief INS is tracking.$/;"	e	enum:vn::protocol::uart::InsStatus
INTEGRATIONFRAME_BODY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INTEGRATIONFRAME_BODY = 0,$/;"	e	enum:vn::protocol::uart::IntegrationFrame
INTEGRATIONFRAME_NED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	INTEGRATIONFRAME_NED = 1$/;"	e	enum:vn::protocol::uart::IntegrationFrame
IPort	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^class vn_proglib_DLLEXPORT IPort$/;"	c	namespace:vn::xplat
Impl	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^struct CompositeData::Impl$/;"	s	class:vn::sensors::CompositeData	file:
Impl	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^	Impl()$/;"	f	struct:vn::xplat::CriticalSection::Impl
Impl	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^struct CriticalSection::Impl$/;"	s	class:vn::xplat::CriticalSection	file:
Impl	vnproglib-1.1.4.0/cpp/src/event.cpp	/^	Impl() :$/;"	f	struct:vn::xplat::Event::Impl
Impl	vnproglib-1.1.4.0/cpp/src/event.cpp	/^struct Event::Impl$/;"	s	class:vn::xplat::Event	file:
Impl	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	explicit Impl(MemoryPort* backReference) :$/;"	f	struct:vn::util::MemoryPort::Impl
Impl	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^struct MemoryPort::Impl$/;"	s	class:vn::util::MemoryPort	file:
Impl	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	Impl(PacketFinder* backReference, size_t internalReceiveBufferSize) :$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl
Impl	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	explicit Impl(PacketFinder* backReference) :$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl
Impl	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^struct PacketFinder::Impl$/;"	s	class:vn::protocol::uart::PacketFinder	file:
Impl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	explicit Impl(VnSensor* backReference) :$/;"	f	struct:vn::sensors::VnSensor::Impl
Impl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^struct VnSensor::Impl$/;"	s	class:vn::sensors::VnSensor	file:
Impl	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	explicit Impl(SerialPort* backReference) :$/;"	f	struct:vn::xplat::SerialPort::Impl
Impl	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^struct SerialPort::Impl$/;"	s	class:vn::xplat::SerialPort	file:
Impl	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^	Impl() :$/;"	f	struct:vn::xplat::Thread::Impl
Impl	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^struct Thread::Impl$/;"	s	class:vn::xplat::Thread	file:
Impl	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^	Impl() :$/;"	f	struct:vn::xplat::Stopwatch::Impl
Impl	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^struct Stopwatch::Impl$/;"	s	class:vn::xplat::Stopwatch	file:
ImuFilteringConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ImuFilteringConfigurationRegister($/;"	f	struct:vn::sensors::ImuFilteringConfigurationRegister
ImuFilteringConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ImuFilteringConfigurationRegister() { }$/;"	f	struct:vn::sensors::ImuFilteringConfigurationRegister
ImuFilteringConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct ImuFilteringConfigurationRegister$/;"	s	namespace:vn::sensors
ImuGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum ImuGroup$/;"	g	namespace:vn::protocol::uart
ImuMeasurementsRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ImuMeasurementsRegister($/;"	f	struct:vn::sensors::ImuMeasurementsRegister
ImuMeasurementsRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ImuMeasurementsRegister() { }$/;"	f	struct:vn::sensors::ImuMeasurementsRegister
ImuMeasurementsRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct ImuMeasurementsRegister$/;"	s	namespace:vn::sensors
ImuRateConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ImuRateConfigurationRegister($/;"	f	struct:vn::sensors::ImuRateConfigurationRegister
ImuRateConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ImuRateConfigurationRegister() { }$/;"	f	struct:vn::sensors::ImuRateConfigurationRegister
ImuRateConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct ImuRateConfigurationRegister$/;"	s	namespace:vn::sensors
InsAdvancedConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsAdvancedConfigurationRegister($/;"	f	struct:vn::sensors::InsAdvancedConfigurationRegister
InsAdvancedConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsAdvancedConfigurationRegister() { }$/;"	f	struct:vn::sensors::InsAdvancedConfigurationRegister
InsAdvancedConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsAdvancedConfigurationRegister$/;"	s	namespace:vn::sensors
InsBasicConfigurationRegisterVn200	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsBasicConfigurationRegisterVn200($/;"	f	struct:vn::sensors::InsBasicConfigurationRegisterVn200
InsBasicConfigurationRegisterVn200	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsBasicConfigurationRegisterVn200() { }$/;"	f	struct:vn::sensors::InsBasicConfigurationRegisterVn200
InsBasicConfigurationRegisterVn200	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsBasicConfigurationRegisterVn200$/;"	s	namespace:vn::sensors
InsBasicConfigurationRegisterVn300	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsBasicConfigurationRegisterVn300($/;"	f	struct:vn::sensors::InsBasicConfigurationRegisterVn300
InsBasicConfigurationRegisterVn300	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsBasicConfigurationRegisterVn300() { }$/;"	f	struct:vn::sensors::InsBasicConfigurationRegisterVn300
InsBasicConfigurationRegisterVn300	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsBasicConfigurationRegisterVn300$/;"	s	namespace:vn::sensors
InsGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum InsGroup$/;"	g	namespace:vn::protocol::uart
InsSolutionEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsSolutionEcefRegister($/;"	f	struct:vn::sensors::InsSolutionEcefRegister
InsSolutionEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsSolutionEcefRegister() { }$/;"	f	struct:vn::sensors::InsSolutionEcefRegister
InsSolutionEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsSolutionEcefRegister$/;"	s	namespace:vn::sensors
InsSolutionLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsSolutionLlaRegister($/;"	f	struct:vn::sensors::InsSolutionLlaRegister
InsSolutionLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsSolutionLlaRegister() { }$/;"	f	struct:vn::sensors::InsSolutionLlaRegister
InsSolutionLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsSolutionLlaRegister$/;"	s	namespace:vn::sensors
InsStateEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsStateEcefRegister($/;"	f	struct:vn::sensors::InsStateEcefRegister
InsStateEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsStateEcefRegister() { }$/;"	f	struct:vn::sensors::InsStateEcefRegister
InsStateEcefRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsStateEcefRegister$/;"	s	namespace:vn::sensors
InsStateLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsStateLlaRegister($/;"	f	struct:vn::sensors::InsStateLlaRegister
InsStateLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	InsStateLlaRegister() { }$/;"	f	struct:vn::sensors::InsStateLlaRegister
InsStateLlaRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct InsStateLlaRegister$/;"	s	namespace:vn::sensors
InsStatus	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum InsStatus$/;"	g	namespace:vn::protocol::uart
IntegrationFrame	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum IntegrationFrame$/;"	g	namespace:vn::protocol::uart
IsOpen	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	bool IsOpen;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
IsOpen	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool IsOpen;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
MAGNETICMODE_2D	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	MAGNETICMODE_2D = 0,$/;"	e	enum:vn::protocol::uart::MagneticMode
MAGNETICMODE_3D	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	MAGNETICMODE_3D = 1$/;"	e	enum:vn::protocol::uart::MagneticMode
MagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagneticAccelerationAndAngularRatesRegister($/;"	f	struct:vn::sensors::MagneticAccelerationAndAngularRatesRegister
MagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagneticAccelerationAndAngularRatesRegister() { }$/;"	f	struct:vn::sensors::MagneticAccelerationAndAngularRatesRegister
MagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct MagneticAccelerationAndAngularRatesRegister$/;"	s	namespace:vn::sensors
MagneticAndGravityReferenceVectorsRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagneticAndGravityReferenceVectorsRegister($/;"	f	struct:vn::sensors::MagneticAndGravityReferenceVectorsRegister
MagneticAndGravityReferenceVectorsRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagneticAndGravityReferenceVectorsRegister() { }$/;"	f	struct:vn::sensors::MagneticAndGravityReferenceVectorsRegister
MagneticAndGravityReferenceVectorsRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct MagneticAndGravityReferenceVectorsRegister$/;"	s	namespace:vn::sensors
MagneticMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum MagneticMode$/;"	g	namespace:vn::protocol::uart
MagneticType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum MagneticType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
MagnetometerCalibrationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagnetometerCalibrationControlRegister($/;"	f	struct:vn::sensors::MagnetometerCalibrationControlRegister
MagnetometerCalibrationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagnetometerCalibrationControlRegister() { }$/;"	f	struct:vn::sensors::MagnetometerCalibrationControlRegister
MagnetometerCalibrationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct MagnetometerCalibrationControlRegister$/;"	s	namespace:vn::sensors
MagnetometerCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagnetometerCompensationRegister($/;"	f	struct:vn::sensors::MagnetometerCompensationRegister
MagnetometerCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	MagnetometerCompensationRegister() { }$/;"	f	struct:vn::sensors::MagnetometerCompensationRegister
MagnetometerCompensationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct MagnetometerCompensationRegister$/;"	s	namespace:vn::sensors
MaximumSizeExpectedForBinaryPacket	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const size_t MaximumSizeExpectedForBinaryPacket = 256;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
MaximumSizeForAsciiPacket	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const size_t MaximumSizeForAsciiPacket = 256;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
MaximumSizeForBinaryStartAndAllGroupData	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	static const size_t MaximumSizeForBinaryStartAndAllGroupData = 18;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
MemoryPort	vnproglib-1.1.4.0/cpp/include/vn/memoryport.h	/^class MemoryPort : public xplat::IPort, private NoCopy$/;"	c	namespace:vn::util
MemoryPort	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^MemoryPort::MemoryPort() :$/;"	f	class:vn::util::MemoryPort
NEXT	vnproglib-1.1.4.0/cpp/src/packet.cpp	25;"	d	file:
NoCopy	vnproglib-1.1.4.0/cpp/include/vn/nocopy.h	/^	NoCopy() { }$/;"	f	class:vn::util::NoCopy
NoCopy	vnproglib-1.1.4.0/cpp/include/vn/nocopy.h	/^class vn_proglib_DLLEXPORT NoCopy$/;"	c	namespace:vn::util
NotificationsThreadStopped	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	Event NotificationsThreadStopped;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
NumberOfBytesToPurgeOnOpeningSerialPort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	static const size_t NumberOfBytesToPurgeOnOpeningSerialPort = 100;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
NumberOfReceiveDataDroppedSections	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	size_t NumberOfReceiveDataDroppedSections;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
NumberOfReceiveDataDroppedSections	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^size_t SerialPort::NumberOfReceiveDataDroppedSections()$/;"	f	class:vn::xplat::SerialPort
ONE_STOP_BIT	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^		ONE_STOP_BIT,$/;"	e	enum:vn::xplat::SerialPort::StopBits
Observer	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^		Observer() { }$/;"	f	class:vn::xplat::Signal::Observer
Observer	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^	class Observer$/;"	c	class:vn::xplat::Signal
ObserversCriticalSection	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	CriticalSection ObserversCriticalSection;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
ObserversCriticalSection	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	CriticalSection ObserversCriticalSection;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
OnDataReceived	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	void OnDataReceived()$/;"	f	struct:vn::util::MemoryPort::Impl
OnDataReceived	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void OnDataReceived()$/;"	f	struct:vn::xplat::SerialPort::Impl
PI	src/main.cpp	28;"	d	file:
PI	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const float PI = 3.141592653589793238f;$/;"	m	namespace:vn::math
PI2	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const float PI2 = 6.283185307179586476f;$/;"	m	namespace:vn::math
PI2d	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const double PI2d = 6.283185307179586476;$/;"	m	namespace:vn::math
PI2f	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const float PI2f = PI2;$/;"	m	namespace:vn::math
PIH	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const float PIH = 1.570796326794896619f;$/;"	m	namespace:vn::math
PIHd	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const double PIHd = 1.570796326794896619;$/;"	m	namespace:vn::math
PIHf	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const float PIHf = PIH;$/;"	m	namespace:vn::math
PId	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const double PId = 3.141592653589793238;$/;"	m	namespace:vn::math
PIf	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^static const float PIf = PI;$/;"	m	namespace:vn::math
POS_ECEF	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^		POS_ECEF$/;"	e	enum:vn::math::PositionD::PositionType
POS_LLA	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^		POS_LLA,$/;"	e	enum:vn::math::PositionD::PositionType
PPSSOURCE_GPSPPSFALLING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	PPSSOURCE_GPSPPSFALLING = 1,$/;"	e	enum:vn::protocol::uart::PpsSource
PPSSOURCE_GPSPPSRISING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	PPSSOURCE_GPSPPSRISING = 0,$/;"	e	enum:vn::protocol::uart::PpsSource
PPSSOURCE_SYNCINFALLING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	PPSSOURCE_SYNCINFALLING = 3$/;"	e	enum:vn::protocol::uart::PpsSource
PPSSOURCE_SYNCINRISING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	PPSSOURCE_SYNCINRISING = 2,$/;"	e	enum:vn::protocol::uart::PpsSource
Packet	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^struct vn_proglib_DLLEXPORT Packet$/;"	s	namespace:vn::protocol::uart
Packet	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet::Packet() :$/;"	f	class:vn::protocol::uart::Packet
Packet	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet::Packet(Packet const& toCopy) :$/;"	f	class:vn::protocol::uart::Packet
Packet	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet::Packet(char const* packet, size_t length) :$/;"	f	class:vn::protocol::uart::Packet
Packet	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet::Packet(string packet) :$/;"	f	class:vn::protocol::uart::Packet
PacketFinder	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	/^class vn_proglib_DLLEXPORT PacketFinder : private util::NoCopy$/;"	c	namespace:vn::protocol::uart
PacketFinder	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^PacketFinder::PacketFinder() :$/;"	f	class:vn::protocol::uart::PacketFinder
PacketFinder	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^PacketFinder::PacketFinder(size_t internalReceiveBufferSize) :$/;"	f	class:vn::protocol::uart::PacketFinder
PortName	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	string PortName;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
PositionD	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^	PositionD() { }$/;"	f	class:vn::math::PositionD
PositionD	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^class PositionD$/;"	c	namespace:vn::math
PositionD	vnproglib-1.1.4.0/cpp/src/position.cpp	/^PositionD::PositionD(PositionType type, vec3d pos) :$/;"	f	class:vn::math::PositionD
PositionType	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^	enum PositionType$/;"	g	class:vn::math::PositionD
PositionType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum PositionType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
PositionUncertaintyType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum PositionUncertaintyType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
PossiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	typedef void(*PossiblePacketFoundHandler)(void* userData, protocol::uart::Packet& possiblePacket, size_t packetStartRunningIndex);$/;"	t	class:vn::sensors::VnSensor
PpsSource	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum PpsSource$/;"	g	namespace:vn::protocol::uart
PressureType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum PressureType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
PurgeFirstDataBytesFromSerialPort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^    void PurgeFirstDataBytesFromSerialPort()$/;"	f	struct:vn::xplat::SerialPort::Impl
PurgeFirstDataBytesWhenSerialPortIsFirstOpened	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool PurgeFirstDataBytesWhenSerialPortIsFirstOpened;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
QuaternionMagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	QuaternionMagneticAccelerationAndAngularRatesRegister($/;"	f	struct:vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister
QuaternionMagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	QuaternionMagneticAccelerationAndAngularRatesRegister() { }$/;"	f	struct:vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister
QuaternionMagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct QuaternionMagneticAccelerationAndAngularRatesRegister$/;"	s	namespace:vn::sensors
RawDataReceivedHandler	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	typedef void(*RawDataReceivedHandler)(void* userData, const char* rawData, size_t length, size_t runningIndex);$/;"	t	class:vn::sensors::VnSensor
ReadWriteCS	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	CriticalSection ReadWriteCS;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
ReferenceVectorConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ReferenceVectorConfigurationRegister($/;"	f	struct:vn::sensors::ReferenceVectorConfigurationRegister
ReferenceVectorConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	ReferenceVectorConfigurationRegister() { }$/;"	f	struct:vn::sensors::ReferenceVectorConfigurationRegister
ReferenceVectorConfigurationRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct ReferenceVectorConfigurationRegister$/;"	s	namespace:vn::sensors
SCENARIO_AHRS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SCENARIO_AHRS = 0,$/;"	e	enum:vn::protocol::uart::Scenario
SCENARIO_GPSMOVINGBASELINEDYNAMIC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SCENARIO_GPSMOVINGBASELINEDYNAMIC = 3,$/;"	e	enum:vn::protocol::uart::Scenario
SCENARIO_GPSMOVINGBASELINESTATIC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SCENARIO_GPSMOVINGBASELINESTATIC = 4$/;"	e	enum:vn::protocol::uart::Scenario
SCENARIO_INSWITHOUTPRESSURE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SCENARIO_INSWITHOUTPRESSURE = 2,$/;"	e	enum:vn::protocol::uart::Scenario
SCENARIO_INSWITHPRESSURE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SCENARIO_INSWITHPRESSURE = 1,$/;"	e	enum:vn::protocol::uart::Scenario
SENSSAT_ACCX	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_ACCX = 0x0008,		\/\/\/< \\brief Accelerometer X-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_ACCY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_ACCY = 0x0010,		\/\/\/< \\brief Accelerometer Y-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_ACCZ	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_ACCZ = 0x0020,		\/\/\/< \\brief Accelerometer Z-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_GYROX	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_GYROX = 0x0040,		\/\/\/< \\brief Gyro X-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_GYROY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_GYROY = 0x0080,		\/\/\/< \\brief Gyro Y-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_GYROZ	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_GYROZ = 0x0100,		\/\/\/< \\brief Gyro Z-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_MAGX	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_MAGX = 0x0001,		\/\/\/< \\brief Magnetometer X-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_MAGY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_MAGY = 0x0002,		\/\/\/< \\brief Magnetometer Y-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_MAGZ	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_MAGZ = 0x0004,		\/\/\/< \\brief Magnetometer Z-axis is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
SENSSAT_PRES	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SENSSAT_PRES = 0x0200		\/\/\/< \\brief Pressure measurement is saturated.$/;"	e	enum:vn::protocol::uart::SensSat
STATUSMODE_INSSTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	STATUSMODE_INSSTATUS = 2$/;"	e	enum:vn::protocol::uart::StatusMode
STATUSMODE_OFF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	STATUSMODE_OFF = 0,$/;"	e	enum:vn::protocol::uart::StatusMode
STATUSMODE_VPESTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	STATUSMODE_VPESTATUS = 1,$/;"	e	enum:vn::protocol::uart::StatusMode
SYNCINEDGE_FALLING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINEDGE_FALLING = 1$/;"	e	enum:vn::protocol::uart::SyncInEdge
SYNCINEDGE_RISING	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINEDGE_RISING = 0,$/;"	e	enum:vn::protocol::uart::SyncInEdge
SYNCINMODE_ADC2	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINMODE_ADC2 = 1,$/;"	e	enum:vn::protocol::uart::SyncInMode
SYNCINMODE_ASYNC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINMODE_ASYNC = 5$/;"	e	enum:vn::protocol::uart::SyncInMode
SYNCINMODE_ASYNC2	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINMODE_ASYNC2 = 2,$/;"	e	enum:vn::protocol::uart::SyncInMode
SYNCINMODE_COUNT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINMODE_COUNT = 3,$/;"	e	enum:vn::protocol::uart::SyncInMode
SYNCINMODE_COUNT2	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINMODE_COUNT2 = 0,$/;"	e	enum:vn::protocol::uart::SyncInMode
SYNCINMODE_IMU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCINMODE_IMU = 4,$/;"	e	enum:vn::protocol::uart::SyncInMode
SYNCOUTMODE_GPSPPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTMODE_GPSPPS = 6$/;"	e	enum:vn::protocol::uart::SyncOutMode
SYNCOUTMODE_IMUREADY	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTMODE_IMUREADY = 2,$/;"	e	enum:vn::protocol::uart::SyncOutMode
SYNCOUTMODE_INS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTMODE_INS = 3,$/;"	e	enum:vn::protocol::uart::SyncOutMode
SYNCOUTMODE_ITEMSTART	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTMODE_ITEMSTART = 1,$/;"	e	enum:vn::protocol::uart::SyncOutMode
SYNCOUTMODE_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTMODE_NONE = 0,$/;"	e	enum:vn::protocol::uart::SyncOutMode
SYNCOUTPOLARITY_NEGATIVE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTPOLARITY_NEGATIVE = 0,$/;"	e	enum:vn::protocol::uart::SyncOutPolarity
SYNCOUTPOLARITY_POSITIVE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	SYNCOUTPOLARITY_POSITIVE = 1$/;"	e	enum:vn::protocol::uart::SyncOutPolarity
Scenario	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum Scenario$/;"	g	namespace:vn::protocol::uart
SearchHelper	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	explicit SearchHelper(const string &portName) :$/;"	f	struct:vn::sensors::SearchHelper
SearchHelper	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^struct SearchHelper$/;"	s	namespace:vn::sensors	file:
Searcher	vnproglib-1.1.4.0/cpp/include/vn/searcher.h	/^class vn_proglib_DLLEXPORT Searcher$/;"	c	namespace:vn::sensors
SendDataBackDoor	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::SendDataBackDoor($/;"	f	class:vn::util::MemoryPort
SendDataBackDoor	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::SendDataBackDoor(const uint8_t data[], size_t length)$/;"	f	class:vn::util::MemoryPort
SensSat	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum SensSat$/;"	g	namespace:vn::protocol::uart
SensorError	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum SensorError$/;"	g	namespace:vn::protocol::uart
SerialPort	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^class vn_proglib_DLLEXPORT SerialPort : public IPort, util::NoCopy$/;"	c	namespace:vn::xplat
SerialPort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^SerialPort::SerialPort($/;"	f	class:vn::xplat::SerialPort
SerialPortHandle	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	HANDLE SerialPortHandle;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
SerialPortHandle	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	int SerialPortHandle;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
SerialPort_getRegistryKeyForActiveFtdiPort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^HKEY SerialPort_getRegistryKeyForActiveFtdiPort(string portName, bool isReadOnly)$/;"	f	namespace:vn::xplat
SerialPort_isFtdiUsbSerialPort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^bool SerialPort_isFtdiUsbSerialPort(string portName)$/;"	f	namespace:vn::xplat
Signal	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^class Signal$/;"	c	namespace:vn::xplat
SignalType	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^	enum SignalType$/;"	g	class:vn::xplat::Signal
SimplePortIsOurs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	bool SimplePortIsOurs;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
StartRoutine	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^	Thread::ThreadStartRoutine StartRoutine;$/;"	m	struct:vn::xplat::Thread::Impl	file:
StartRoutineWrapper	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^	static void* StartRoutineWrapper(void* data)$/;"	f	struct:vn::xplat::Thread::Impl
StartSerialPortNotificationsThread	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void StartSerialPortNotificationsThread()$/;"	f	struct:vn::xplat::SerialPort::Impl
StartupFilterBiasEstimateRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	StartupFilterBiasEstimateRegister($/;"	f	struct:vn::sensors::StartupFilterBiasEstimateRegister
StartupFilterBiasEstimateRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	StartupFilterBiasEstimateRegister() { }$/;"	f	struct:vn::sensors::StartupFilterBiasEstimateRegister
StartupFilterBiasEstimateRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct StartupFilterBiasEstimateRegister$/;"	s	namespace:vn::sensors
StatusMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum StatusMode$/;"	g	namespace:vn::protocol::uart
StopBits	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^	enum StopBits$/;"	g	class:vn::xplat::SerialPort
StopSerialPortNotificationsThread	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void StopSerialPortNotificationsThread()$/;"	f	struct:vn::xplat::SerialPort::Impl
Stopwatch	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^class vn_proglib_DLLEXPORT Stopwatch$/;"	c	namespace:vn::xplat
Stopwatch	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^Stopwatch::Stopwatch() :$/;"	f	class:vn::xplat::Stopwatch
SyncInEdge	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum SyncInEdge$/;"	g	namespace:vn::protocol::uart
SyncInMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum SyncInMode$/;"	g	namespace:vn::protocol::uart
SyncOutMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum SyncOutMode$/;"	g	namespace:vn::protocol::uart
SyncOutPolarity	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum SyncOutPolarity$/;"	g	namespace:vn::protocol::uart
SynchronizationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	SynchronizationControlRegister($/;"	f	struct:vn::sensors::SynchronizationControlRegister
SynchronizationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	SynchronizationControlRegister() { }$/;"	f	struct:vn::sensors::SynchronizationControlRegister
SynchronizationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct SynchronizationControlRegister$/;"	s	namespace:vn::sensors
SynchronizationStatusRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	SynchronizationStatusRegister($/;"	f	struct:vn::sensors::SynchronizationStatusRegister
SynchronizationStatusRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	SynchronizationStatusRegister() { }$/;"	f	struct:vn::sensors::SynchronizationStatusRegister
SynchronizationStatusRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct SynchronizationStatusRegister$/;"	s	namespace:vn::sensors
TIMEGROUP_GPSTOW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_GPSTOW				= 0x0004,	\/\/\/< GpsTow.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_GPSWEEK	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_GPSWEEK				= 0x0008,	\/\/\/< GpsWeek.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_NONE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_NONE					= 0x0000,	\/\/\/< None.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_SYNCINCNT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_SYNCINCNT			= 0x0080,	\/\/\/< SyncInCnt.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_SYNCOUTCNT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  TIMEGROUP_SYNCOUTCNT    = 0x0100,	\/\/\/< SyncOutCnt.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_TIMEGPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_TIMEGPS				= 0x0002,	\/\/\/< TimeGps.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_TIMEGPSPPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_TIMEGPSPPS			= 0x0020,	\/\/\/< TimeGpsPps.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_TIMESTARTUP	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_TIMESTARTUP			= 0x0001,	\/\/\/< TimeStartup.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_TIMESTATUS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  TIMEGROUP_TIMESTATUS    = 0x0200	\/\/\/< TimeStatus.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_TIMESYNCIN	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_TIMESYNCIN			= 0x0010,	\/\/\/< TimeSyncIn.$/;"	e	enum:vn::protocol::uart::TimeGroup
TIMEGROUP_TIMEUTC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	TIMEGROUP_TIMEUTC				= 0x0040,	\/\/\/< TimeUTC.$/;"	e	enum:vn::protocol::uart::TimeGroup
TWO_STOP_BITS	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^		TWO_STOP_BITS$/;"	e	enum:vn::xplat::SerialPort::StopBits
TYPE_ASCII	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^		TYPE_ASCII		\/\/\/< ASCII packet.$/;"	e	enum:vn::protocol::uart::Packet::Type
TYPE_BINARY	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^		TYPE_BINARY,	\/\/\/< Binary packet.$/;"	e	enum:vn::protocol::uart::Packet::Type
TYPE_UNKNOWN	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^		TYPE_UNKNOWN,	\/\/\/< Type is unknown.$/;"	e	enum:vn::protocol::uart::Packet::Type
TemperatureType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum TemperatureType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
TestBaudratesRaw	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^uint32_t TestBaudratesRaw[] = { 115200, 128000, 230400, 460800, 921600, 57600, 38400, 19200, 9600 };$/;"	m	namespace:vn::sensors	file:
TestHelper	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	TestHelper(SerialPort *serialPort, PacketFinder *packetFinder) :$/;"	f	struct:vn::sensors::TestHelper
TestHelper	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^struct TestHelper$/;"	s	namespace:vn::sensors	file:
Thread	vnproglib-1.1.4.0/cpp/include/vn/thread.h	/^class vn_proglib_DLLEXPORT Thread : private util::NoCopy$/;"	c	namespace:vn::xplat
Thread	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^Thread::Thread($/;"	f	class:vn::xplat::Thread
ThreadHandle	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^	HANDLE ThreadHandle;$/;"	m	struct:vn::xplat::Thread::Impl	file:
ThreadIsRunning	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool ThreadIsRunning;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
ThreadStartRoutine	vnproglib-1.1.4.0/cpp/include/vn/thread.h	/^	typedef void (*ThreadStartRoutine)(void*);$/;"	t	class:vn::xplat::Thread
ThreadStopped	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	bool ThreadStopped;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
TimeGroup	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum TimeGroup$/;"	g	namespace:vn::protocol::uart
TimeInfo	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^struct TimeInfo$/;"	s	namespace:vn::protocol::uart
TimeStamp	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^struct vn_proglib_DLLEXPORT TimeStamp$/;"	s	namespace:vn::xplat
TimeStamp	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^TimeStamp::TimeStamp() : _sec(0), _usec(0) { }$/;"	f	class:vn::xplat::TimeStamp
TimeStamp	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^TimeStamp::TimeStamp(int64_t sec, uint64_t usec) : _sec(sec), _usec(usec) { }$/;"	f	class:vn::xplat::TimeStamp
TimeUtc	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^struct TimeUtc$/;"	s	namespace:vn::protocol::uart
Type	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^	enum Type$/;"	g	struct:vn::protocol::uart::Packet
UNKNOWN	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^		UNKNOWN,$/;"	e	enum:vn::xplat::Signal::SignalType
VELOCITYCOMPENSATIONMODE_BODYMEASUREMENT	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VELOCITYCOMPENSATIONMODE_BODYMEASUREMENT = 1$/;"	e	enum:vn::protocol::uart::VelocityCompensationMode
VELOCITYCOMPENSATIONMODE_DISABLED	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VELOCITYCOMPENSATIONMODE_DISABLED = 0,$/;"	e	enum:vn::protocol::uart::VelocityCompensationMode
VNACC	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNACC	= 11,		\/\/\/< Asynchronous output type is Acceleration Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNAPI_MAJOR	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	13;"	d
VNAPI_MINOR	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	14;"	d
VNAPI_PATCH	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	15;"	d
VNAPI_REVISION	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	16;"	d
VNCMV	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNCMV	= 253,		\/\/\/< Asynchronous output type is Calibrated Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNCOV	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNCOV	= 255,		\/\/\/< Asynchronous output type is Kalman Filter Covariance Matrix Diagonal.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNDCM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNDCM	= 9,		\/\/\/< Asynchronous output type is Directional Cosine Orientation Matrix.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNDTV	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNDTV	= 30,		\/\/\/< Asynchronous output type is Delta Theta and Delta Velocity.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNGPE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNGPE	= 21,		\/\/\/< Asynchronous output type is GPS ECEF.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNGPS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNGPS	= 20,		\/\/\/< Asynchronous output type is GPS LLA.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNGYR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNGYR	= 12,		\/\/\/< Asynchronous output type is Angular Rate Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNICM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNICM	= 18,		\/\/\/< Asynchronous output type is Yaw, Pitch, Roll, Inertial Magnetic\/Acceleration, and Angular Rate Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNIMU	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNIMU	= 19,		\/\/\/< Asynchronous output type is Calibrated Inertial Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNINE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNINE	= 23,		\/\/\/< Asynchronous output type is INS ECEF solution.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNINS	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNINS	= 22,		\/\/\/< Asynchronous output type is INS LLA solution.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNISE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNISE	= 29,		\/\/\/< Asynchronous output type is INS ECEF 2 solution.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNISL	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNISL	= 28,		\/\/\/< Asynchronous output type is INS LLA 2 solution.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNMAG	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNMAG	= 10,		\/\/\/< Asynchronous output type is Magnetic Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNMAR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNMAR	= 13,		\/\/\/< Asynchronous output type is Magnetic, Acceleration, and Angular Rate Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNOFF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNOFF	= 0,		\/\/\/< Asynchronous output is turned off.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQAR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQAR	= 7,		\/\/\/< Asynchronous output type is Quaternion, Acceleration and Angular Rates.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQMA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQMA	= 6,		\/\/\/< Asynchronous output type is Quaternion, Magnetic and Acceleration.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQMR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQMR	= 8,		\/\/\/< Asynchronous output type is Quaternion, Magnetic, Acceleration and Angular Rates.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQTA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQTA	= 4,		\/\/\/< Asynchronous output type is Quaternion and Acceleration.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQTM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQTM	= 3,		\/\/\/< Asynchronous output type is Quaternion and Magnetic.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQTN	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQTN	= 2,		\/\/\/< Asynchronous output type is Quaternion.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNQTR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNQTR	= 5,		\/\/\/< Asynchronous output type is Quaternion and Angular Rates.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNRAW	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNRAW	= 252,		\/\/\/< Asynchronous output type is Raw Voltage Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNSTV	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNSTV	= 254,		\/\/\/< Asynchronous output type is Kalman Filter State Vector.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNYBA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNYBA	= 16,		\/\/\/< Asynchronous output type is Yaw, Pitch, Roll, Body True Acceleration.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNYCM	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNYCM	= 15,		\/\/\/< Asynchronous output type is Yaw, Pitch, Roll, and Calibrated Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNYIA	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNYIA	= 17,		\/\/\/< Asynchronous output type is Yaw, Pitch, Roll, Inertial True Acceleration.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNYMR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNYMR	= 14,		\/\/\/< Asynchronous output type is Yaw, Pitch, Roll, Magnetic, Acceleration, and Angular Rate Measurements.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VNYPR	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VNYPR	= 1,		\/\/\/< Asynchronous output type is Yaw, Pitch, Roll.$/;"	e	enum:vn::protocol::uart::AsciiAsync
VN_BIG_ENDIAN	vnproglib-1.1.4.0/cpp/src/utilities.cpp	25;"	d	file:
VN_HAS_RANGE_LOOP	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	14;"	d
VN_HAVE_ENDIAN_H	vnproglib-1.1.4.0/cpp/src/utilities.cpp	19;"	d	file:
VN_HAVE_SECURE_CRT	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	72;"	d
VN_HAVE_SECURE_CRT	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	75;"	d
VN_HAVE_SECURE_SCL	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	73;"	d
VN_HAVE_SECURE_SCL	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	76;"	d
VN_LITTLE_ENDIAN	vnproglib-1.1.4.0/cpp/src/utilities.cpp	16;"	d	file:
VN_LITTLE_ENDIAN	vnproglib-1.1.4.0/cpp/src/utilities.cpp	23;"	d	file:
VN_SUPPORTS_CSTR_STRING_CONCATENATE	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	65;"	d
VN_SUPPORTS_CSTR_STRING_CONCATENATE	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	67;"	d
VN_SUPPORTS_INITIALIZER_LIST	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	48;"	d
VN_SUPPORTS_INITIALIZER_LIST	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	50;"	d
VN_SUPPORTS_SWAP	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	29;"	d
VN_SUPPORTS_SWAP	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	31;"	d
VPEENABLE_DISABLE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VPEENABLE_DISABLE = 0,$/;"	e	enum:vn::protocol::uart::VpeEnable
VPEENABLE_ENABLE	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VPEENABLE_ENABLE = 1$/;"	e	enum:vn::protocol::uart::VpeEnable
VPEMODE_MODE1	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VPEMODE_MODE1 = 1$/;"	e	enum:vn::protocol::uart::VpeMode
VPEMODE_OFF	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	VPEMODE_OFF = 0,$/;"	e	enum:vn::protocol::uart::VpeMode
ValidPacketFoundHandler	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	/^	typedef void (*ValidPacketFoundHandler)(void* userData, Packet& packet, size_t runningIndexOfPacketStart, xplat::TimeStamp timestamp);$/;"	t	class:vn::protocol::uart::PacketFinder
VelocityCompensationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VelocityCompensationControlRegister($/;"	f	struct:vn::sensors::VelocityCompensationControlRegister
VelocityCompensationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VelocityCompensationControlRegister() { }$/;"	f	struct:vn::sensors::VelocityCompensationControlRegister
VelocityCompensationControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VelocityCompensationControlRegister$/;"	s	namespace:vn::sensors
VelocityCompensationMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum VelocityCompensationMode$/;"	g	namespace:vn::protocol::uart
VelocityCompensationStatusRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VelocityCompensationStatusRegister($/;"	f	struct:vn::sensors::VelocityCompensationStatusRegister
VelocityCompensationStatusRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VelocityCompensationStatusRegister() { }$/;"	f	struct:vn::sensors::VelocityCompensationStatusRegister
VelocityCompensationStatusRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VelocityCompensationStatusRegister$/;"	s	namespace:vn::sensors
VelocityType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum VelocityType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
VelocityUncertaintyType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	enum VelocityUncertaintyType$/;"	g	struct:vn::sensors::CompositeData::Impl	file:
VnSensor	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^class vn_proglib_DLLEXPORT VnSensor : private util::NoCopy$/;"	c	namespace:vn::sensors
VnSensor	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VnSensor::VnSensor() :$/;"	f	class:vn::sensors::VnSensor
VnSensor_Family_Unknown	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^		VnSensor_Family_Unknown,	\/\/\/< Unknown device family.$/;"	e	enum:vn::sensors::VnSensor::Family
VnSensor_Family_Vn100	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^		VnSensor_Family_Vn100,		\/\/\/< A device of the VectorNav VN-100 sensor family.$/;"	e	enum:vn::sensors::VnSensor::Family
VnSensor_Family_Vn200	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^		VnSensor_Family_Vn200,		\/\/\/< A device of the VectorNav VN-200 sensor family.$/;"	e	enum:vn::sensors::VnSensor::Family
VnSensor_Family_Vn300	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^		VnSensor_Family_Vn300		\/\/\/< A device of the VectorNav VN-300 sensor family.$/;"	e	enum:vn::sensors::VnSensor::Family
VpeAccelerometerAdvancedTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeAccelerometerAdvancedTuningRegister($/;"	f	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
VpeAccelerometerAdvancedTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeAccelerometerAdvancedTuningRegister() { }$/;"	f	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
VpeAccelerometerAdvancedTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VpeAccelerometerAdvancedTuningRegister$/;"	s	namespace:vn::sensors
VpeAccelerometerBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeAccelerometerBasicTuningRegister($/;"	f	struct:vn::sensors::VpeAccelerometerBasicTuningRegister
VpeAccelerometerBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeAccelerometerBasicTuningRegister() { }$/;"	f	struct:vn::sensors::VpeAccelerometerBasicTuningRegister
VpeAccelerometerBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VpeAccelerometerBasicTuningRegister$/;"	s	namespace:vn::sensors
VpeBasicControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeBasicControlRegister($/;"	f	struct:vn::sensors::VpeBasicControlRegister
VpeBasicControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeBasicControlRegister() { }$/;"	f	struct:vn::sensors::VpeBasicControlRegister
VpeBasicControlRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VpeBasicControlRegister$/;"	s	namespace:vn::sensors
VpeEnable	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum VpeEnable$/;"	g	namespace:vn::protocol::uart
VpeGyroBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeGyroBasicTuningRegister($/;"	f	struct:vn::sensors::VpeGyroBasicTuningRegister
VpeGyroBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeGyroBasicTuningRegister() { }$/;"	f	struct:vn::sensors::VpeGyroBasicTuningRegister
VpeGyroBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VpeGyroBasicTuningRegister$/;"	s	namespace:vn::sensors
VpeMagnetometerAdvancedTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeMagnetometerAdvancedTuningRegister($/;"	f	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
VpeMagnetometerAdvancedTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeMagnetometerAdvancedTuningRegister() { }$/;"	f	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
VpeMagnetometerAdvancedTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VpeMagnetometerAdvancedTuningRegister$/;"	s	namespace:vn::sensors
VpeMagnetometerBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeMagnetometerBasicTuningRegister($/;"	f	struct:vn::sensors::VpeMagnetometerBasicTuningRegister
VpeMagnetometerBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	VpeMagnetometerBasicTuningRegister() { }$/;"	f	struct:vn::sensors::VpeMagnetometerBasicTuningRegister
VpeMagnetometerBasicTuningRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct VpeMagnetometerBasicTuningRegister$/;"	s	namespace:vn::sensors
VpeMode	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^enum VpeMode$/;"	g	namespace:vn::protocol::uart
VpeStatus	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^struct VpeStatus$/;"	s	namespace:vn::protocol::uart
VpeStatus	vnproglib-1.1.4.0/cpp/src/types.cpp	/^VpeStatus::VpeStatus()$/;"	f	class:vn::protocol::uart::VpeStatus
VpeStatus	vnproglib-1.1.4.0/cpp/src/types.cpp	/^VpeStatus::VpeStatus(uint16_t raw)$/;"	f	class:vn::protocol::uart::VpeStatus
WAIT_SIGNALED	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^		WAIT_SIGNALED,	\/\/\/< The event was signalled.$/;"	e	enum:vn::xplat::Event::WaitResult
WAIT_TIMEDOUT	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^		WAIT_TIMEDOUT	\/\/\/< Timed out while waiting for the event to signal.$/;"	e	enum:vn::xplat::Event::WaitResult
WaitForBaudrateChange	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	Event WaitForBaudrateChange;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
WaitResult	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^	enum WaitResult$/;"	g	class:vn::xplat::Event
WaitTimeForSerialPortReadsInMs	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	static const uint8_t WaitTimeForSerialPortReadsInMs = 100;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
YawPitchRollMagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	YawPitchRollMagneticAccelerationAndAngularRatesRegister($/;"	f	struct:vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister
YawPitchRollMagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	YawPitchRollMagneticAccelerationAndAngularRatesRegister() { }$/;"	f	struct:vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister
YawPitchRollMagneticAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct YawPitchRollMagneticAccelerationAndAngularRatesRegister$/;"	s	namespace:vn::sensors
YawPitchRollTrueBodyAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	YawPitchRollTrueBodyAccelerationAndAngularRatesRegister($/;"	f	struct:vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
YawPitchRollTrueBodyAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	YawPitchRollTrueBodyAccelerationAndAngularRatesRegister() { }$/;"	f	struct:vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
YawPitchRollTrueBodyAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct YawPitchRollTrueBodyAccelerationAndAngularRatesRegister$/;"	s	namespace:vn::sensors
YawPitchRollTrueInertialAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	YawPitchRollTrueInertialAccelerationAndAngularRatesRegister($/;"	f	struct:vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
YawPitchRollTrueInertialAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	YawPitchRollTrueInertialAccelerationAndAngularRatesRegister() { }$/;"	f	struct:vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
YawPitchRollTrueInertialAccelerationAndAngularRatesRegister	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^struct YawPitchRollTrueInertialAccelerationAndAngularRatesRegister$/;"	s	namespace:vn::sensors
_DLLVALIDATOR_H_	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	2;"	d
_MEMORYPORT_H_	vnproglib-1.1.4.0/cpp/include/vn/memoryport.h	7;"	d
_VNDATA_ERROR_DETECTION_H_	vnproglib-1.1.4.0/cpp/include/vn/error_detection.h	2;"	d
_VNMATH_ATTITUDE_H_	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	2;"	d
_VNMATH_POSITION_H_	vnproglib-1.1.4.0/cpp/include/vn/position.h	2;"	d
_VNPROTOCOL_UART_PACKETFINDER_H_	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	2;"	d
_VNPROTOCOL_UART_PACKET_H_	vnproglib-1.1.4.0/cpp/include/vn/packet.h	2;"	d
_VNPROTOCOL_UART_TYPES_H_	vnproglib-1.1.4.0/cpp/include/vn/types.h	2;"	d
_VNPROTOCOL_UART_UTIL_H_	vnproglib-1.1.4.0/cpp/include/vn/util.h	2;"	d
_VNSENSORS_COMPOSITEDATA_H_	vnproglib-1.1.4.0/cpp/include/vn/compositedata.h	2;"	d
_VNSENSORS_EZASYNCDATA_H_	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	2;"	d
_VNSENSORS_MOCK_H_	vnproglib-1.1.4.0/cpp/include/vn/mock.h	2;"	d
_VNSENSORS_REGISTERS_H_	vnproglib-1.1.4.0/cpp/include/vn/registers.h	2;"	d
_VNSENSORS_SEARCHER_H_	vnproglib-1.1.4.0/cpp/include/vn/searcher.h	2;"	d
_VNSENSORS_SENSORS_H_	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	2;"	d
_VNUTIL_NOCOPY_H_	vnproglib-1.1.4.0/cpp/include/vn/nocopy.h	4;"	d
_VNXPLAT_CRITICALSECTION_H_	vnproglib-1.1.4.0/cpp/include/vn/criticalsection.h	7;"	d
_VNXPLAT_EVENT_H_	vnproglib-1.1.4.0/cpp/include/vn/event.h	2;"	d
_VNXPLAT_SIGNAL_H_	vnproglib-1.1.4.0/cpp/include/vn/signal.h	2;"	d
_VNXPLAT_THREAD_H_	vnproglib-1.1.4.0/cpp/include/vn/thread.h	7;"	d
_VNXPLAT_TIME_H_	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	2;"	d
_VN_EXCEPTIONS_H_	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	7;"	d
_VN_INT_H_	vnproglib-1.1.4.0/cpp/include/vn/int.h	9;"	d
_VN_MATH_CONSTS_H_	vnproglib-1.1.4.0/cpp/include/vn/consts.h	7;"	d
_VN_MATH_CONVERSIONS_H_	vnproglib-1.1.4.0/cpp/include/vn/conversions.h	2;"	d
_VN_MATH_MAT_H_	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	7;"	d
_VN_MATH_VECTOR_H_	vnproglib-1.1.4.0/cpp/include/vn/vector.h	7;"	d
_VN_UTILITIES_H_	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	4;"	d
_VN_UTIL_BOOSTPYTHON_H	vnproglib-1.1.4.0/cpp/include/vn/boostpython.h	2;"	d
_VN_UTIL_COMPILER_H	vnproglib-1.1.4.0/cpp/include/vn/compiler.h	2;"	d
_VN_UTIL_EXPORT_H	vnproglib-1.1.4.0/cpp/include/vn/export.h	2;"	d
_VN_XPLAT_PORT_H_	vnproglib-1.1.4.0/cpp/include/vn/port.h	2;"	d
_VN_XPLAT_SERIALPORT_H_	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	2;"	d
_asciiOnDeck	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	AsciiTracker _asciiOnDeck;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_asyncPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	AsyncPacketReceivedHandler _asyncPacketReceivedHandler;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_asyncPacketReceivedHandlerPython	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	PyObject* _asyncPacketReceivedHandlerPython;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_asyncPacketReceivedUserData	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void* _asyncPacketReceivedUserData;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_backReference	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	PacketFinder* _backReference;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_binaryOnDeck	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	list<BinaryTracker> _binaryOnDeck;	\/\/ Collection of possible binary packets we are checking.$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_buffer	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	uint8_t* _buffer;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_bufferAppendLocation	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	size_t _bufferAppendLocation;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_bufferSize	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	const size_t _bufferSize;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_copyCS	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^	xplat::CriticalSection _mainCS, _copyCS;$/;"	m	class:vn::sensors::EzAsyncData
_counterStart	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^	__int64 _counterStart;$/;"	m	struct:vn::xplat::Stopwatch::Impl	file:
_curExtractLoc	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^	size_t _curExtractLoc;$/;"	m	struct:vn::protocol::uart::Packet
_data	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^	uint8_t _data[sizeof(mat3f)];$/;"	m	class:vn::math::AttitudeF
_data	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^	char *_data;$/;"	m	struct:vn::protocol::uart::Packet
_data	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^	vec3d _data;$/;"	m	class:vn::math::PositionD
_dataReceivedHandler	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	DataReceivedHandler _dataReceivedHandler;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
_dataReceivedHandler	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	DataReceivedHandler _dataReceivedHandler;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
_dataReceivedUserData	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	void* _dataReceivedUserData;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
_dataReceivedUserData	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void* _dataReceivedUserData;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
_dataRunningIndex	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	size_t _dataRunningIndex;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_dataWrittenHandler	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	DataWrittenHandler _dataWrittenHandler;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
_dataWrittenUserData	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^	void* _dataWrittenUserData;$/;"	m	struct:vn::util::MemoryPort::Impl	file:
_errorMessage	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	char *_errorMessage;$/;"	m	struct:vn::sensors::sensor_error
_errorPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	ErrorPacketReceivedHandler _errorPacketReceivedHandler;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_errorPacketReceivedUserData	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void* _errorPacketReceivedUserData;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_i	vnproglib-1.1.4.0/cpp/include/vn/compositedata.h	/^	Impl* _i;$/;"	m	class:vn::sensors::CompositeData
_isPacketDataMine	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^	bool _isPacketDataMine;$/;"	m	struct:vn::protocol::uart::Packet
_length	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^	size_t _length;$/;"	m	struct:vn::protocol::uart::Packet
_mainCS	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^	xplat::CriticalSection _mainCS, _copyCS;$/;"	m	class:vn::sensors::EzAsyncData
_newDataEvent	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^	xplat::Event _newDataEvent;$/;"	m	class:vn::sensors::EzAsyncData
_newResponsesEvent	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	xplat::Event _newResponsesEvent;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_nextData	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^	CompositeData _persistentData, _nextData;$/;"	m	class:vn::sensors::EzAsyncData
_packetFinder	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	PacketFinder _packetFinder;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_pcFrequency	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^	double _pcFrequency;$/;"	m	struct:vn::xplat::Stopwatch::Impl	file:
_persistentData	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^	CompositeData _persistentData, _nextData;$/;"	m	class:vn::sensors::EzAsyncData
_pi	vnproglib-1.1.4.0/cpp/include/vn/criticalsection.h	/^	Impl *_pi;$/;"	m	class:vn::xplat::CriticalSection
_pi	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^	Impl *_pi;$/;"	m	class:vn::xplat::Event
_pi	vnproglib-1.1.4.0/cpp/include/vn/memoryport.h	/^	Impl *_pi;$/;"	m	class:vn::util::MemoryPort
_pi	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	/^	Impl *_pi;$/;"	m	class:vn::protocol::uart::PacketFinder
_pi	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	Impl *_pi;$/;"	m	class:vn::sensors::VnSensor
_pi	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^	Impl *_pi;$/;"	m	class:vn::xplat::SerialPort
_pi	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^	Impl *_pi;$/;"	m	class:vn::xplat::Stopwatch
_pimpl	vnproglib-1.1.4.0/cpp/include/vn/thread.h	/^	Impl *_pimpl;$/;"	m	class:vn::xplat::Thread
_possiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	ValidPacketFoundHandler _possiblePacketFoundHandler;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_possiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	PossiblePacketFoundHandler _possiblePacketFoundHandler;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_possiblePacketFoundUserData	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	void* _possiblePacketFoundUserData;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_possiblePacketFoundUserData	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void* _possiblePacketFoundUserData;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_pythonPacketFoundHandler	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	PyObject* _pythonPacketFoundHandler;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_rawDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	RawDataReceivedHandler _rawDataReceivedHandler;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_rawDataReceivedHandlerPython	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	PyObject* _rawDataReceivedHandlerPython;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_rawDataReceivedUserData	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void* _rawDataReceivedUserData;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_receivedResponses	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	queue<Packet> _receivedResponses;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_responseTimeoutMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	uint16_t _responseTimeoutMs;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_retransmitDelayMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	uint16_t _retransmitDelayMs;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_runningDataIndex	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	size_t _runningDataIndex;			\/\/ Used for correlating raw data with where the packet was found for the end user.$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl	file:
_sec	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^	int64_t _sec;		\/\/ Seconds.$/;"	m	struct:vn::xplat::TimeStamp
_sendErrorDetectionMode	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	ErrorDetectionMode _sendErrorDetectionMode;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_sensor	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^	VnSensor* _sensor;$/;"	m	class:vn::sensors::EzAsyncData
_transactionCS	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	CriticalSection _transactionCS;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
_underlyingType	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^	AttitudeType _underlyingType;$/;"	m	class:vn::math::AttitudeF
_underlyingType	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^	PositionType _underlyingType;$/;"	m	class:vn::math::PositionD
_usec	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^	uint64_t _usec;		\/\/ Microseconds.$/;"	m	struct:vn::xplat::TimeStamp
_waitingForResponse	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	bool _waitingForResponse;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
a	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T a;$/;"	m	struct:vn::math::vec::__anon6::__anon8
accDisturbance	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t accDisturbance;$/;"	m	struct:vn::protocol::uart::VpeStatus
accRef	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accRef; \/\/\/< The accRef field.$/;"	m	struct:vn::sensors::MagneticAndGravityReferenceVectorsRegister
accSaturation	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	bool accSaturation;$/;"	m	struct:vn::protocol::uart::VpeStatus
accel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accel; \/\/\/< The accel field.$/;"	m	struct:vn::sensors::ImuMeasurementsRegister
accel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accel; \/\/\/< The accel field.$/;"	m	struct:vn::sensors::InsStateEcefRegister
accel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accel; \/\/\/< The accel field.$/;"	m	struct:vn::sensors::InsStateLlaRegister
accel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accel; \/\/\/< The accel field.$/;"	m	struct:vn::sensors::MagneticAccelerationAndAngularRatesRegister
accel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accel; \/\/\/< The accel field.$/;"	m	struct:vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister
accel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accel; \/\/\/< The accel field.$/;"	m	struct:vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister
accelBias	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accelBias; \/\/\/< The accelBias field.$/;"	m	struct:vn::sensors::StartupFilterBiasEstimateRegister
accelCompensation	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::CompensationMode accelCompensation; \/\/\/< The accelCompensation field.$/;"	m	struct:vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister
accelFilterMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::FilterMode accelFilterMode; \/\/\/< The accelFilterMode field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
accelOffset	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accelOffset; \/\/\/< The accelOffset field.$/;"	m	struct:vn::sensors::VelocityCompensationStatusRegister
accelWindowSize	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t accelWindowSize; \/\/\/< The accelWindowSize field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
acceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
acceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::acceleration()$/;"	f	class:vn::sensors::CompositeData
accelerationDisturbanceGain	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float accelerationDisturbanceGain; \/\/\/< The accelerationDisturbanceGain field.$/;"	m	struct:vn::sensors::FilterActiveTuningParametersRegister
accelerationDisturbanceMemory	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float accelerationDisturbanceMemory; \/\/\/< The accelerationDisturbanceMemory field.$/;"	m	struct:vn::sensors::FilterActiveTuningParametersRegister
accelerationDisturbancePresent	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::accelerationDisturbancePresent(bool disturbancePresent, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
accelerationEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
accelerationEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::accelerationEcef()$/;"	f	class:vn::sensors::CompositeData
accelerationLinearBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
accelerationLinearBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::accelerationLinearBody()$/;"	f	class:vn::sensors::CompositeData
accelerationLinearEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
accelerationLinearEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::accelerationLinearEcef()$/;"	f	class:vn::sensors::CompositeData
accelerationLinearNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
accelerationLinearNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::accelerationLinearNed()$/;"	f	class:vn::sensors::CompositeData
accelerationNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
accelerationNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::accelerationNed()$/;"	f	class:vn::sensors::CompositeData
accelerationUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		acceleration, accelerationLinearBody, accelerationUncompensated, accelerationLinearNed, accelerationLinearEcef, accelerationNed, accelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
accelerationUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::accelerationUncompensated()$/;"	f	class:vn::sensors::CompositeData
accelerationVariance	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f accelerationVariance; \/\/\/< The accelerationVariance field.$/;"	m	struct:vn::sensors::FilterMeasurementsVarianceParametersRegister
adaptiveFiltering	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f adaptiveFiltering; \/\/\/< The adaptiveFiltering field.$/;"	m	struct:vn::sensors::VpeAccelerometerBasicTuningRegister
adaptiveFiltering	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f adaptiveFiltering; \/\/\/< The adaptiveFiltering field.$/;"	m	struct:vn::sensors::VpeMagnetometerBasicTuningRegister
adaptiveTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f adaptiveTuning; \/\/\/< The adaptiveTuning field.$/;"	m	struct:vn::sensors::VpeAccelerometerBasicTuningRegister
adaptiveTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f adaptiveTuning; \/\/\/< The adaptiveTuning field.$/;"	m	struct:vn::sensors::VpeGyroBasicTuningRegister
adaptiveTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f adaptiveTuning; \/\/\/< The adaptiveTuning field.$/;"	m	struct:vn::sensors::VpeMagnetometerBasicTuningRegister
add	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat add(const mat& toAdd) const$/;"	f	struct:vn::math::mat
add	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec add(const vec& toAdd) const$/;"	f	struct:vn::math::vec
ahrsAiding	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool ahrsAiding; \/\/\/< The ahrsAiding field.$/;"	m	struct:vn::sensors::InsBasicConfigurationRegisterVn200
ahrsAiding	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool ahrsAiding; \/\/\/< The ahrsAiding field.$/;"	m	struct:vn::sensors::InsBasicConfigurationRegisterVn300
angularRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f angularRate; \/\/\/< The angularRate field.$/;"	m	struct:vn::sensors::InsStateEcefRegister
angularRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f angularRate; \/\/\/< The angularRate field.$/;"	m	struct:vn::sensors::InsStateLlaRegister
angularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		angularRate, angularRateUncompensated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
angularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::angularRate()$/;"	f	class:vn::sensors::CompositeData
angularRateUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		angularRate, angularRateUncompensated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
angularRateUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::angularRateUncompensated()$/;"	f	class:vn::sensors::CompositeData
angularRateVariance	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f angularRateVariance; \/\/\/< The angularRateVariance field.$/;"	m	struct:vn::sensors::FilterMeasurementsVarianceParametersRegister
angularWalkVariance	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float angularWalkVariance; \/\/\/< The angularWalkVariance field.$/;"	m	struct:vn::sensors::FilterMeasurementsVarianceParametersRegister
angularWalkVariance	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f angularWalkVariance; \/\/\/< The angularWalkVariance field.$/;"	m	struct:vn::sensors::VpeGyroBasicTuningRegister
angular_vel_covariance	src/main.cpp	/^boost::array<double, 9ul> angular_vel_covariance = { };$/;"	v
anyAcceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::anyAcceleration()$/;"	f	class:vn::sensors::CompositeData
anyAngularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::anyAngularRate()$/;"	f	class:vn::sensors::CompositeData
anyAttitude	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^AttitudeF CompositeData::anyAttitude()$/;"	f	class:vn::sensors::CompositeData
anyMagnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::anyMagnetic()$/;"	f	class:vn::sensors::CompositeData
anyPosition	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^PositionD CompositeData::anyPosition()$/;"	f	class:vn::sensors::CompositeData
anyPositionUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::anyPositionUncertainty()$/;"	f	class:vn::sensors::CompositeData
anyPressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::anyPressure()$/;"	f	class:vn::sensors::CompositeData
anyTemperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::anyTemperature()$/;"	f	class:vn::sensors::CompositeData
anyVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::anyVelocity()$/;"	f	class:vn::sensors::CompositeData
anyVelocityUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::anyVelocityUncertainty()$/;"	f	class:vn::sensors::CompositeData
asciiEndChar1Found	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		bool asciiEndChar1Found;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker	file:
asyncMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::AsyncMode asyncMode;			\/\/\/< The asyncMode field.$/;"	m	struct:vn::sensors::BinaryOutputRegister
asyncPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^void EzAsyncData::asyncPacketReceivedHandler(void* userData, protocol::uart::Packet& p, size_t index)$/;"	f	class:vn::sensors::EzAsyncData
attUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float attUncertainty; \/\/\/< The attUncertainty field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
attUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float attUncertainty; \/\/\/< The attUncertainty field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
attitudeField	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::AttitudeGroup attitudeField;	\/\/\/< Group 5 (Attitude)$/;"	m	struct:vn::sensors::BinaryOutputRegister
attitudeQuality	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t attitudeQuality;$/;"	m	struct:vn::protocol::uart::VpeStatus
attitudeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		deltaTheta, deltaVelocity, positionUncertaintyGpsNed, positionUncertaintyGpsEcef, attitudeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
attitudeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::attitudeUncertainty()$/;"	f	class:vn::sensors::CompositeData
b	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f b; \/\/\/< The b field.$/;"	m	struct:vn::sensors::AccelerationCompensationRegister
b	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f b; \/\/\/< The b field.$/;"	m	struct:vn::sensors::CalculatedMagnetometerCalibrationRegister
b	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f b; \/\/\/< The b field.$/;"	m	struct:vn::sensors::GyroCompensationRegister
b	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f b; \/\/\/< The b field.$/;"	m	struct:vn::sensors::MagnetometerCompensationRegister
b	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T b;$/;"	m	struct:vn::math::vec::__anon3::__anon5
b	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T b;$/;"	m	struct:vn::math::vec::__anon6::__anon8
baseTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f baseTuning; \/\/\/< The baseTuning field.$/;"	m	struct:vn::sensors::VpeAccelerometerBasicTuningRegister
baseTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f baseTuning; \/\/\/< The baseTuning field.$/;"	m	struct:vn::sensors::VpeGyroBasicTuningRegister
baseTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f baseTuning; \/\/\/< The baseTuning field.$/;"	m	struct:vn::sensors::VpeMagnetometerBasicTuningRegister
baudrate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::baudrate()$/;"	f	class:vn::sensors::VnSensor
baudrate	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^uint32_t SerialPort::baudrate()$/;"	f	class:vn::xplat::SerialPort
bodyAccel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f bodyAccel; \/\/\/< The bodyAccel field.$/;"	m	struct:vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
c	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::mat3f c; \/\/\/< The c field.$/;"	m	struct:vn::sensors::AccelerationCompensationRegister
c	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::mat3f c; \/\/\/< The c field.$/;"	m	struct:vn::sensors::CalculatedMagnetometerCalibrationRegister
c	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::mat3f c; \/\/\/< The c field.$/;"	m	struct:vn::sensors::GyroCompensationRegister
c	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::mat3f c; \/\/\/< The c field.$/;"	m	struct:vn::sensors::MagnetometerCompensationRegister
c	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		T c[2];$/;"	m	union:vn::math::vec::__anon1
c	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		T c[3];$/;"	m	union:vn::math::vec::__anon3
c	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		T c[4];$/;"	m	union:vn::math::vec::__anon6
c	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	T c[tdim];$/;"	m	struct:vn::math::vec
callback	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^void DllValidator::DllValidatorVisitor::callback(PeLib::PeFile32 &file)$/;"	f	class:DllValidator::DllValidatorVisitor
callback	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^void DllValidator::DllValidatorVisitor::callback(PeLib::PeFile64 &file)$/;"	f	class:DllValidator::DllValidatorVisitor
cditer	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^typedef vector<CompositeData*>::iterator cditer;$/;"	t	namespace:vn::sensors	file:
celsius2fahren	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double celsius2fahren(double tempInCelsius)$/;"	f	namespace:vn::math
celsius2fahren	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float celsius2fahren(float tempInCelsius)$/;"	f	namespace:vn::math
celsius2kelvin	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double celsius2kelvin(double tempInCelsius)$/;"	f	namespace:vn::math
celsius2kelvin	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float celsius2kelvin(float tempInCelsius)$/;"	f	namespace:vn::math
changeBaudRate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::changeBaudRate(uint32_t baudrate)$/;"	f	class:vn::sensors::VnSensor
changeBaudrate	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::changeBaudrate(uint32_t baudrate)$/;"	f	class:vn::xplat::SerialPort
checkDllValidity	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^bool checkDllValidity(const std::string& dllName, const std::string& workingDirectory, std::vector<std::string>& missingDlls)$/;"	f	namespace:vn
close	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::close()$/;"	f	class:vn::util::MemoryPort
close	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void close(bool checkAndToggleIsOpenFlag = true)$/;"	f	struct:vn::xplat::SerialPort::Impl
close	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::close()$/;"	f	class:vn::xplat::SerialPort
closeAfterUsbCableUnplugged	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void closeAfterUsbCableUnplugged()$/;"	f	struct:vn::xplat::SerialPort::Impl
commonField	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::CommonGroup commonField;		\/\/\/< Group 1 (Common)$/;"	m	struct:vn::sensors::BinaryOutputRegister
compute	vnproglib-1.1.4.0/cpp/src/error_detection.cpp	/^uint16_t Crc16::compute(char const data[], size_t length)$/;"	f	class:vn::data::integrity::Crc16
compute	vnproglib-1.1.4.0/cpp/src/error_detection.cpp	/^uint8_t Checksum8::compute(char const data[], size_t length)$/;"	f	class:vn::data::integrity::Checksum8
computeBinaryPacketLength	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::computeBinaryPacketLength(char const* startOfPossibleBinaryPacket)$/;"	f	class:vn::protocol::uart::Packet
computeNumOfBytesForBinaryGroupPayload	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::computeNumOfBytesForBinaryGroupPayload(BinaryGroup group, uint16_t groupField)$/;"	f	class:vn::protocol::uart::Packet
connect	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^EzAsyncData* EzAsyncData::connect(string portName, uint32_t baudrate)$/;"	f	class:vn::sensors::EzAsyncData
connect	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::connect(IPort* simplePort)$/;"	f	class:vn::sensors::VnSensor
connect	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::connect(const string &portName, uint32_t baudrate)$/;"	f	class:vn::sensors::VnSensor
convergeRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint8_t convergeRate; \/\/\/< The convergeRate field.$/;"	m	struct:vn::sensors::MagnetometerCalibrationControlRegister
copy	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	void copy(const mat<2, 2, S> rhs)$/;"	f	struct:vn::math::mat
copy	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	void copy(const mat<3, 3, S>& rhs)$/;"	f	struct:vn::math::mat
copy	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	void copy(const mat<4, 4, S>& rhs)$/;"	f	struct:vn::math::mat
countSetBits	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint8_t countSetBits(uint8_t d)$/;"	f	namespace:vn
courseOverGround	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::courseOverGround()$/;"	f	class:vn::sensors::CompositeData
course_over_ground	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float course_over_ground(float velNedX, float velNedY)$/;"	f	namespace:vn::math
course_over_ground	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float course_over_ground(vec3f velNed)$/;"	f	namespace:vn::math
cross	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec<3, T> cross(const vec<3, T>& rhs) const$/;"	f	struct:vn::math::vec
currentData	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^CompositeData EzAsyncData::currentData()$/;"	f	class:vn::sensors::EzAsyncData
currentlyBuildingAsciiPacket	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		bool currentlyBuildingAsciiPacket;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker	file:
data	vnproglib-1.1.4.0/cpp/include/vn/error_detection.h	/^namespace data {$/;"	n	namespace:vn
data	vnproglib-1.1.4.0/cpp/src/error_detection.cpp	/^namespace data {$/;"	n	namespace:vn	file:
dataReceived	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	void dataReceived(uint8_t data[], size_t length, TimeStamp timestamp)$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl
dataReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	static void dataReceivedHandler(void* userData)$/;"	f	struct:vn::sensors::VnSensor::Impl
datastr	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^string Packet::datastr()$/;"	f	class:vn::protocol::uart::Packet
day	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t day;	\/\/\/< \\brief Day field.$/;"	m	struct:vn::protocol::uart::TimeUtc
dcm	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^mat3f AttitudeF::dcm()$/;"	f	class:vn::math::AttitudeF
dcm2YprInDegs	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f dcm2YprInDegs(mat3f dcm)$/;"	f	namespace:vn::math
dcm2YprInRads	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f dcm2YprInRads(mat3f dcm)$/;"	f	namespace:vn::math
dcm2omegaPhiKappaInRads	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f dcm2omegaPhiKappaInRads(mat3f dcm)$/;"	f	namespace:vn::math
dcm2quat	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec4f dcm2quat(mat3f dcm)$/;"	f	namespace:vn::math
deg2rad	vnproglib-1.1.4.0/cpp/include/vn/conversions.h	/^vec<dim, float> deg2rad(vec<dim> anglesInDegs)$/;"	f	namespace:vn::math
deg2rad	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double deg2rad(double angleInDegs)$/;"	f	namespace:vn::math
deg2rad	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float deg2rad(float angleInDegs)$/;"	f	namespace:vn::math
deltaLimitPos	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float deltaLimitPos; \/\/\/< The deltaLimitPos field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
deltaLimitVel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float deltaLimitVel; \/\/\/< The deltaLimitVel field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
deltaTheta	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f deltaTheta; \/\/\/< The deltaTheta field.$/;"	m	struct:vn::sensors::DeltaThetaAndDeltaVelocityRegister
deltaTheta	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		deltaTheta, deltaVelocity, positionUncertaintyGpsNed, positionUncertaintyGpsEcef, attitudeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
deltaTheta	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::deltaTheta()$/;"	f	class:vn::sensors::CompositeData
deltaTime	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float deltaTime; \/\/\/< The deltaTime field.$/;"	m	struct:vn::sensors::DeltaThetaAndDeltaVelocityRegister
deltaTime	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	float temperature, pressure, deltaTime, positionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
deltaTime	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::deltaTime()$/;"	f	class:vn::sensors::CompositeData
deltaVelocity	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f deltaVelocity; \/\/\/< The deltaVelocity field.$/;"	m	struct:vn::sensors::DeltaThetaAndDeltaVelocityRegister
deltaVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		deltaTheta, deltaVelocity, positionUncertaintyGpsNed, positionUncertaintyGpsEcef, attitudeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
deltaVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::deltaVelocity()$/;"	f	class:vn::sensors::CompositeData
determineAsciiAsyncType	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^AsciiAsync Packet::determineAsciiAsyncType()$/;"	f	class:vn::protocol::uart::Packet
determineDeviceFamily	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VnSensor::Family VnSensor::determineDeviceFamily()$/;"	f	class:vn::sensors::VnSensor
determineDeviceFamily	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VnSensor::Family VnSensor::determineDeviceFamily(std::string modelNumber)$/;"	f	class:vn::sensors::VnSensor
determineIfPortIsOptimized	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^bool SerialPort::determineIfPortIsOptimized(string portName)$/;"	f	class:vn::xplat::SerialPort
dim	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	size_t dim() const { return 2; }$/;"	f	struct:vn::math::vec
dim	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	size_t dim() const { return 3; }$/;"	f	struct:vn::math::vec
dim	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	size_t dim() const { return 4; }$/;"	f	struct:vn::math::vec
dim	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	size_t dim() const { return tdim; }$/;"	f	struct:vn::math::vec
dimCol	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimCol() const { return 2; }$/;"	f	struct:vn::math::mat
dimCol	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimCol() const { return 3; }$/;"	f	struct:vn::math::mat
dimCol	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimCol() const { return 4; }$/;"	f	struct:vn::math::mat
dimCol	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimCol() const { return n; }$/;"	f	struct:vn::math::mat
dimCols	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimCols() const { return 3; }$/;"	f	struct:vn::math::mat
dimRow	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimRow() const { return 2; }$/;"	f	struct:vn::math::mat
dimRow	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimRow() const { return 3; }$/;"	f	struct:vn::math::mat
dimRow	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimRow() const { return 4; }$/;"	f	struct:vn::math::mat
dimRow	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	size_t dimRow() const { return m; }$/;"	f	struct:vn::math::mat
dimension_error	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	dimension_error() : runtime_error("dimension") { }$/;"	f	class:vn::dimension_error
dimension_error	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class dimension_error : public std::runtime_error$/;"	c	namespace:vn
directionConsineMatrix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	mat3f directionConsineMatrix;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
directionCosineMatrix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^mat3f CompositeData::directionCosineMatrix()$/;"	f	class:vn::sensors::CompositeData
disconnect	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^void EzAsyncData::disconnect()$/;"	f	class:vn::sensors::EzAsyncData
disconnect	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::disconnect()$/;"	f	class:vn::sensors::VnSensor
dispatchPacket	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	void dispatchPacket(Packet &packet, size_t runningDataIndexAtPacketStart, TimeStamp timestamp)$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl
disturbanceWindow	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float disturbanceWindow; \/\/\/< The disturbanceWindow field.$/;"	m	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
disturbanceWindow	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float disturbanceWindow; \/\/\/< The disturbanceWindow field.$/;"	m	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
div	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat div(const double& scalar) const$/;"	f	struct:vn::math::mat
div	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec div(const double& scalar) const$/;"	f	struct:vn::math::vec
dop	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  GnssDop dop;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
dop	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^GnssDop CompositeData::dop()$/;"	f	class:vn::sensors::CompositeData
dot	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	T dot(const vec& rhs) const$/;"	f	struct:vn::math::vec
dumpImportDirectory32	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^void dumpImportDirectory32(PeLib::PeFile32& pef, std::vector<std::string>& dllNamesOut)$/;"	f
dumpImportDirectory64	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^void dumpImportDirectory64(PeLib::PeFile64& pef, std::vector<std::string>& dllNamesOut)$/;"	f
e	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^		T e[2 * 2];$/;"	m	union:vn::math::mat::__anon10
e	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^		T e[3 * 3];$/;"	m	union:vn::math::mat::__anon12
e	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^		T e[4*4];$/;"	m	union:vn::math::mat::__anon14
e	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^		T e[m * n];$/;"	m	union:vn::math::mat::__anon9
e00	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e00;$/;"	m	struct:vn::math::mat::__anon10::__anon11
e00	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e00;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e00	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e00;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e01	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e01;$/;"	m	struct:vn::math::mat::__anon10::__anon11
e01	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e01;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e01	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e01;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e02	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e02;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e02	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e02;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e03	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e03;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e10	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e10;$/;"	m	struct:vn::math::mat::__anon10::__anon11
e10	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e10;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e10	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e10;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e11	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e11;$/;"	m	struct:vn::math::mat::__anon10::__anon11
e11	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e11;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e11	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e11;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e12	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e12;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e12	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e12;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e13	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e13;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e20	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e20;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e20	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e20;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e21	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e21;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e21	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e21;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e22	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e22;$/;"	m	struct:vn::math::mat::__anon12::__anon13
e22	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e22;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e23	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e23;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e30	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e30;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e31	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e31;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e32	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e32;$/;"	m	struct:vn::math::mat::__anon14::__anon15
e33	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^			T e33;$/;"	m	struct:vn::math::mat::__anon14::__anon15
eDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float eDop;	\/\/\/< \\brief gDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
elapsedMs	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^	float elapsedMs()$/;"	f	struct:vn::xplat::Stopwatch::Impl
elapsedMs	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^float Stopwatch::elapsedMs()$/;"	f	class:vn::xplat::Stopwatch
enable	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::VpeEnable enable; \/\/\/< The enable field.$/;"	m	struct:vn::sensors::VpeBasicControlRegister
ensureCanExtract	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::ensureCanExtract(size_t numOfBytes)$/;"	f	class:vn::protocol::uart::Packet
ensureClosed	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void ensureClosed()$/;"	f	struct:vn::xplat::SerialPort::Impl
ensureOpened	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void ensureOpened()$/;"	f	struct:vn::xplat::SerialPort::Impl
enter	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^void CriticalSection::enter()$/;"	f	class:vn::xplat::CriticalSection
error	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	protocol::uart::SensorError error;$/;"	m	struct:vn::sensors::sensor_error
errorMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ErrorMode errorMode; \/\/\/< The errorMode field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
estBaseline	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool estBaseline; \/\/\/< The estBaseline field.$/;"	m	struct:vn::sensors::InsBasicConfigurationRegisterVn300
estBaselineUsed	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool estBaselineUsed; \/\/\/< The estBaselineUsed field.$/;"	m	struct:vn::sensors::GpsCompassEstimatedBaselineRegister
eventAsyncPacketReceived	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^	AsyncPacketReceivedEvent eventAsyncPacketReceived;$/;"	m	class:vn::sensors::VnSensor
extAccMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ExternalSensorMode extAccMode; \/\/\/< The extAccMode field.$/;"	m	struct:vn::sensors::FilterBasicControlRegister
extGyroMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ExternalSensorMode extGyroMode; \/\/\/< The extGyroMode field.$/;"	m	struct:vn::sensors::FilterBasicControlRegister
extMagMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ExternalSensorMode extMagMode; \/\/\/< The extMagMode field.$/;"	m	struct:vn::sensors::FilterBasicControlRegister
extractFloat	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^float Packet::extractFloat()$/;"	f	class:vn::protocol::uart::Packet
extractInt8	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^int8_t Packet::extractInt8()$/;"	f	class:vn::protocol::uart::Packet
extractMat3f	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^mat3f Packet::extractMat3f()$/;"	f	class:vn::protocol::uart::Packet
extractUint16	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^uint16_t Packet::extractUint16()$/;"	f	class:vn::protocol::uart::Packet
extractUint32	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^uint32_t Packet::extractUint32()$/;"	f	class:vn::protocol::uart::Packet
extractUint64	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^uint64_t Packet::extractUint64()$/;"	f	class:vn::protocol::uart::Packet
extractUint8	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^uint8_t Packet::extractUint8()$/;"	f	class:vn::protocol::uart::Packet
extractVec3d	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^vec3d Packet::extractVec3d()$/;"	f	class:vn::protocol::uart::Packet
extractVec3f	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^vec3f Packet::extractVec3f()$/;"	f	class:vn::protocol::uart::Packet
extractVec4f	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^vec4f Packet::extractVec4f()$/;"	f	class:vn::protocol::uart::Packet
fahren2celsius	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double fahren2celsius(double tempInFahren)$/;"	f	namespace:vn::math
fahren2celsius	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float fahren2celsius(float tempInFahren)$/;"	f	namespace:vn::math
fahren2kelvin	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double fahren2kelvin(double tempInFahren)$/;"	f	namespace:vn::math
fahren2kelvin	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float fahren2kelvin(float tempInFahren)$/;"	f	namespace:vn::math
filterMinRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float filterMinRate; \/\/\/< The filterMinRate field.$/;"	m	struct:vn::sensors::ImuRateConfigurationRegister
filterTargetRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float filterTargetRate; \/\/\/< The filterTargetRate field.$/;"	m	struct:vn::sensors::ImuRateConfigurationRegister
filteringMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::VpeMode filteringMode; \/\/\/< The filteringMode field.$/;"	m	struct:vn::sensors::VpeBasicControlRegister
finalizeCommand	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::finalizeCommand(ErrorDetectionMode errorDetectionMode, char *packet, size_t length)$/;"	f	class:vn::protocol::uart::Packet
finalizeCommandToSend	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	size_t finalizeCommandToSend(char *toSend, size_t length)$/;"	f	struct:vn::sensors::VnSensor::Impl
finishedSearchingPort	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	Event finishedSearchingPort;$/;"	m	struct:vn::sensors::SearchHelper	file:
fix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	GpsFix fix;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
fix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^GpsFix CompositeData::fix()$/;"	f	class:vn::sensors::CompositeData
foundBaudrate	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	int32_t foundBaudrate;$/;"	m	struct:vn::sensors::SearchHelper	file:
frame_id	src/main.cpp	/^std::string frame_id;$/;"	v
fromDcm	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^AttitudeF AttitudeF::fromDcm(mat3f dcm)$/;"	f	class:vn::math::AttitudeF
fromEcef	vnproglib-1.1.4.0/cpp/src/position.cpp	/^PositionD PositionD::fromEcef(vec3d ecef)$/;"	f	class:vn::math::PositionD
fromLla	vnproglib-1.1.4.0/cpp/src/position.cpp	/^PositionD PositionD::fromLla(vec3d lla)$/;"	f	class:vn::math::PositionD
fromQuat	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^AttitudeF AttitudeF::fromQuat(vec4f quat)$/;"	f	class:vn::math::AttitudeF
fromYprInDegs	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^AttitudeF AttitudeF::fromYprInDegs(vec3f yprInDegs)$/;"	f	class:vn::math::AttitudeF
fromYprInRads	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^AttitudeF AttitudeF::fromYprInRads(vec3f yprInRads)$/;"	f	class:vn::math::AttitudeF
g	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T g;$/;"	m	struct:vn::math::vec::__anon3::__anon5
g	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T g;$/;"	m	struct:vn::math::vec::__anon6::__anon8
gDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float gDop;	\/\/\/< \\brief gDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
genKnownAccelerationDisturbance	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genKnownAccelerationDisturbance(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, bool isAccelerationDisturbancePresent)$/;"	f	class:vn::protocol::uart::Packet
genKnownMagneticDisturbance	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genKnownMagneticDisturbance(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, bool isMagneticDisturbancePresent)$/;"	f	class:vn::protocol::uart::Packet
genReadAccelerationCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAccelerationCompensation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadAccelerationMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAccelerationMeasurements(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadAngularRateMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAngularRateMeasurements(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAsyncDataOutputFrequency(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAsyncDataOutputFrequency(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t port)$/;"	f	class:vn::protocol::uart::Packet
genReadAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAsyncDataOutputType(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAsyncDataOutputType(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t port)$/;"	f	class:vn::protocol::uart::Packet
genReadAttitudeQuaternion	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadAttitudeQuaternion(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadBinaryOutput1	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadBinaryOutput1(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadBinaryOutput2	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadBinaryOutput2(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadBinaryOutput3	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadBinaryOutput3(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadCalculatedMagnetometerCalibration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadCalculatedMagnetometerCalibration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadCommunicationProtocolControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadCommunicationProtocolControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadDeltaThetaAndDeltaVelocity	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadDeltaThetaAndDeltaVelocity(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadDeltaThetaAndDeltaVelocityConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadDeltaThetaAndDeltaVelocityConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadFilterActiveTuningParameters	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadFilterActiveTuningParameters(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadFilterBasicControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadFilterBasicControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadFilterMeasurementsVarianceParameters	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadFilterMeasurementsVarianceParameters(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadFilterStartupGyroBias	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadFilterStartupGyroBias(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadFirmwareVersion	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadFirmwareVersion(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGpsAntennaOffset	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGpsAntennaOffset(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGpsCompassBaseline	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGpsCompassBaseline(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGpsCompassEstimatedBaseline	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGpsCompassEstimatedBaseline(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGpsConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGpsConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGpsSolutionEcef	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGpsSolutionEcef(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGpsSolutionLla	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGpsSolutionLla(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadGyroCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadGyroCompensation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadHardwareRevision	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadHardwareRevision(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadImuFilteringConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadImuFilteringConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadImuMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadImuMeasurements(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadImuRateConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadImuRateConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadIndoorHeadingModeControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadIndoorHeadingModeControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadInsAdvancedConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadInsAdvancedConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadInsBasicConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadInsBasicConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadInsSolutionEcef	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadInsSolutionEcef(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadInsSolutionLla	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadInsSolutionLla(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadInsStateEcef	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadInsStateEcef(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadInsStateLla	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadInsStateLla(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadMagneticAccelerationAndAngularRates(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadMagneticAndGravityReferenceVectors	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadMagneticAndGravityReferenceVectors(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadMagneticMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadMagneticMeasurements(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadMagnetometerCalibrationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadMagnetometerCalibrationControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadMagnetometerCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadMagnetometerCompensation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadModelNumber	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadModelNumber(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadQuaternionMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadQuaternionMagneticAccelerationAndAngularRates(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadReferenceFrameRotation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadReferenceFrameRotation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadReferenceVectorConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadReferenceVectorConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadSerialBaudRate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadSerialBaudRate(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadSerialBaudRate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadSerialBaudRate(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t port)$/;"	f	class:vn::protocol::uart::Packet
genReadSerialNumber	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadSerialNumber(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadStartupFilterBiasEstimate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadStartupFilterBiasEstimate(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadSynchronizationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadSynchronizationControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadSynchronizationStatus	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadSynchronizationStatus(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadUserTag	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadUserTag(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVelocityCompensationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVelocityCompensationControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVelocityCompensationMeasurement	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVelocityCompensationMeasurement(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVelocityCompensationStatus	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVelocityCompensationStatus(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVpeAccelerometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVpeAccelerometerAdvancedTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVpeAccelerometerBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVpeAccelerometerBasicTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVpeBasicControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVpeBasicControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVpeGyroBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVpeGyroBasicTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVpeMagnetometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVpeMagnetometerAdvancedTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadVpeMagnetometerBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadVpeMagnetometerBasicTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadYawPitchRoll	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadYawPitchRoll(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadYawPitchRollMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadYawPitchRollMagneticAccelerationAndAngularRates(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadYawPitchRollTrueBodyAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadYawPitchRollTrueBodyAccelerationAndAngularRates(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReadYawPitchRollTrueInertialAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReadYawPitchRollTrueInertialAccelerationAndAngularRates(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genReset	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genReset(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genRestoreFactorySettings	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genRestoreFactorySettings(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genSetGyroBias	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genSetGyroBias(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genTare	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genTare(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genWriteAccelerationCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteAccelerationCompensation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, mat3f c, vec3f b)$/;"	f	class:vn::protocol::uart::Packet
genWriteAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteAsyncDataOutputFrequency(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t adof)$/;"	f	class:vn::protocol::uart::Packet
genWriteAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteAsyncDataOutputFrequency(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t adof, uint8_t port)$/;"	f	class:vn::protocol::uart::Packet
genWriteAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteAsyncDataOutputType(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t ador)$/;"	f	class:vn::protocol::uart::Packet
genWriteAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteAsyncDataOutputType(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t ador, uint8_t port)$/;"	f	class:vn::protocol::uart::Packet
genWriteBinaryOutput1	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteBinaryOutput1(ErrorDetectionMode errorDetectionMode, char* buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField)$/;"	f	class:vn::protocol::uart::Packet
genWriteBinaryOutput2	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteBinaryOutput2(ErrorDetectionMode errorDetectionMode, char* buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField)$/;"	f	class:vn::protocol::uart::Packet
genWriteBinaryOutput3	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteBinaryOutput3(ErrorDetectionMode errorDetectionMode, char* buffer, size_t size, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField)$/;"	f	class:vn::protocol::uart::Packet
genWriteCommunicationProtocolControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteCommunicationProtocolControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t serialCount, uint8_t serialStatus, uint8_t spiCount, uint8_t spiStatus, uint8_t serialChecksum, uint8_t spiChecksum, uint8_t errorMode)$/;"	f	class:vn::protocol::uart::Packet
genWriteDeltaThetaAndDeltaVelocityConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteDeltaThetaAndDeltaVelocityConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t integrationFrame, uint8_t gyroCompensation, uint8_t accelCompensation)$/;"	f	class:vn::protocol::uart::Packet
genWriteFilterActiveTuningParameters	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteFilterActiveTuningParameters(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, float magneticDisturbanceGain, float accelerationDisturbanceGain, float magneticDisturbanceMemory, float accelerationDisturbanceMemory)$/;"	f	class:vn::protocol::uart::Packet
genWriteFilterBasicControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteFilterBasicControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t magMode, uint8_t extMagMode, uint8_t extAccMode, uint8_t extGyroMode, vec3f gyroLimit)$/;"	f	class:vn::protocol::uart::Packet
genWriteFilterMeasurementsVarianceParameters	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteFilterMeasurementsVarianceParameters(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, float angularWalkVariance, vec3f angularRateVariance, vec3f magneticVariance, vec3f accelerationVariance)$/;"	f	class:vn::protocol::uart::Packet
genWriteFilterStartupGyroBias	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteFilterStartupGyroBias(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f bias)$/;"	f	class:vn::protocol::uart::Packet
genWriteGpsAntennaOffset	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteGpsAntennaOffset(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f position)$/;"	f	class:vn::protocol::uart::Packet
genWriteGpsCompassBaseline	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteGpsCompassBaseline(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f position, vec3f uncertainty)$/;"	f	class:vn::protocol::uart::Packet
genWriteGpsConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteGpsConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t mode, uint8_t ppsSource)$/;"	f	class:vn::protocol::uart::Packet
genWriteGyroCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteGyroCompensation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, mat3f c, vec3f b)$/;"	f	class:vn::protocol::uart::Packet
genWriteImuFilteringConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteImuFilteringConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint16_t magWindowSize, uint16_t accelWindowSize, uint16_t gyroWindowSize, uint16_t tempWindowSize, uint16_t presWindowSize, uint8_t magFilterMode, uint8_t accelFilterMode, uint8_t gyroFilterMode, uint8_t tempFilterMode, uint8_t presFilterMode)$/;"	f	class:vn::protocol::uart::Packet
genWriteImuRateConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteImuRateConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint16_t imuRate, uint16_t navDivisor, float filterTargetRate, float filterMinRate)$/;"	f	class:vn::protocol::uart::Packet
genWriteIndoorHeadingModeControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteIndoorHeadingModeControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, float maxRateError)$/;"	f	class:vn::protocol::uart::Packet
genWriteInsAdvancedConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteInsAdvancedConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t useMag, uint8_t usePres, uint8_t posAtt, uint8_t velAtt, uint8_t velBias, uint8_t useFoam, uint8_t gpsCovType, uint8_t velCount, float velInit, float moveOrigin, float gpsTimeout, float deltaLimitPos, float deltaLimitVel, float minPosUncertainty, float minVelUncertainty)$/;"	f	class:vn::protocol::uart::Packet
genWriteInsBasicConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteInsBasicConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t scenario, uint8_t ahrsAiding, uint8_t estBaseline)$/;"	f	class:vn::protocol::uart::Packet
genWriteMagneticAndGravityReferenceVectors	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteMagneticAndGravityReferenceVectors(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f magRef, vec3f accRef)$/;"	f	class:vn::protocol::uart::Packet
genWriteMagnetometerCalibrationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteMagnetometerCalibrationControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t hsiMode, uint8_t hsiOutput, uint8_t convergeRate)$/;"	f	class:vn::protocol::uart::Packet
genWriteMagnetometerCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteMagnetometerCompensation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, mat3f c, vec3f b)$/;"	f	class:vn::protocol::uart::Packet
genWriteReferenceFrameRotation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteReferenceFrameRotation(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, mat3f c)$/;"	f	class:vn::protocol::uart::Packet
genWriteReferenceVectorConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteReferenceVectorConfiguration(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t useMagModel, uint8_t useGravityModel, uint32_t recalcThreshold, float year, vec3d position)$/;"	f	class:vn::protocol::uart::Packet
genWriteSerialBaudRate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteSerialBaudRate(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t baudrate)$/;"	f	class:vn::protocol::uart::Packet
genWriteSerialBaudRate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteSerialBaudRate(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t baudrate, uint8_t port)$/;"	f	class:vn::protocol::uart::Packet
genWriteSettings	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteSettings(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size)$/;"	f	class:vn::protocol::uart::Packet
genWriteStartupFilterBiasEstimate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteStartupFilterBiasEstimate(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f gyroBias, vec3f accelBias, float pressureBias)$/;"	f	class:vn::protocol::uart::Packet
genWriteSynchronizationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteSynchronizationControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t syncInMode, uint8_t syncInEdge, uint16_t syncInSkipFactor, uint8_t syncOutMode, uint8_t syncOutPolarity, uint16_t syncOutSkipFactor, uint32_t syncOutPulseWidth)$/;"	f	class:vn::protocol::uart::Packet
genWriteSynchronizationStatus	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteSynchronizationStatus(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint32_t syncInCount, uint32_t syncInTime, uint32_t syncOutCount)$/;"	f	class:vn::protocol::uart::Packet
genWriteUserTag	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteUserTag(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, string tag)$/;"	f	class:vn::protocol::uart::Packet
genWriteVelocityCompensationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVelocityCompensationControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t mode, float velocityTuning, float rateTuning)$/;"	f	class:vn::protocol::uart::Packet
genWriteVelocityCompensationMeasurement	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVelocityCompensationMeasurement(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f velocity)$/;"	f	class:vn::protocol::uart::Packet
genWriteVpeAccelerometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVpeAccelerometerAdvancedTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning)$/;"	f	class:vn::protocol::uart::Packet
genWriteVpeAccelerometerBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVpeAccelerometerBasicTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)$/;"	f	class:vn::protocol::uart::Packet
genWriteVpeBasicControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVpeBasicControl(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, uint8_t enable, uint8_t headingMode, uint8_t filteringMode, uint8_t tuningMode)$/;"	f	class:vn::protocol::uart::Packet
genWriteVpeGyroBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVpeGyroBasicTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f angularWalkVariance, vec3f baseTuning, vec3f adaptiveTuning)$/;"	f	class:vn::protocol::uart::Packet
genWriteVpeMagnetometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVpeMagnetometerAdvancedTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f minFiltering, vec3f maxFiltering, float maxAdaptRate, float disturbanceWindow, float maxTuning)$/;"	f	class:vn::protocol::uart::Packet
genWriteVpeMagnetometerBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t Packet::genWriteVpeMagnetometerBasicTuning(ErrorDetectionMode errorDetectionMode, char *buffer, size_t size, vec3f baseTuning, vec3f adaptiveTuning, vec3f adaptiveFiltering)$/;"	f	class:vn::protocol::uart::Packet
get	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^TimeStamp TimeStamp::get()$/;"	f	class:vn::xplat::TimeStamp
getDllNames	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^void DllValidator::getDllNames(std::vector<std::string>& dllNamesOut)$/;"	f	class:DllValidator
getMissingDllNames	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^void DllValidator::getMissingDllNames(std::vector<std::string>& missingDllNamesOut)$/;"	f	class:DllValidator
getNextData	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^CompositeData EzAsyncData::getNextData()$/;"	f	class:vn::sensors::EzAsyncData
getNextData	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^CompositeData EzAsyncData::getNextData(int timeoutMs)$/;"	f	class:vn::sensors::EzAsyncData
getNextData	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^char* getNextData(char* str, size_t& startIndex)$/;"	f	namespace:vn::protocol::uart
getPortNames	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^std::vector<std::string> SerialPort::getPortNames()$/;"	f	class:vn::xplat::SerialPort
getVersion	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^string ApiVersion::getVersion()$/;"	f	class:vn::ApiVersion
goRequest	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::goRequest()$/;"	f	class:vn::sensors::VnSensor
gpsCovType	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint8_t gpsCovType; \/\/\/< The gpsCovType field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
gpsField	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::GpsGroup gpsField;				\/\/\/< Group 4 (GPS)$/;"	m	struct:vn::sensors::BinaryOutputRegister
gpsFix	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::GpsFix gpsFix; \/\/\/< The gpsFix field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
gpsFix	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::GpsFix gpsFix; \/\/\/< The gpsFix field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
gpsTimeout	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float gpsTimeout; \/\/\/< The gpsTimeout field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
gpsTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint64_t timeStartup, timeGps, timeSyncIn, timeGpsPps, gpsTow;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
gpsTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint64_t CompositeData::gpsTow()$/;"	f	class:vn::sensors::CompositeData
groupField	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^uint16_t Packet::groupField(size_t index)$/;"	f	class:vn::protocol::uart::Packet
groups	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^uint8_t Packet::groups()$/;"	f	class:vn::protocol::uart::Packet
groupsPresent	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	uint8_t groupsPresent;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
groupsPresentFound	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	bool groupsPresentFound;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
gyro	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyro; \/\/\/< The gyro field.$/;"	m	struct:vn::sensors::ImuMeasurementsRegister
gyro	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyro; \/\/\/< The gyro field.$/;"	m	struct:vn::sensors::MagneticAccelerationAndAngularRatesRegister
gyro	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyro; \/\/\/< The gyro field.$/;"	m	struct:vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister
gyro	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyro; \/\/\/< The gyro field.$/;"	m	struct:vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister
gyro	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyro; \/\/\/< The gyro field.$/;"	m	struct:vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
gyro	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyro; \/\/\/< The gyro field.$/;"	m	struct:vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
gyroBias	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyroBias; \/\/\/< The gyroBias field.$/;"	m	struct:vn::sensors::StartupFilterBiasEstimateRegister
gyroCompensation	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::CompensationMode gyroCompensation; \/\/\/< The gyroCompensation field.$/;"	m	struct:vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister
gyroFilterMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::FilterMode gyroFilterMode; \/\/\/< The gyroFilterMode field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
gyroLimit	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f gyroLimit; \/\/\/< The gyroLimit field.$/;"	m	struct:vn::sensors::FilterBasicControlRegister
gyroSaturation	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	bool gyroSaturation;$/;"	m	struct:vn::protocol::uart::VpeStatus
gyroSaturationRecovery	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	bool gyroSaturationRecovery;$/;"	m	struct:vn::protocol::uart::VpeStatus
gyroWindowSize	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t gyroWindowSize; \/\/\/< The gyroWindowSize field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
hDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float hDop;	\/\/\/< \\brief hDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
hasAcceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAcceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAcceleration()$/;"	f	class:vn::sensors::CompositeData
hasAccelerationEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAccelerationEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAccelerationEcef()$/;"	f	class:vn::sensors::CompositeData
hasAccelerationLinearBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAccelerationLinearBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAccelerationLinearBody()$/;"	f	class:vn::sensors::CompositeData
hasAccelerationLinearEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAccelerationLinearEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAccelerationLinearEcef()$/;"	f	class:vn::sensors::CompositeData
hasAccelerationLinearNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAccelerationLinearNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAccelerationLinearNed()$/;"	f	class:vn::sensors::CompositeData
hasAccelerationNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAccelerationNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAccelerationNed()$/;"	f	class:vn::sensors::CompositeData
hasAccelerationUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAcceleration, hasAccelerationLinearBody, hasAccelerationUncompensated, hasAccelerationLinearNed, hasAccelerationLinearEcef, hasAccelerationNed, hasAccelerationEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAccelerationUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAccelerationUncompensated()$/;"	f	class:vn::sensors::CompositeData
hasAngularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAngularRate, hasAngularRateUncompensated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAngularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAngularRate()$/;"	f	class:vn::sensors::CompositeData
hasAngularRateUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasAngularRate, hasAngularRateUncompensated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAngularRateUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAngularRateUncompensated()$/;"	f	class:vn::sensors::CompositeData
hasAnyAcceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyAcceleration()$/;"	f	class:vn::sensors::CompositeData
hasAnyAngularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyAngularRate()$/;"	f	class:vn::sensors::CompositeData
hasAnyAttitude	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyAttitude()$/;"	f	class:vn::sensors::CompositeData
hasAnyMagnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyMagnetic()$/;"	f	class:vn::sensors::CompositeData
hasAnyPosition	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyPosition()$/;"	f	class:vn::sensors::CompositeData
hasAnyPositionUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyPositionUncertainty()$/;"	f	class:vn::sensors::CompositeData
hasAnyPressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyPressure()$/;"	f	class:vn::sensors::CompositeData
hasAnyTemperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyTemperature()$/;"	f	class:vn::sensors::CompositeData
hasAnyVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyVelocity()$/;"	f	class:vn::sensors::CompositeData
hasAnyVelocityUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAnyVelocityUncertainty()$/;"	f	class:vn::sensors::CompositeData
hasAttitudeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityUncertaintyGps, hasVelocityUncertaintyEstimated, hasTimeUncertainty, hasAttitudeUncertainty,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasAttitudeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasAttitudeUncertainty()$/;"	f	class:vn::sensors::CompositeData
hasCourseOverGround	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasCourseOverGround()$/;"	f	class:vn::sensors::CompositeData
hasDeltaTheta	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasDeltaTime, hasDeltaTheta, hasDeltaVelocity,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasDeltaTheta	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasDeltaTheta()$/;"	f	class:vn::sensors::CompositeData
hasDeltaTime	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasDeltaTime, hasDeltaTheta, hasDeltaVelocity,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasDeltaTime	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasDeltaTime()$/;"	f	class:vn::sensors::CompositeData
hasDeltaVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasDeltaTime, hasDeltaTheta, hasDeltaVelocity,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasDeltaVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasDeltaVelocity()$/;"	f	class:vn::sensors::CompositeData
hasDirectionCosineMatrix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	bool hasYawPitchRoll, hasQuaternion, hasDirectionCosineMatrix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasDirectionCosineMatrix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasDirectionCosineMatrix()$/;"	f	class:vn::sensors::CompositeData
hasDllNames	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^bool DllValidator::hasDllNames()$/;"	f	class:DllValidator
hasDop	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasTimeInfo, hasDop;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasDop	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasDop()$/;"	f	class:vn::sensors::CompositeData
hasFix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasFix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasFix()$/;"	f	class:vn::sensors::CompositeData
hasGpsTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasGpsTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasGpsTow()$/;"	f	class:vn::sensors::CompositeData
hasInsStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasInsStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasInsStatus()$/;"	f	class:vn::sensors::CompositeData
hasMagnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasMagnetic, hasMagneticUncompensated, hasMagneticNed, hasMagneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasMagnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasMagnetic()$/;"	f	class:vn::sensors::CompositeData
hasMagneticEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasMagnetic, hasMagneticUncompensated, hasMagneticNed, hasMagneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasMagneticEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasMagneticEcef()$/;"	f	class:vn::sensors::CompositeData
hasMagneticNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasMagnetic, hasMagneticUncompensated, hasMagneticNed, hasMagneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasMagneticNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasMagneticNed()$/;"	f	class:vn::sensors::CompositeData
hasMagneticUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasMagnetic, hasMagneticUncompensated, hasMagneticNed, hasMagneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasMagneticUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasMagneticUncompensated()$/;"	f	class:vn::sensors::CompositeData
hasNumSats	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasNumSats	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasNumSats()$/;"	f	class:vn::sensors::CompositeData
hasPositionEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionGpsLla, hasPositionGpsEcef, hasPositionEstimatedLla, hasPositionEstimatedEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionEstimatedEcef()$/;"	f	class:vn::sensors::CompositeData
hasPositionEstimatedLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionGpsLla, hasPositionGpsEcef, hasPositionEstimatedLla, hasPositionEstimatedEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionEstimatedLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionEstimatedLla()$/;"	f	class:vn::sensors::CompositeData
hasPositionGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionGpsLla, hasPositionGpsEcef, hasPositionEstimatedLla, hasPositionEstimatedEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionGpsEcef()$/;"	f	class:vn::sensors::CompositeData
hasPositionGpsLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionGpsLla, hasPositionGpsEcef, hasPositionEstimatedLla, hasPositionEstimatedEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionGpsLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionGpsLla()$/;"	f	class:vn::sensors::CompositeData
hasPositionUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionUncertaintyGpsNed, hasPositionUncertaintyGpsEcef, hasPositionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionUncertaintyEstimated()$/;"	f	class:vn::sensors::CompositeData
hasPositionUncertaintyGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionUncertaintyGpsNed, hasPositionUncertaintyGpsEcef, hasPositionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionUncertaintyGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionUncertaintyGpsEcef()$/;"	f	class:vn::sensors::CompositeData
hasPositionUncertaintyGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasPositionUncertaintyGpsNed, hasPositionUncertaintyGpsEcef, hasPositionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPositionUncertaintyGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPositionUncertaintyGpsNed()$/;"	f	class:vn::sensors::CompositeData
hasPressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTemperature, hasPressure,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasPressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasPressure()$/;"	f	class:vn::sensors::CompositeData
hasQuaternion	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	bool hasYawPitchRoll, hasQuaternion, hasDirectionCosineMatrix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasQuaternion	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasQuaternion()$/;"	f	class:vn::sensors::CompositeData
hasSensSat	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasSensSat	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasSensSat()$/;"	f	class:vn::sensors::CompositeData
hasSpeedOverGround	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasSpeedOverGround()$/;"	f	class:vn::sensors::CompositeData
hasSyncInCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasSyncInCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasSyncInCnt()$/;"	f	class:vn::sensors::CompositeData
hasSyncOutCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasSyncOutCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasSyncOutCnt()$/;"	f	class:vn::sensors::CompositeData
hasTemperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTemperature, hasPressure,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTemperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTemperature()$/;"	f	class:vn::sensors::CompositeData
hasTimeGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeGps()$/;"	f	class:vn::sensors::CompositeData
hasTimeGpsPps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeGpsPps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeGpsPps()$/;"	f	class:vn::sensors::CompositeData
hasTimeInfo	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasTimeInfo, hasDop;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeInfo	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeInfo()$/;"	f	class:vn::sensors::CompositeData
hasTimeStartup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeStartup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeStartup()$/;"	f	class:vn::sensors::CompositeData
hasTimeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeStatus()$/;"	f	class:vn::sensors::CompositeData
hasTimeSyncIn	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeSyncIn	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeSyncIn()$/;"	f	class:vn::sensors::CompositeData
hasTimeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityUncertaintyGps, hasVelocityUncertaintyEstimated, hasTimeUncertainty, hasAttitudeUncertainty,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeUncertainty()$/;"	f	class:vn::sensors::CompositeData
hasTimeUtc	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^    hasSyncInCnt, hasSyncOutCnt, hasTimeStatus, hasTimeGpsPps, hasGpsTow, hasTimeUtc, hasSensSat, hasFix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTimeUtc	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTimeUtc()$/;"	f	class:vn::sensors::CompositeData
hasTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasTow()$/;"	f	class:vn::sensors::CompositeData
hasVelocityEstimatedBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityGpsNed, hasVelocityGpsEcef, hasVelocityEstimatedNed, hasVelocityEstimatedEcef, hasVelocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityEstimatedBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityEstimatedBody()$/;"	f	class:vn::sensors::CompositeData
hasVelocityEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityGpsNed, hasVelocityGpsEcef, hasVelocityEstimatedNed, hasVelocityEstimatedEcef, hasVelocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityEstimatedEcef()$/;"	f	class:vn::sensors::CompositeData
hasVelocityEstimatedNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityGpsNed, hasVelocityGpsEcef, hasVelocityEstimatedNed, hasVelocityEstimatedEcef, hasVelocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityEstimatedNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityEstimatedNed()$/;"	f	class:vn::sensors::CompositeData
hasVelocityGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityGpsNed, hasVelocityGpsEcef, hasVelocityEstimatedNed, hasVelocityEstimatedEcef, hasVelocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityGpsEcef()$/;"	f	class:vn::sensors::CompositeData
hasVelocityGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityGpsNed, hasVelocityGpsEcef, hasVelocityEstimatedNed, hasVelocityEstimatedEcef, hasVelocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityGpsNed()$/;"	f	class:vn::sensors::CompositeData
hasVelocityUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityUncertaintyGps, hasVelocityUncertaintyEstimated, hasTimeUncertainty, hasAttitudeUncertainty,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityUncertaintyEstimated()$/;"	f	class:vn::sensors::CompositeData
hasVelocityUncertaintyGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasVelocityUncertaintyGps, hasVelocityUncertaintyEstimated, hasTimeUncertainty, hasAttitudeUncertainty,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVelocityUncertaintyGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVelocityUncertaintyGps()$/;"	f	class:vn::sensors::CompositeData
hasVpeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasVpeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasVpeStatus()$/;"	f	class:vn::sensors::CompositeData
hasWeek	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		hasTimeStartup, hasTimeGps, hasTow, hasWeek, hasNumSats, hasTimeSyncIn, hasVpeStatus, hasInsStatus,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasWeek	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasWeek()$/;"	f	class:vn::sensors::CompositeData
hasYawPitchRoll	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	bool hasYawPitchRoll, hasQuaternion, hasDirectionCosineMatrix,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
hasYawPitchRoll	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^bool CompositeData::hasYawPitchRoll()$/;"	f	class:vn::sensors::CompositeData
headingMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::HeadingMode headingMode; \/\/\/< The headingMode field.$/;"	m	struct:vn::sensors::VpeBasicControlRegister
hour	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t hour;	\/\/\/< \\brief Hour field.$/;"	m	struct:vn::protocol::uart::TimeUtc
hsiMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::HsiMode hsiMode; \/\/\/< The hsiMode field.$/;"	m	struct:vn::sensors::MagnetometerCalibrationControlRegister
hsiOutput	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::HsiOutput hsiOutput; \/\/\/< The hsiOutput field.$/;"	m	struct:vn::sensors::MagnetometerCalibrationControlRegister
identity	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	static mat<2, 2, T> identity()$/;"	f	struct:vn::math::mat
identity	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	static mat<3, 3, T> identity()$/;"	f	struct:vn::math::mat
identity	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	static mat<4, 4, T> identity()$/;"	f	struct:vn::math::mat
identity	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	static mat<m, m, T> identity()$/;"	f	struct:vn::math::mat
imuField	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ImuGroup imuField;				\/\/\/< Group 3 (IMU)$/;"	m	struct:vn::sensors::BinaryOutputRegister
imuRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t imuRate; \/\/\/< The imuRate field.$/;"	m	struct:vn::sensors::ImuRateConfigurationRegister
inertialAccel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f inertialAccel; \/\/\/< The inertialAccel field.$/;"	m	struct:vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
initial_position	src/main.cpp	/^vec3d initial_position;$/;"	v
initial_position_set	src/main.cpp	/^bool initial_position_set = false;$/;"	v
initialize	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^bool DllValidator::initialize()$/;"	f	class:DllValidator
insField	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::InsGroup insField;				\/\/\/< Group 6 (INS)$/;"	m	struct:vn::sensors::BinaryOutputRegister
insStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	InsStatus insStatus;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
insStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^InsStatus CompositeData::insStatus()$/;"	f	class:vn::sensors::CompositeData
int16_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef signed __int16		int16_t;$/;"	t
int32_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef signed __int32		int32_t;$/;"	t
int64_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef signed __int64		int64_t;$/;"	t
int8_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef signed __int8		int8_t;$/;"	t
integrationFrame	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::IntegrationFrame integrationFrame; \/\/\/< The integrationFrame field.$/;"	m	struct:vn::sensors::DeltaThetaAndDeltaVelocityConfigurationRegister
integrity	vnproglib-1.1.4.0/cpp/include/vn/error_detection.h	/^namespace integrity {$/;"	n	namespace:vn::data
integrity	vnproglib-1.1.4.0/cpp/src/error_detection.cpp	/^namespace integrity {$/;"	n	namespace:vn::data	file:
invalid_format	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	invalid_format() : exception() { }$/;"	f	class:vn::invalid_format
invalid_format	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class invalid_format : public std::exception$/;"	c	namespace:vn
invalid_operation	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	explicit invalid_operation(std::string msg) : runtime_error(msg.c_str()) { }$/;"	f	class:vn::invalid_operation
invalid_operation	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	invalid_operation() : runtime_error("invalid operation") { }$/;"	f	class:vn::invalid_operation
invalid_operation	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class invalid_operation : public std::runtime_error$/;"	c	namespace:vn
isAsciiAsync	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^bool Packet::isAsciiAsync()$/;"	f	class:vn::protocol::uart::Packet
isCompatible	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^bool Packet::isCompatible(CommonGroup commonGroup, TimeGroup timeGroup, ImuGroup imuGroup, GpsGroup gpsGroup, AttitudeGroup attitudeGroup, InsGroup insGroup)$/;"	f	class:vn::protocol::uart::Packet
isConnected	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	bool isConnected()$/;"	f	struct:vn::sensors::VnSensor::Impl
isConnected	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^bool VnSensor::isConnected()$/;"	f	class:vn::sensors::VnSensor
isError	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^bool Packet::isError()$/;"	f	class:vn::protocol::uart::Packet
isOpen	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^bool MemoryPort::isOpen()$/;"	f	class:vn::util::MemoryPort
isOpen	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^bool SerialPort::isOpen()$/;"	f	class:vn::xplat::SerialPort
isResponse	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^bool Packet::isResponse()$/;"	f	class:vn::protocol::uart::Packet
isValid	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^bool Packet::isValid()$/;"	f	class:vn::protocol::uart::Packet
ivec2	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec2i32 ivec2;$/;"	t	namespace:vn::math
join	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^void Thread::join()$/;"	f	class:vn::xplat::Thread
kelvin2celsius	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double kelvin2celsius(double tempInKelvin)$/;"	f	namespace:vn::math
kelvin2celsius	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float kelvin2celsius(float tempInKelvin)$/;"	f	namespace:vn::math
kelvin2fahren	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double kelvin2fahren(double tempInKelvin)$/;"	f	namespace:vn::math
kelvin2fahren	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float kelvin2fahren(float tempInKelvin)$/;"	f	namespace:vn::math
knownAccelDisturbance	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	bool knownAccelDisturbance;$/;"	m	struct:vn::protocol::uart::VpeStatus
knownMagDisturbance	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	bool knownMagDisturbance;$/;"	m	struct:vn::protocol::uart::VpeStatus
leapSecs	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  int8_t  leapSecs;	\/\/\/< \\brief Leap Seconds field.$/;"	m	struct:vn::protocol::uart::TimeInfo
leave	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^void CriticalSection::leave()$/;"	f	class:vn::xplat::CriticalSection
linear_accel_covariance	src/main.cpp	/^boost::array<double, 9ul> linear_accel_covariance = { };$/;"	v
lla	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d lla; \/\/\/< The lla field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
mFileName	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	std::string mFileName;$/;"	m	class:DllValidator
mIsInitialized	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	bool mIsInitialized;$/;"	m	class:DllValidator
mIsValid	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	bool mIsValid;$/;"	m	class:DllValidator
mMissingDlls	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	std::vector<std::string> mMissingDlls;$/;"	m	class:DllValidator
mPeFile	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	PeLib::PeFile* mPeFile;$/;"	m	class:DllValidator
mRequiredDlls	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^		std::vector<std::string> mRequiredDlls;$/;"	m	struct:DllValidator::DllValidatorVisitor
mVisitor	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	DllValidatorVisitor mVisitor;$/;"	m	class:DllValidator
mWorkingDirectory	vnproglib-1.1.4.0/cpp/include/vn/dllvalidator.h	/^	std::string mWorkingDirectory;$/;"	m	class:DllValidator
mag	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f mag; \/\/\/< The mag field.$/;"	m	struct:vn::sensors::ImuMeasurementsRegister
mag	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f mag; \/\/\/< The mag field.$/;"	m	struct:vn::sensors::MagneticAccelerationAndAngularRatesRegister
mag	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f mag; \/\/\/< The mag field.$/;"	m	struct:vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister
mag	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f mag; \/\/\/< The mag field.$/;"	m	struct:vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister
mag	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	T mag() const$/;"	f	struct:vn::math::vec
magDisturbance	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t magDisturbance;$/;"	m	struct:vn::protocol::uart::VpeStatus
magFilterMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::FilterMode magFilterMode; \/\/\/< The magFilterMode field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
magMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::MagneticMode magMode; \/\/\/< The magMode field.$/;"	m	struct:vn::sensors::FilterBasicControlRegister
magRef	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f magRef; \/\/\/< The magRef field.$/;"	m	struct:vn::sensors::MagneticAndGravityReferenceVectorsRegister
magSaturation	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	bool magSaturation;$/;"	m	struct:vn::protocol::uart::VpeStatus
magWindowSize	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t magWindowSize; \/\/\/< The magWindowSize field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
magnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		magnetic, magneticUncompensated, magneticNed, magneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
magnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::magnetic()$/;"	f	class:vn::sensors::CompositeData
magneticDisturbanceGain	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float magneticDisturbanceGain; \/\/\/< The magneticDisturbanceGain field.$/;"	m	struct:vn::sensors::FilterActiveTuningParametersRegister
magneticDisturbanceMemory	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float magneticDisturbanceMemory; \/\/\/< The magneticDisturbanceMemory field.$/;"	m	struct:vn::sensors::FilterActiveTuningParametersRegister
magneticDisturbancePresent	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::magneticDisturbancePresent(bool disturbancePresent, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
magneticEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		magnetic, magneticUncompensated, magneticNed, magneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
magneticEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::magneticEcef()$/;"	f	class:vn::sensors::CompositeData
magneticNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		magnetic, magneticUncompensated, magneticNed, magneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
magneticNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::magneticNed()$/;"	f	class:vn::sensors::CompositeData
magneticUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		magnetic, magneticUncompensated, magneticNed, magneticEcef,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
magneticUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::magneticUncompensated()$/;"	f	class:vn::sensors::CompositeData
magneticVariance	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f magneticVariance; \/\/\/< The magneticVariance field.$/;"	m	struct:vn::sensors::FilterMeasurementsVarianceParametersRegister
main	src/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	vnproglib-1.1.4.0/cpp/src/benchmark.cpp	/^int main(int argc, char* argv[])$/;"	f
major	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^int ApiVersion::major()$/;"	f	class:vn::ApiVersion
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	explicit mat(T val) :$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	explicit mat(T val)$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat() { }$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat(T e00v, T e01v, T e02v, T e03v,$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat(T e00v, T e01v, T e02v,$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat(T e00v, T e01v,$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat(vec<2, T> col0, vec<2, T> col1) :$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat(vec<3, T> col0, vec<3, T> col1, vec<3, T> col2) :$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat(vec<4, T> col0, vec<4, T> col1, vec<4, T> col2, vec<4, T> col3) :$/;"	f	struct:vn::math::mat
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^struct mat$/;"	s	namespace:vn::math
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^struct mat<2, 2, T>$/;"	s	namespace:vn::math
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^struct mat<3, 3, T>$/;"	s	namespace:vn::math
mat	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^struct mat<4, 4, T>$/;"	s	namespace:vn::math
mat2	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2> mat2;$/;"	t	namespace:vn::math
mat22	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2> mat22;$/;"	t	namespace:vn::math
mat22d	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2, 2, double> mat22d;$/;"	t	namespace:vn::math
mat22f	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2, 2, float> mat22f;$/;"	t	namespace:vn::math
mat22ld	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2, 2, long double> mat22ld;$/;"	t	namespace:vn::math
mat2d	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2, 2, double> mat2d;$/;"	t	namespace:vn::math
mat2f	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2, 2, float> mat2f;$/;"	t	namespace:vn::math
mat2ld	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<2, 2, long double> mat2ld;$/;"	t	namespace:vn::math
mat3	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3> mat3;$/;"	t	namespace:vn::math
mat33	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3> mat33;$/;"	t	namespace:vn::math
mat33d	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3, 3, double> mat33d;$/;"	t	namespace:vn::math
mat33f	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3, 3, float> mat33f;$/;"	t	namespace:vn::math
mat33ld	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3, 3, long double> mat33ld;$/;"	t	namespace:vn::math
mat3d	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3, 3, double> mat3d;$/;"	t	namespace:vn::math
mat3f	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3, 3, float> mat3f;$/;"	t	namespace:vn::math
mat3ld	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<3, 3, long double> mat3ld;$/;"	t	namespace:vn::math
mat4	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4> mat4;$/;"	t	namespace:vn::math
mat44	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4> mat44;$/;"	t	namespace:vn::math
mat44d	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4, 4, double> mat44d;$/;"	t	namespace:vn::math
mat44f	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4, 3, float> mat44f;$/;"	t	namespace:vn::math
mat44ld	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4, 4, long double> mat44ld;$/;"	t	namespace:vn::math
mat4d	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4, 4, double> mat4d;$/;"	t	namespace:vn::math
mat4f	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4, 4, float> mat4f;$/;"	t	namespace:vn::math
mat4ld	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^typedef mat<4, 4, long double> mat4ld;$/;"	t	namespace:vn::math
math	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^namespace math {$/;"	n	namespace:vn
math	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^namespace math {$/;"	n	namespace:vn
math	vnproglib-1.1.4.0/cpp/include/vn/conversions.h	/^namespace math {$/;"	n	namespace:vn
math	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^namespace math {$/;"	n	namespace:vn
math	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^namespace math {$/;"	n	namespace:vn
math	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^namespace math {$/;"	n	namespace:vn
math	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^namespace math {$/;"	n	namespace:vn	file:
math	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^namespace math {$/;"	n	namespace:vn	file:
math	vnproglib-1.1.4.0/cpp/src/position.cpp	/^namespace math {$/;"	n	namespace:vn	file:
maxAdaptRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float maxAdaptRate; \/\/\/< The maxAdaptRate field.$/;"	m	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
maxAdaptRate	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float maxAdaptRate; \/\/\/< The maxAdaptRate field.$/;"	m	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
maxFiltering	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f maxFiltering; \/\/\/< The maxFiltering field.$/;"	m	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
maxFiltering	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f maxFiltering; \/\/\/< The maxFiltering field.$/;"	m	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
maxTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float maxTuning; \/\/\/< The maxTuning field.$/;"	m	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
maxTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float maxTuning; \/\/\/< The maxTuning field.$/;"	m	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
min	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t min;	\/\/\/< \\brief Min field.$/;"	m	struct:vn::protocol::uart::TimeUtc
minFiltering	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f minFiltering; \/\/\/< The minFiltering field.$/;"	m	struct:vn::sensors::VpeAccelerometerAdvancedTuningRegister
minFiltering	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f minFiltering; \/\/\/< The minFiltering field.$/;"	m	struct:vn::sensors::VpeMagnetometerAdvancedTuningRegister
minPosUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float minPosUncertainty; \/\/\/< The minPosUncertainty field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
minVelUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float minVelUncertainty; \/\/\/< The minVelUncertainty field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
minor	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^int ApiVersion::minor()$/;"	f	class:vn::ApiVersion
mode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::GpsMode mode; \/\/\/< The mode field.$/;"	m	struct:vn::sensors::GpsConfigurationRegister
mode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::VelocityCompensationMode mode; \/\/\/< The mode field.$/;"	m	struct:vn::sensors::VelocityCompensationControlRegister
month	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t month;	\/\/\/< \\brief Month field.$/;"	m	struct:vn::protocol::uart::TimeUtc
mostRecentlyUpdatePressureType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	PressureType mostRecentlyUpdatePressureType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedAccelerationType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	AccelerationType mostRecentlyUpdatedAccelerationType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedAngularRateType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	AngularRateType mostRecentlyUpdatedAngularRateType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedAttitudeType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	AttitudeType mostRecentlyUpdatedAttitudeType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedMagneticType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	MagneticType mostRecentlyUpdatedMagneticType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedPositionType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	PositionType mostRecentlyUpdatedPositionType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedPositionUncertaintyType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	PositionUncertaintyType mostRecentlyUpdatedPositionUncertaintyType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedTemperatureType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	TemperatureType mostRecentlyUpdatedTemperatureType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedVelocityType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	VelocityType mostRecentlyUpdatedVelocityType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
mostRecentlyUpdatedVelocityUncertaintyType	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	VelocityUncertaintyType mostRecentlyUpdatedVelocityUncertaintyType;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
moveOrigin	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float moveOrigin; \/\/\/< The moveOrigin field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
ms	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint16_t ms;		\/\/\/< \\brief Ms field.$/;"	m	struct:vn::protocol::uart::TimeUtc
mult	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat mult(const double& scalar) const$/;"	f	struct:vn::math::mat
mult	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec mult(const double& scalar) const$/;"	f	struct:vn::math::vec
nDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float nDop;	\/\/\/< \\brief nDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
navDivisor	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t navDivisor; \/\/\/< The navDivisor field.$/;"	m	struct:vn::sensors::ImuRateConfigurationRegister
nedAcc	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f nedAcc; \/\/\/< The nedAcc field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
nedVel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f nedVel; \/\/\/< The nedVel field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
nedVel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f nedVel; \/\/\/< The nedVel field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
neg	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat neg() const$/;"	f	struct:vn::math::mat
neg	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec neg() const$/;"	f	struct:vn::math::vec
noRotation	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^AttitudeF AttitudeF::noRotation()$/;"	f	class:vn::math::AttitudeF
norm	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec norm() const$/;"	f	struct:vn::math::vec
not_found	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	explicit not_found(std::string msg) : runtime_error(msg) { }$/;"	f	class:vn::not_found
not_found	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class not_found : public std::runtime_error$/;"	c	namespace:vn
not_implemented	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	explicit not_implemented(std::string msg) : logic_error(msg.c_str()) { }$/;"	f	class:vn::not_implemented
not_implemented	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	not_implemented() : logic_error("Not implemented.") { }$/;"	f	class:vn::not_implemented
not_implemented	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class not_implemented : public std::logic_error$/;"	c	namespace:vn
not_supported	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	not_supported() : exception() { }$/;"	f	class:vn::not_supported
not_supported	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class not_supported : public std::exception$/;"	c	namespace:vn
null_pointer	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	null_pointer() : exception() { }$/;"	f	class:vn::null_pointer
null_pointer	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class null_pointer : public std::exception$/;"	c	namespace:vn
numMeas	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t numMeas; \/\/\/< The numMeas field.$/;"	m	struct:vn::sensors::GpsCompassEstimatedBaselineRegister
numOfBytesRemainingForCompletePacket	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	size_t numOfBytesRemainingForCompletePacket;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
numOfBytesRemainingToHaveAllGroupFields	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	uint8_t numOfBytesRemainingToHaveAllGroupFields;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
numSats	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint8_t numSats; \/\/\/< The numSats field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
numSats	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint8_t numSats; \/\/\/< The numSats field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
numSats	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint8_t numSats, timeStatus;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
numSats	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint8_t CompositeData::numSats()$/;"	f	class:vn::sensors::CompositeData
omega	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f omega; \/\/\/< The omega field.$/;"	m	struct:vn::sensors::VelocityCompensationStatusRegister
onAsyncPacketReceived	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void onAsyncPacketReceived(Packet& asciiPacket, size_t runningIndex, TimeStamp timestamp)$/;"	f	struct:vn::sensors::VnSensor::Impl
onErrorPacketReceived	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void onErrorPacketReceived(Packet& errorPacket, size_t runningIndex)$/;"	f	struct:vn::sensors::VnSensor::Impl
onPossiblePacketFound	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void onPossiblePacketFound(Packet& possiblePacket, size_t packetStartRunningIndex)$/;"	f	struct:vn::sensors::VnSensor::Impl
one	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	static mat one()$/;"	f	struct:vn::math::mat
one	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	static vec one()$/;"	f	struct:vn::math::vec
open	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::open()$/;"	f	class:vn::util::MemoryPort
open	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	void open(bool checkAndToggleIsOpenFlag = true)$/;"	f	struct:vn::xplat::SerialPort::Impl
open	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::open()$/;"	f	class:vn::xplat::SerialPort
operator ()	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	T& operator()(size_t row, size_t col)$/;"	f	struct:vn::math::mat
operator ()	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	const T& operator()(size_t row, size_t col) const$/;"	f	struct:vn::math::mat
operator *	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator*(const mat<r, s, S>& rhs)$/;"	f	struct:vn::math::mat
operator *	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^mat<m, n, T> operator*(const S& lhs, mat<m, n, T> rhs)$/;"	f	namespace:vn::math
operator *	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^mat<m, n, T> operator*(mat<m, n, T> lhs, const S& rhs)$/;"	f	namespace:vn::math
operator *	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^mat<m, n, T> operator*(mat<m, n, T>&lhs, const mat<r, s, S>& rhs)$/;"	f	namespace:vn::math
operator *	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^vec<tdim, T> operator*(const S& rhs, vec<tdim, T> lhs)$/;"	f	namespace:vn::math
operator *	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^vec<tdim, T> operator*(vec<tdim, T> lhs, const S& rhs)$/;"	f	namespace:vn::math
operator *=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator*=(const S& rhs)$/;"	f	struct:vn::math::mat
operator *=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator*=(const mat<2, 2, S>& rhs)$/;"	f	struct:vn::math::mat
operator *=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator*=(const mat<3, 3, S>& rhs)$/;"	f	struct:vn::math::mat
operator *=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator*=(const mat<4, 4, S>& rhs)$/;"	f	struct:vn::math::mat
operator *=	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec& operator*=(const T& rhs)$/;"	f	struct:vn::math::vec
operator +	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^mat<m, n, T> operator+(mat<m, n, T> lhs, const mat<m, n, S>& rhs)$/;"	f	namespace:vn::math
operator +	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^vec<tdim, T> operator+(vec<tdim, T> lhs, const vec<tdim, T>& rhs)$/;"	f	namespace:vn::math
operator +=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator+=(const mat<2, 2, S>& rhs)$/;"	f	struct:vn::math::mat
operator +=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator+=(const mat<3, 3, S>& rhs)$/;"	f	struct:vn::math::mat
operator +=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator+=(const mat<4, 4, S>& rhs)$/;"	f	struct:vn::math::mat
operator +=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator+=(const mat<m, n, S>& rhs)$/;"	f	struct:vn::math::mat
operator +=	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec& operator+=(const vec& rhs)$/;"	f	struct:vn::math::vec
operator -	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat operator-() const$/;"	f	struct:vn::math::mat
operator -	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^mat<m, n, T> operator-(mat<m, n, T> lhs, const mat<m, n, S>& rhs)$/;"	f	namespace:vn::math
operator -	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec operator-() const$/;"	f	struct:vn::math::vec
operator -	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^vec<tdim, T> operator-(vec<tdim, T> lhs, const vec<tdim, T>& rhs)$/;"	f	namespace:vn::math
operator -=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator-=(const mat<2, 2, S>& rhs)$/;"	f	struct:vn::math::mat
operator -=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator-=(const mat<3, 3, S>& rhs)$/;"	f	struct:vn::math::mat
operator -=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator-=(const mat<4, 4, S>& rhs)$/;"	f	struct:vn::math::mat
operator -=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator-=(const mat<m, n, S>& rhs)$/;"	f	struct:vn::math::mat
operator -=	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec& operator-=(const vec& rhs)$/;"	f	struct:vn::math::vec
operator /	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^mat<m, n, T> operator\/(mat<m, n, T> lhs, const S& rhs)$/;"	f	namespace:vn::math
operator /	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^vec<tdim, T> operator\/(vec<tdim, T> lhs, const S& rhs)$/;"	f	namespace:vn::math
operator /=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator\/=(const S & rhs)$/;"	f	struct:vn::math::mat
operator /=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator\/=(const S& rhs)$/;"	f	struct:vn::math::mat
operator /=	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat& operator\/=(const T & rhs)$/;"	f	struct:vn::math::mat
operator /=	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec& operator\/=(const T & rhs)$/;"	f	struct:vn::math::vec
operator <<	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^template <size_t mDim, size_t nDim, typename T> std::ostream& operator<<(std::ostream& out, mat<mDim, nDim, T> m)$/;"	f	namespace:vn::math
operator <<	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^template <size_t tdim, typename T> std::ostream& operator<<(std::ostream& out, vec<tdim, T> v)$/;"	f	namespace:vn::math
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, AsciiAsync e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, ChecksumMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, CompensationMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, CountMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, ErrorMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, ExternalSensorMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, FilterMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, FoamInit e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, GpsFix e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, GpsMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, HeadingMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, HsiMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, HsiOutput e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, IntegrationFrame e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, MagneticMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, PpsSource e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, Scenario e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, SensorError e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, StatusMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, SyncInEdge e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, SyncInMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, SyncOutMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, SyncOutPolarity e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, VelocityCompensationMode e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, VpeEnable e)$/;"	f	namespace:vn::protocol::uart
operator <<	vnproglib-1.1.4.0/cpp/src/util.cpp	/^ostream& operator<<(ostream& out, VpeMode e)$/;"	f	namespace:vn::protocol::uart
operator =	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	Impl& operator=(Impl& aImpl)$/;"	f	struct:vn::sensors::CompositeData::Impl
operator =	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^CompositeData& CompositeData::operator=(const CompositeData& RHS)$/;"	f	class:vn::sensors::CompositeData
operator =	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet& Packet::operator=(Packet const& from)$/;"	f	class:vn::protocol::uart::Packet
operator ==	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^bool operator==(const BinaryTracker& lhs, const BinaryTracker& rhs)$/;"	f	namespace:vn::protocol::uart
operator []	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	T& operator[](size_t index)$/;"	f	struct:vn::math::vec
operator []	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	const T& operator[](size_t index) const$/;"	f	struct:vn::math::vec
operator |	vnproglib-1.1.4.0/cpp/src/types.cpp	/^AttitudeGroup operator|(AttitudeGroup lhs, AttitudeGroup rhs)$/;"	f	namespace:vn::protocol::uart
operator |	vnproglib-1.1.4.0/cpp/src/types.cpp	/^CommonGroup operator|(CommonGroup lhs, CommonGroup rhs)$/;"	f	namespace:vn::protocol::uart
operator |	vnproglib-1.1.4.0/cpp/src/types.cpp	/^GpsGroup operator|(GpsGroup lhs, GpsGroup rhs)$/;"	f	namespace:vn::protocol::uart
operator |	vnproglib-1.1.4.0/cpp/src/types.cpp	/^ImuGroup operator|(ImuGroup lhs, ImuGroup rhs)$/;"	f	namespace:vn::protocol::uart
operator |	vnproglib-1.1.4.0/cpp/src/types.cpp	/^InsGroup operator|(InsGroup lhs, InsGroup rhs)$/;"	f	namespace:vn::protocol::uart
operator |	vnproglib-1.1.4.0/cpp/src/types.cpp	/^TimeGroup operator|(TimeGroup lhs, TimeGroup rhs)$/;"	f	namespace:vn::protocol::uart
optimizePort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::optimizePort(string portName)$/;"	f	class:vn::xplat::SerialPort
orientation_covariance	src/main.cpp	/^boost::array<double, 9ul> orientation_covariance = { };$/;"	v
pDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float pDop;	\/\/\/< \\brief pDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
pSerialPort	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	SerialPort *pSerialPort;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
pSerialPortEventsThread	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	Thread *pSerialPortEventsThread;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
pThreadForHandlingReceivedDataInternally	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	Thread *pThreadForHandlingReceivedDataInternally;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
packetFinder	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	PacketFinder *packetFinder;$/;"	m	struct:vn::sensors::TestHelper	file:
parse	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^CompositeData CompositeData::parse(Packet& p)$/;"	f	class:vn::sensors::CompositeData
parse	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parse(Packet& p, CompositeData& o)$/;"	f	class:vn::sensors::CompositeData
parse	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parse(Packet& p, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseAccelerationCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseAccelerationCompensation(mat3f* c, vec3f* b)$/;"	f	class:vn::protocol::uart::Packet
parseAccelerationMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseAccelerationMeasurements(vec3f* accel)$/;"	f	class:vn::protocol::uart::Packet
parseAngularRateMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseAngularRateMeasurements(vec3f* gyro)$/;"	f	class:vn::protocol::uart::Packet
parseAscii	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseAscii(Packet& p, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseAsyncDataOutputFrequency(uint32_t* adof)$/;"	f	class:vn::protocol::uart::Packet
parseAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseAsyncDataOutputType(uint32_t* ador)$/;"	f	class:vn::protocol::uart::Packet
parseAttitudeQuaternion	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseAttitudeQuaternion(vec4f* quat)$/;"	f	class:vn::protocol::uart::Packet
parseBinary	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinary(Packet& p, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseBinaryOutput	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseBinaryOutput($/;"	f	class:vn::protocol::uart::Packet
parseBinaryPacketAttitudeGroup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinaryPacketAttitudeGroup(Packet& p, AttitudeGroup gf, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseBinaryPacketCommonGroup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinaryPacketCommonGroup(Packet& p, CommonGroup gf, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseBinaryPacketGpsGroup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinaryPacketGpsGroup(Packet& p, GpsGroup gf, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseBinaryPacketImuGroup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinaryPacketImuGroup(Packet& p, ImuGroup gf, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseBinaryPacketInsGroup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinaryPacketInsGroup(Packet& p, InsGroup gf, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseBinaryPacketTimeGroup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::parseBinaryPacketTimeGroup(Packet& p, TimeGroup gf, vector<CompositeData*>& o)$/;"	f	class:vn::sensors::CompositeData
parseCalculatedMagnetometerCalibration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseCalculatedMagnetometerCalibration(mat3f* c, vec3f* b)$/;"	f	class:vn::protocol::uart::Packet
parseCommunicationProtocolControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseCommunicationProtocolControl(uint8_t* serialCount, uint8_t* serialStatus, uint8_t* spiCount, uint8_t* spiStatus, uint8_t* serialChecksum, uint8_t* spiChecksum, uint8_t* errorMode)$/;"	f	class:vn::protocol::uart::Packet
parseDeltaThetaAndDeltaVelocity	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseDeltaThetaAndDeltaVelocity(float* deltaTime, vec3f* deltaTheta, vec3f* deltaVelocity)$/;"	f	class:vn::protocol::uart::Packet
parseDeltaThetaAndDeltaVelocityConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseDeltaThetaAndDeltaVelocityConfiguration(uint8_t* integrationFrame, uint8_t* gyroCompensation, uint8_t* accelCompensation)$/;"	f	class:vn::protocol::uart::Packet
parseError	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^SensorError Packet::parseError()$/;"	f	class:vn::protocol::uart::Packet
parseFilterActiveTuningParameters	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseFilterActiveTuningParameters(float* magneticDisturbanceGain, float* accelerationDisturbanceGain, float* magneticDisturbanceMemory, float* accelerationDisturbanceMemory)$/;"	f	class:vn::protocol::uart::Packet
parseFilterBasicControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseFilterBasicControl(uint8_t* magMode, uint8_t* extMagMode, uint8_t* extAccMode, uint8_t* extGyroMode, vec3f* gyroLimit)$/;"	f	class:vn::protocol::uart::Packet
parseFilterMeasurementsVarianceParameters	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseFilterMeasurementsVarianceParameters(float* angularWalkVariance, vec3f* angularRateVariance, vec3f* magneticVariance, vec3f* accelerationVariance)$/;"	f	class:vn::protocol::uart::Packet
parseFilterStartupGyroBias	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseFilterStartupGyroBias(vec3f* bias)$/;"	f	class:vn::protocol::uart::Packet
parseFirmwareVersion	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseFirmwareVersion(char* firmwareVersion)$/;"	f	class:vn::protocol::uart::Packet
parseGpsAntennaOffset	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGpsAntennaOffset(vec3f* position)$/;"	f	class:vn::protocol::uart::Packet
parseGpsCompassBaseline	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGpsCompassBaseline(vec3f* position, vec3f* uncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseGpsCompassEstimatedBaseline	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGpsCompassEstimatedBaseline(uint8_t* estBaselineUsed, uint16_t* numMeas, vec3f* position, vec3f* uncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseGpsConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGpsConfiguration(uint8_t* mode, uint8_t* ppsSource)$/;"	f	class:vn::protocol::uart::Packet
parseGpsSolutionEcef	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGpsSolutionEcef(double* tow, uint16_t* week, uint8_t* gpsFix, uint8_t* numSats, vec3d* position, vec3f* velocity, vec3f* posAcc, float* speedAcc, float* timeAcc)$/;"	f	class:vn::protocol::uart::Packet
parseGpsSolutionLla	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGpsSolutionLla(double* time, uint16_t* week, uint8_t* gpsFix, uint8_t* numSats, vec3d* lla, vec3f* nedVel, vec3f* nedAcc, float* speedAcc, float* timeAcc)$/;"	f	class:vn::protocol::uart::Packet
parseGyroCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseGyroCompensation(mat3f* c, vec3f* b)$/;"	f	class:vn::protocol::uart::Packet
parseHardwareRevision	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseHardwareRevision(uint32_t* revision)$/;"	f	class:vn::protocol::uart::Packet
parseImuFilteringConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseImuFilteringConfiguration(uint16_t* magWindowSize, uint16_t* accelWindowSize, uint16_t* gyroWindowSize, uint16_t* tempWindowSize, uint16_t* presWindowSize, uint8_t* magFilterMode, uint8_t* accelFilterMode, uint8_t* gyroFilterMode, uint8_t* tempFilterMode, uint8_t* presFilterMode)$/;"	f	class:vn::protocol::uart::Packet
parseImuMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseImuMeasurements(vec3f* mag, vec3f* accel, vec3f* gyro, float* temp, float* pressure)$/;"	f	class:vn::protocol::uart::Packet
parseImuRateConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseImuRateConfiguration(uint16_t* imuRate, uint16_t* navDivisor, float* filterTargetRate, float* filterMinRate)$/;"	f	class:vn::protocol::uart::Packet
parseIndoorHeadingModeControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseIndoorHeadingModeControl(float* maxRateError)$/;"	f	class:vn::protocol::uart::Packet
parseInsAdvancedConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsAdvancedConfiguration(uint8_t* useMag, uint8_t* usePres, uint8_t* posAtt, uint8_t* velAtt, uint8_t* velBias, uint8_t* useFoam, uint8_t* gpsCovType, uint8_t* velCount, float* velInit, float* moveOrigin, float* gpsTimeout, float* deltaLimitPos, float* deltaLimitVel, float* minPosUncertainty, float* minVelUncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseInsBasicConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsBasicConfiguration(uint8_t* scenario, uint8_t* ahrsAiding)$/;"	f	class:vn::protocol::uart::Packet
parseInsBasicConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsBasicConfiguration(uint8_t* scenario, uint8_t* ahrsAiding, uint8_t* estBaseline)$/;"	f	class:vn::protocol::uart::Packet
parseInsSolutionEcef	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsSolutionEcef(double* time, uint16_t* week, uint16_t* status, vec3f* yawPitchRoll, vec3d* position, vec3f* velocity, float* attUncertainty, float* posUncertainty, float* velUncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseInsSolutionLla	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsSolutionLla(double* time, uint16_t* week, uint16_t* status, vec3f* yawPitchRoll, vec3d* position, vec3f* nedVel, float* attUncertainty, float* posUncertainty, float* velUncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseInsStateEcef	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsStateEcef(vec3f* yawPitchRoll, vec3d* position, vec3f* velocity, vec3f* accel, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseInsStateLla	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseInsStateLla(vec3f* yawPitchRoll, vec3d* position, vec3f* velocity, vec3f* accel, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseMagneticAccelerationAndAngularRates(vec3f* mag, vec3f* accel, vec3f* gyro)$/;"	f	class:vn::protocol::uart::Packet
parseMagneticAndGravityReferenceVectors	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseMagneticAndGravityReferenceVectors(vec3f* magRef, vec3f* accRef)$/;"	f	class:vn::protocol::uart::Packet
parseMagneticMeasurements	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseMagneticMeasurements(vec3f* mag)$/;"	f	class:vn::protocol::uart::Packet
parseMagnetometerCalibrationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseMagnetometerCalibrationControl(uint8_t* hsiMode, uint8_t* hsiOutput, uint8_t* convergeRate)$/;"	f	class:vn::protocol::uart::Packet
parseMagnetometerCompensation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseMagnetometerCompensation(mat3f* c, vec3f* b)$/;"	f	class:vn::protocol::uart::Packet
parseModelNumber	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseModelNumber(char* productName)$/;"	f	class:vn::protocol::uart::Packet
parseQuaternionMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseQuaternionMagneticAccelerationAndAngularRates(vec4f* quat, vec3f* mag, vec3f* accel, vec3f* gyro)$/;"	f	class:vn::protocol::uart::Packet
parseReferenceFrameRotation	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseReferenceFrameRotation(mat3f* c)$/;"	f	class:vn::protocol::uart::Packet
parseReferenceVectorConfiguration	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseReferenceVectorConfiguration(uint8_t* useMagModel, uint8_t* useGravityModel, uint32_t* recalcThreshold, float* year, vec3d* position)$/;"	f	class:vn::protocol::uart::Packet
parseSerialBaudRate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseSerialBaudRate(uint32_t* baudrate)$/;"	f	class:vn::protocol::uart::Packet
parseSerialNumber	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseSerialNumber(uint32_t* serialNum)$/;"	f	class:vn::protocol::uart::Packet
parseStartupFilterBiasEstimate	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseStartupFilterBiasEstimate(vec3f* gyroBias, vec3f* accelBias, float* pressureBias)$/;"	f	class:vn::protocol::uart::Packet
parseSynchronizationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseSynchronizationControl(uint8_t* syncInMode, uint8_t* syncInEdge, uint16_t* syncInSkipFactor, uint8_t* syncOutMode, uint8_t* syncOutPolarity, uint16_t* syncOutSkipFactor, uint32_t* syncOutPulseWidth)$/;"	f	class:vn::protocol::uart::Packet
parseSynchronizationStatus	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseSynchronizationStatus(uint32_t* syncInCount, uint32_t* syncInTime, uint32_t* syncOutCount)$/;"	f	class:vn::protocol::uart::Packet
parseUserTag	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseUserTag(char* tag)$/;"	f	class:vn::protocol::uart::Packet
parseVNACC	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNACC(vec3f* acceleration)$/;"	f	class:vn::protocol::uart::Packet
parseVNCMV	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNCMV(vec3f* magneticUncompensated, vec3f* accelerationUncompensated, vec3f* angularRateUncompensated, float* temperature)$/;"	f	class:vn::protocol::uart::Packet
parseVNCOV	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNCOV(vec3f* attitudeVariance, vec3f* angularRateBiasVariance)$/;"	f	class:vn::protocol::uart::Packet
parseVNDCM	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNDCM(mat3f* dcm)$/;"	f	class:vn::protocol::uart::Packet
parseVNDTV	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNDTV(float* deltaTime, vec3f* deltaTheta, vec3f* deltaVelocity)$/;"	f	class:vn::protocol::uart::Packet
parseVNGPE	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNGPE(double* tow, uint16_t* week, uint8_t* gpsFix, uint8_t* numSats, vec3d* position, vec3f* velocity, vec3f* posAcc, float* speedAcc, float* timeAcc)$/;"	f	class:vn::protocol::uart::Packet
parseVNGPS	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNGPS(double* time, uint16_t* week, uint8_t* gpsFix, uint8_t* numSats, vec3d* lla, vec3f* nedVel, vec3f* nedAcc, float* speedAcc, float* timeAcc)$/;"	f	class:vn::protocol::uart::Packet
parseVNGYR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNGYR(vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNICM	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNICM(vec3f* yawPitchRoll, vec3f* magnetic, vec3f* accelerationInertial, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNIMU	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNIMU(vec3f* magneticUncompensated, vec3f* accelerationUncompensated, vec3f* angularRateUncompensated, float* temperature, float* pressure)$/;"	f	class:vn::protocol::uart::Packet
parseVNINE	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNINE(double* time, uint16_t* week, uint16_t* status, vec3f* ypr, vec3d* position, vec3f* velocity, float* attUncertainty, float* posUncertainty, float* velUncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseVNINS	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNINS(double* time, uint16_t* week, uint16_t* status, vec3f* yawPitchRoll, vec3d* lla, vec3f* nedVel, float* attUncertainty, float* posUncertainty, float* velUncertainty)$/;"	f	class:vn::protocol::uart::Packet
parseVNISE	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNISE(vec3f* ypr, vec3d* position, vec3f* velocity, vec3f* acceleration, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNISL	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNISL(vec3f* ypr, vec3d* lla, vec3f* velocity, vec3f* acceleration, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNMAG	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNMAG(vec3f* magnetic)$/;"	f	class:vn::protocol::uart::Packet
parseVNMAR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNMAR(vec3f* magnetic, vec3f* acceleration, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNQAR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQAR(vec4f* quaternion, vec3f* acceleration, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNQMA	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQMA(vec4f* quaternion, vec3f* magnetic, vec3f* acceleration)$/;"	f	class:vn::protocol::uart::Packet
parseVNQMR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQMR(vec4f* quaternion, vec3f* magnetic, vec3f* acceleration, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNQTA	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQTA(vec4f* quaternion, vec3f* acceleration)$/;"	f	class:vn::protocol::uart::Packet
parseVNQTM	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQTM(vec4f *quaternion, vec3f *magnetic)$/;"	f	class:vn::protocol::uart::Packet
parseVNQTN	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQTN(vec4f* quaternion)$/;"	f	class:vn::protocol::uart::Packet
parseVNQTR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNQTR(vec4f* quaternion, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNRAW	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNRAW(vec3f *magneticVoltage, vec3f *accelerationVoltage, vec3f *angularRateVoltage, float* temperatureVoltage)$/;"	f	class:vn::protocol::uart::Packet
parseVNSTV	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNSTV(vec4f* quaternion, vec3f* angularRateBias)$/;"	f	class:vn::protocol::uart::Packet
parseVNYBA	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNYBA(vec3f* yawPitchRoll, vec3f* accelerationBody, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNYCM	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNYCM(vec3f* yawPitchRoll, vec3f* magnetic, vec3f* acceleration, vec3f* angularRate, float* temperature)$/;"	f	class:vn::protocol::uart::Packet
parseVNYIA	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNYIA(vec3f* yawPitchRoll, vec3f* accelerationInertial, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNYMR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNYMR(vec3f* yawPitchRoll, vec3f* magnetic, vec3f* acceleration, vec3f* angularRate)$/;"	f	class:vn::protocol::uart::Packet
parseVNYPR	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVNYPR(vec3f* yawPitchRoll)$/;"	f	class:vn::protocol::uart::Packet
parseVelocityCompensationControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVelocityCompensationControl(uint8_t* mode, float* velocityTuning, float* rateTuning)$/;"	f	class:vn::protocol::uart::Packet
parseVelocityCompensationMeasurement	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVelocityCompensationMeasurement(vec3f* velocity)$/;"	f	class:vn::protocol::uart::Packet
parseVelocityCompensationStatus	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVelocityCompensationStatus(float* x, float* xDot, vec3f* accelOffset, vec3f* omega)$/;"	f	class:vn::protocol::uart::Packet
parseVpeAccelerometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVpeAccelerometerAdvancedTuning(vec3f* minFiltering, vec3f* maxFiltering, float* maxAdaptRate, float* disturbanceWindow, float* maxTuning)$/;"	f	class:vn::protocol::uart::Packet
parseVpeAccelerometerBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVpeAccelerometerBasicTuning(vec3f* baseTuning, vec3f* adaptiveTuning, vec3f* adaptiveFiltering)$/;"	f	class:vn::protocol::uart::Packet
parseVpeBasicControl	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVpeBasicControl(uint8_t* enable, uint8_t* headingMode, uint8_t* filteringMode, uint8_t* tuningMode)$/;"	f	class:vn::protocol::uart::Packet
parseVpeGyroBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVpeGyroBasicTuning(vec3f* angularWalkVariance, vec3f* baseTuning, vec3f* adaptiveTuning)$/;"	f	class:vn::protocol::uart::Packet
parseVpeMagnetometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVpeMagnetometerAdvancedTuning(vec3f* minFiltering, vec3f* maxFiltering, float* maxAdaptRate, float* disturbanceWindow, float* maxTuning)$/;"	f	class:vn::protocol::uart::Packet
parseVpeMagnetometerBasicTuning	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseVpeMagnetometerBasicTuning(vec3f* baseTuning, vec3f* adaptiveTuning, vec3f* adaptiveFiltering)$/;"	f	class:vn::protocol::uart::Packet
parseYawPitchRoll	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseYawPitchRoll(vec3f* yawPitchRoll)$/;"	f	class:vn::protocol::uart::Packet
parseYawPitchRollMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseYawPitchRollMagneticAccelerationAndAngularRates(vec3f* yawPitchRoll, vec3f* mag, vec3f* accel, vec3f* gyro)$/;"	f	class:vn::protocol::uart::Packet
parseYawPitchRollTrueBodyAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseYawPitchRollTrueBodyAccelerationAndAngularRates(vec3f* yawPitchRoll, vec3f* bodyAccel, vec3f* gyro)$/;"	f	class:vn::protocol::uart::Packet
parseYawPitchRollTrueInertialAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^void Packet::parseYawPitchRollTrueInertialAccelerationAndAngularRates(vec3f* yawPitchRoll, vec3f* inertialAccel, vec3f* gyro)$/;"	f	class:vn::protocol::uart::Packet
patch	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^int ApiVersion::patch()$/;"	f	class:vn::ApiVersion
permission_denied	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	explicit permission_denied(std::string itemName) : runtime_error("Permission denied for item.") { }$/;"	f	class:vn::permission_denied
permission_denied	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	explicit permission_denied(std::string itemName) : runtime_error(std::string("Permission denied for item '" + itemName + "'.").c_str()) { }$/;"	f	class:vn::permission_denied
permission_denied	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	permission_denied() : runtime_error("permission denied") { }$/;"	f	class:vn::permission_denied
permission_denied	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class permission_denied : public std::runtime_error$/;"	c	namespace:vn
port	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	IPort* port;$/;"	m	struct:vn::sensors::VnSensor::Impl	file:
port	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^std::string VnSensor::port()$/;"	f	class:vn::sensors::VnSensor
port	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^std::string SerialPort::port()$/;"	f	class:vn::xplat::SerialPort
portName	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	string portName;$/;"	m	struct:vn::sensors::SearchHelper	file:
posAcc	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f posAcc; \/\/\/< The posAcc field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
posAtt	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool posAtt; \/\/\/< The posAtt field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
posUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float posUncertainty; \/\/\/< The posUncertainty field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
posUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float posUncertainty; \/\/\/< The posUncertainty field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::InsStateEcefRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::InsStateLlaRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3d position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::ReferenceVectorConfigurationRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::GpsCompassBaselineRegister
position	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f position; \/\/\/< The position field.$/;"	m	struct:vn::sensors::GpsCompassEstimatedBaselineRegister
positionEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	vec3d positionGpsLla, positionGpsEcef, positionEstimatedLla, positionEstimatedEcef;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3d CompositeData::positionEstimatedEcef()$/;"	f	class:vn::sensors::CompositeData
positionEstimatedLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	vec3d positionGpsLla, positionGpsEcef, positionEstimatedLla, positionEstimatedEcef;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionEstimatedLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3d CompositeData::positionEstimatedLla()$/;"	f	class:vn::sensors::CompositeData
positionGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	vec3d positionGpsLla, positionGpsEcef, positionEstimatedLla, positionEstimatedEcef;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3d CompositeData::positionGpsEcef()$/;"	f	class:vn::sensors::CompositeData
positionGpsLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	vec3d positionGpsLla, positionGpsEcef, positionEstimatedLla, positionEstimatedEcef;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionGpsLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3d CompositeData::positionGpsLla()$/;"	f	class:vn::sensors::CompositeData
positionUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	float temperature, pressure, deltaTime, positionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::positionUncertaintyEstimated()$/;"	f	class:vn::sensors::CompositeData
positionUncertaintyGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		deltaTheta, deltaVelocity, positionUncertaintyGpsNed, positionUncertaintyGpsEcef, attitudeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionUncertaintyGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::positionUncertaintyGpsEcef()$/;"	f	class:vn::sensors::CompositeData
positionUncertaintyGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		deltaTheta, deltaVelocity, positionUncertaintyGpsNed, positionUncertaintyGpsEcef, attitudeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
positionUncertaintyGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::positionUncertaintyGpsNed()$/;"	f	class:vn::sensors::CompositeData
possiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	static void possiblePacketFoundHandler(void* userData, Packet& possiblePacket, size_t packetStartRunningIndex, TimeStamp timestamp)$/;"	f	struct:vn::sensors::VnSensor::Impl
possibleStartIndex	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	size_t possibleStartIndex;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
possibleStartOfPacketIndex	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		size_t possibleStartOfPacketIndex;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker	file:
ppsSource	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::PpsSource ppsSource; \/\/\/< The ppsSource field.$/;"	m	struct:vn::sensors::GpsConfigurationRegister
presFilterMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::FilterMode presFilterMode; \/\/\/< The presFilterMode field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
presWindowSize	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t presWindowSize; \/\/\/< The presWindowSize field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
pressure	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float pressure; \/\/\/< The pressure field.$/;"	m	struct:vn::sensors::ImuMeasurementsRegister
pressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	float temperature, pressure, deltaTime, positionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
pressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::pressure()$/;"	f	class:vn::sensors::CompositeData
pressureBias	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float pressureBias; \/\/\/< The pressureBias field.$/;"	m	struct:vn::sensors::StartupFilterBiasEstimateRegister
processReceivedData	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^void PacketFinder::processReceivedData(boost::python::list data)$/;"	f	class:vn::protocol::uart::PacketFinder
processReceivedData	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^void PacketFinder::processReceivedData(char data[], size_t length)$/;"	f	class:vn::protocol::uart::PacketFinder
processReceivedData	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^void PacketFinder::processReceivedData(char data[], size_t length, TimeStamp timestamp)$/;"	f	class:vn::protocol::uart::PacketFinder
protocol	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^namespace protocol {$/;"	n	namespace:vn
protocol	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	/^namespace protocol {$/;"	n	namespace:vn
protocol	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^namespace protocol {$/;"	n	namespace:vn
protocol	vnproglib-1.1.4.0/cpp/include/vn/util.h	/^namespace protocol {$/;"	n	namespace:vn
protocol	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^namespace protocol {$/;"	n	namespace:vn	file:
protocol	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^namespace protocol {$/;"	n	namespace:vn	file:
protocol	vnproglib-1.1.4.0/cpp/src/types.cpp	/^namespace protocol {$/;"	n	namespace:vn	file:
protocol	vnproglib-1.1.4.0/cpp/src/util.cpp	/^namespace protocol {$/;"	n	namespace:vn	file:
pubGPS	src/main.cpp	/^ros::Publisher pubIMU, pubMag, pubGPS, pubOdom, pubTemp, pubPres;$/;"	v
pubIMU	src/main.cpp	/^ros::Publisher pubIMU, pubMag, pubGPS, pubOdom, pubTemp, pubPres;$/;"	v
pubMag	src/main.cpp	/^ros::Publisher pubIMU, pubMag, pubGPS, pubOdom, pubTemp, pubPres;$/;"	v
pubOdom	src/main.cpp	/^ros::Publisher pubIMU, pubMag, pubGPS, pubOdom, pubTemp, pubPres;$/;"	v
pubPres	src/main.cpp	/^ros::Publisher pubIMU, pubMag, pubGPS, pubOdom, pubTemp, pubPres;$/;"	v
pubTemp	src/main.cpp	/^ros::Publisher pubIMU, pubMag, pubGPS, pubOdom, pubTemp, pubPres;$/;"	v
quat	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec4f quat; \/\/\/< The quat field.$/;"	m	struct:vn::sensors::QuaternionMagneticAccelerationAndAngularRatesRegister
quat	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^vec4f AttitudeF::quat()$/;"	f	class:vn::math::AttitudeF
quat2YprInDegs	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f quat2YprInDegs(vec4f quat)$/;"	f	namespace:vn::math
quat2YprInRads	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f quat2YprInRads(vec4f quat)$/;"	f	namespace:vn::math
quat2dcm	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^mat3f quat2dcm(vec4f quat)$/;"	f	namespace:vn::math
quat2omegaPhiKappaInRads	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f quat2omegaPhiKappaInRads(vec4f quat)$/;"	f	namespace:vn::math
quaternion	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	vec4f quaternion;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
quaternion	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec4f CompositeData::quaternion()$/;"	f	class:vn::sensors::CompositeData
r	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T r;$/;"	m	struct:vn::math::vec::__anon3::__anon5
r	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T r;$/;"	m	struct:vn::math::vec::__anon6::__anon8
rad2deg	vnproglib-1.1.4.0/cpp/include/vn/conversions.h	/^vec<dim, float> rad2deg(vec<dim> anglesInRads)$/;"	f	namespace:vn::math
rad2deg	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^double rad2deg(double angleInRads)$/;"	f	namespace:vn::math
rad2deg	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float rad2deg(float angleInRads)$/;"	f	namespace:vn::math
rateDivisor	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t rateDivisor;							\/\/\/< The rateDivisor field.$/;"	m	struct:vn::sensors::BinaryOutputRegister
rateTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float rateTuning; \/\/\/< The rateTuning field.$/;"	m	struct:vn::sensors::VelocityCompensationControlRegister
read	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::read(char dataBuffer[], size_t numOfBytesToRead, size_t &numOfBytesActuallyRead)$/;"	f	class:vn::util::MemoryPort
read	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::read(char dataBuffer[], size_t numOfBytesToRead, size_t &numOfBytesActuallyRead)$/;"	f	class:vn::xplat::SerialPort
readAccelerationCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^AccelerationCompensationRegister VnSensor::readAccelerationCompensation()$/;"	f	class:vn::sensors::VnSensor
readAccelerationMeasurements	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readAccelerationMeasurements()$/;"	f	class:vn::sensors::VnSensor
readAngularRateMeasurements	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readAngularRateMeasurements()$/;"	f	class:vn::sensors::VnSensor
readAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::readAsyncDataOutputFrequency()$/;"	f	class:vn::sensors::VnSensor
readAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::readAsyncDataOutputFrequency(uint8_t port)$/;"	f	class:vn::sensors::VnSensor
readAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^AsciiAsync VnSensor::readAsyncDataOutputType()$/;"	f	class:vn::sensors::VnSensor
readAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^AsciiAsync VnSensor::readAsyncDataOutputType(uint8_t port)$/;"	f	class:vn::sensors::VnSensor
readAttitudeQuaternion	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec4f VnSensor::readAttitudeQuaternion()$/;"	f	class:vn::sensors::VnSensor
readBinaryOutput	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	BinaryOutputRegister readBinaryOutput(uint8_t binaryOutputNumber)$/;"	f	struct:vn::sensors::VnSensor::Impl
readBinaryOutput1	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^BinaryOutputRegister VnSensor::readBinaryOutput1()$/;"	f	class:vn::sensors::VnSensor
readBinaryOutput2	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^BinaryOutputRegister VnSensor::readBinaryOutput2()$/;"	f	class:vn::sensors::VnSensor
readBinaryOutput3	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^BinaryOutputRegister VnSensor::readBinaryOutput3()$/;"	f	class:vn::sensors::VnSensor
readCalculatedMagnetometerCalibration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^CalculatedMagnetometerCalibrationRegister VnSensor::readCalculatedMagnetometerCalibration()$/;"	f	class:vn::sensors::VnSensor
readCommunicationProtocolControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^CommunicationProtocolControlRegister VnSensor::readCommunicationProtocolControl()$/;"	f	class:vn::sensors::VnSensor
readDeltaThetaAndDeltaVelocity	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^DeltaThetaAndDeltaVelocityRegister VnSensor::readDeltaThetaAndDeltaVelocity()$/;"	f	class:vn::sensors::VnSensor
readDeltaThetaAndDeltaVelocityConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^DeltaThetaAndDeltaVelocityConfigurationRegister VnSensor::readDeltaThetaAndDeltaVelocityConfiguration()$/;"	f	class:vn::sensors::VnSensor
readFilterActiveTuningParameters	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^FilterActiveTuningParametersRegister VnSensor::readFilterActiveTuningParameters()$/;"	f	class:vn::sensors::VnSensor
readFilterBasicControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^FilterBasicControlRegister VnSensor::readFilterBasicControl()$/;"	f	class:vn::sensors::VnSensor
readFilterMeasurementsVarianceParameters	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^FilterMeasurementsVarianceParametersRegister VnSensor::readFilterMeasurementsVarianceParameters()$/;"	f	class:vn::sensors::VnSensor
readFilterStartupGyroBias	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readFilterStartupGyroBias()$/;"	f	class:vn::sensors::VnSensor
readFirmwareVersion	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^string VnSensor::readFirmwareVersion()$/;"	f	class:vn::sensors::VnSensor
readGpsAntennaOffset	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readGpsAntennaOffset()$/;"	f	class:vn::sensors::VnSensor
readGpsCompassBaseline	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^GpsCompassBaselineRegister VnSensor::readGpsCompassBaseline()$/;"	f	class:vn::sensors::VnSensor
readGpsCompassEstimatedBaseline	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^GpsCompassEstimatedBaselineRegister VnSensor::readGpsCompassEstimatedBaseline()$/;"	f	class:vn::sensors::VnSensor
readGpsConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^GpsConfigurationRegister VnSensor::readGpsConfiguration()$/;"	f	class:vn::sensors::VnSensor
readGpsSolutionEcef	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^GpsSolutionEcefRegister VnSensor::readGpsSolutionEcef()$/;"	f	class:vn::sensors::VnSensor
readGpsSolutionLla	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^GpsSolutionLlaRegister VnSensor::readGpsSolutionLla()$/;"	f	class:vn::sensors::VnSensor
readGyroCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^GyroCompensationRegister VnSensor::readGyroCompensation()$/;"	f	class:vn::sensors::VnSensor
readHardwareRevision	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::readHardwareRevision()$/;"	f	class:vn::sensors::VnSensor
readImuFilteringConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^ImuFilteringConfigurationRegister VnSensor::readImuFilteringConfiguration()$/;"	f	class:vn::sensors::VnSensor
readImuMeasurements	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^ImuMeasurementsRegister VnSensor::readImuMeasurements()$/;"	f	class:vn::sensors::VnSensor
readImuRateConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^ImuRateConfigurationRegister VnSensor::readImuRateConfiguration()$/;"	f	class:vn::sensors::VnSensor
readIndoorHeadingModeControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^float VnSensor::readIndoorHeadingModeControl()$/;"	f	class:vn::sensors::VnSensor
readInsAdvancedConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsAdvancedConfigurationRegister VnSensor::readInsAdvancedConfiguration()$/;"	f	class:vn::sensors::VnSensor
readInsBasicConfigurationVn200	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsBasicConfigurationRegisterVn200 VnSensor::readInsBasicConfigurationVn200()$/;"	f	class:vn::sensors::VnSensor
readInsBasicConfigurationVn300	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsBasicConfigurationRegisterVn300 VnSensor::readInsBasicConfigurationVn300()$/;"	f	class:vn::sensors::VnSensor
readInsSolutionEcef	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsSolutionEcefRegister VnSensor::readInsSolutionEcef()$/;"	f	class:vn::sensors::VnSensor
readInsSolutionLla	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsSolutionLlaRegister VnSensor::readInsSolutionLla()$/;"	f	class:vn::sensors::VnSensor
readInsStateEcef	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsStateEcefRegister VnSensor::readInsStateEcef()$/;"	f	class:vn::sensors::VnSensor
readInsStateLla	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^InsStateLlaRegister VnSensor::readInsStateLla()$/;"	f	class:vn::sensors::VnSensor
readMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^MagneticAccelerationAndAngularRatesRegister VnSensor::readMagneticAccelerationAndAngularRates()$/;"	f	class:vn::sensors::VnSensor
readMagneticAndGravityReferenceVectors	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^MagneticAndGravityReferenceVectorsRegister VnSensor::readMagneticAndGravityReferenceVectors()$/;"	f	class:vn::sensors::VnSensor
readMagneticMeasurements	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readMagneticMeasurements()$/;"	f	class:vn::sensors::VnSensor
readMagnetometerCalibrationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^MagnetometerCalibrationControlRegister VnSensor::readMagnetometerCalibrationControl()$/;"	f	class:vn::sensors::VnSensor
readMagnetometerCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^MagnetometerCompensationRegister VnSensor::readMagnetometerCompensation()$/;"	f	class:vn::sensors::VnSensor
readModelNumber	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^string VnSensor::readModelNumber()$/;"	f	class:vn::sensors::VnSensor
readQuaternionMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^QuaternionMagneticAccelerationAndAngularRatesRegister VnSensor::readQuaternionMagneticAccelerationAndAngularRates()$/;"	f	class:vn::sensors::VnSensor
readReferenceFrameRotation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^mat3f VnSensor::readReferenceFrameRotation()$/;"	f	class:vn::sensors::VnSensor
readReferenceVectorConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^ReferenceVectorConfigurationRegister VnSensor::readReferenceVectorConfiguration()$/;"	f	class:vn::sensors::VnSensor
readSerialBaudRate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::readSerialBaudRate()$/;"	f	class:vn::sensors::VnSensor
readSerialBaudRate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::readSerialBaudRate(uint8_t port)$/;"	f	class:vn::sensors::VnSensor
readSerialNumber	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint32_t VnSensor::readSerialNumber()$/;"	f	class:vn::sensors::VnSensor
readStartupFilterBiasEstimate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^StartupFilterBiasEstimateRegister VnSensor::readStartupFilterBiasEstimate()$/;"	f	class:vn::sensors::VnSensor
readSynchronizationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^SynchronizationControlRegister VnSensor::readSynchronizationControl()$/;"	f	class:vn::sensors::VnSensor
readSynchronizationStatus	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^SynchronizationStatusRegister VnSensor::readSynchronizationStatus()$/;"	f	class:vn::sensors::VnSensor
readUserTag	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^string VnSensor::readUserTag()$/;"	f	class:vn::sensors::VnSensor
readVelocityCompensationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VelocityCompensationControlRegister VnSensor::readVelocityCompensationControl()$/;"	f	class:vn::sensors::VnSensor
readVelocityCompensationMeasurement	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readVelocityCompensationMeasurement()$/;"	f	class:vn::sensors::VnSensor
readVelocityCompensationStatus	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VelocityCompensationStatusRegister VnSensor::readVelocityCompensationStatus()$/;"	f	class:vn::sensors::VnSensor
readVpeAccelerometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VpeAccelerometerAdvancedTuningRegister VnSensor::readVpeAccelerometerAdvancedTuning()$/;"	f	class:vn::sensors::VnSensor
readVpeAccelerometerBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VpeAccelerometerBasicTuningRegister VnSensor::readVpeAccelerometerBasicTuning()$/;"	f	class:vn::sensors::VnSensor
readVpeBasicControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VpeBasicControlRegister VnSensor::readVpeBasicControl()$/;"	f	class:vn::sensors::VnSensor
readVpeGyroBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VpeGyroBasicTuningRegister VnSensor::readVpeGyroBasicTuning()$/;"	f	class:vn::sensors::VnSensor
readVpeMagnetometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VpeMagnetometerAdvancedTuningRegister VnSensor::readVpeMagnetometerAdvancedTuning()$/;"	f	class:vn::sensors::VnSensor
readVpeMagnetometerBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VpeMagnetometerBasicTuningRegister VnSensor::readVpeMagnetometerBasicTuning()$/;"	f	class:vn::sensors::VnSensor
readYawPitchRoll	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vec3f VnSensor::readYawPitchRoll()$/;"	f	class:vn::sensors::VnSensor
readYawPitchRollMagneticAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^YawPitchRollMagneticAccelerationAndAngularRatesRegister VnSensor::readYawPitchRollMagneticAccelerationAndAngularRates()$/;"	f	class:vn::sensors::VnSensor
readYawPitchRollTrueBodyAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^YawPitchRollTrueBodyAccelerationAndAngularRatesRegister VnSensor::readYawPitchRollTrueBodyAccelerationAndAngularRates()$/;"	f	class:vn::sensors::VnSensor
readYawPitchRollTrueInertialAccelerationAndAngularRates	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^YawPitchRollTrueInertialAccelerationAndAngularRatesRegister VnSensor::readYawPitchRollTrueInertialAccelerationAndAngularRates()$/;"	f	class:vn::sensors::VnSensor
recalcThreshold	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint32_t recalcThreshold; \/\/\/< The recalcThreshold field.$/;"	m	struct:vn::sensors::ReferenceVectorConfigurationRegister
registerAsyncPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^PyObject* VnSensor::registerAsyncPacketReceivedHandler(PyObject* callable)$/;"	f	class:vn::sensors::VnSensor
registerAsyncPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::registerAsyncPacketReceivedHandler(void* userData, AsyncPacketReceivedHandler handler)$/;"	f	class:vn::sensors::VnSensor
registerDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::registerDataReceivedHandler(void* userData, DataReceivedHandler handler)$/;"	f	class:vn::util::MemoryPort
registerDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::registerDataReceivedHandler(void* userData, DataReceivedHandler handler)$/;"	f	class:vn::xplat::SerialPort
registerDataWrittenHandler	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::registerDataWrittenHandler(void* userData, DataWrittenHandler handler)$/;"	f	class:vn::util::MemoryPort
registerErrorPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::registerErrorPacketReceivedHandler(void* userData, ErrorPacketReceivedHandler handler)$/;"	f	class:vn::sensors::VnSensor
registerPossiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^void PacketFinder::registerPossiblePacketFoundHandler(void* userData, ValidPacketFoundHandler handler)$/;"	f	class:vn::protocol::uart::PacketFinder
registerPossiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::registerPossiblePacketFoundHandler(void* userData, PossiblePacketFoundHandler handler)$/;"	f	class:vn::sensors::VnSensor
registerRawDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^PyObject* VnSensor::registerRawDataReceivedHandler(PyObject* callable)$/;"	f	class:vn::sensors::VnSensor
registerRawDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::registerRawDataReceivedHandler(void* userData, RawDataReceivedHandler handler)$/;"	f	class:vn::sensors::VnSensor
register_packet_found_handler	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^boost::python::object* PacketFinder::register_packet_found_handler(PyObject* callable\/*boost::python::object* callable*\/)$/;"	f	class:vn::protocol::uart::PacketFinder
reset	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void reset()$/;"	f	struct:vn::sensors::CompositeData::Impl
reset	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^void CompositeData::reset()$/;"	f	class:vn::sensors::CompositeData
reset	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		void reset()$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker
reset	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::reset(bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
reset	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^	void reset()$/;"	f	struct:vn::xplat::Stopwatch::Impl
reset	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^void Stopwatch::reset()$/;"	f	class:vn::xplat::Stopwatch
resetOdom	src/main.cpp	/^bool resetOdom(std_srvs::Empty::Request &req, std_srvs::Empty::Response &resp)$/;"	f
resetOdomSrv	src/main.cpp	/^ros::ServiceServer resetOdomSrv;$/;"	v
resetTracking	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	void resetTracking()$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl
responseTimeoutMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint16_t VnSensor::responseTimeoutMs()$/;"	f	class:vn::sensors::VnSensor
restoreFactorySettings	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::restoreFactorySettings(bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
resumeThread	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^	virtual void resumeThread(){}$/;"	f	class:vn::xplat::IPort
resumeThread	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::resumeThread()$/;"	f	class:vn::xplat::SerialPort
retransmitDelayMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^uint16_t VnSensor::retransmitDelayMs()$/;"	f	class:vn::sensors::VnSensor
revision	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^int ApiVersion::revision()$/;"	f	class:vn::ApiVersion
rgb	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		vec<3, T> rgb;$/;"	m	union:vn::math::vec::__anon6
rpc_temp	src/main.cpp	/^XmlRpc::XmlRpcValue rpc_temp;$/;"	v
runningDataIndexOfStart	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		size_t runningDataIndexOfStart;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker	file:
runningDataIndexOfStart	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	size_t runningDataIndexOfStart;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
scenario	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::Scenario scenario; \/\/\/< The scenario field.$/;"	m	struct:vn::sensors::InsBasicConfigurationRegisterVn200
scenario	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::Scenario scenario; \/\/\/< The scenario field.$/;"	m	struct:vn::sensors::InsBasicConfigurationRegisterVn300
search	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^bool Searcher::search(const string &portName, int32_t *foundBaudrate)$/;"	f	class:vn::sensors::Searcher
search	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^vector<pair<string, uint32_t> > Searcher::search()$/;"	f	class:vn::sensors::Searcher
search	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^vector<pair<string, uint32_t> > Searcher::search(vector<string>& portsToCheck)$/;"	f	class:vn::sensors::Searcher
searchThread	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^void searchThread(void* routineData)$/;"	f	namespace:vn::sensors
sec	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	uint8_t sec;	\/\/\/< \\brief Sec field.$/;"	m	struct:vn::protocol::uart::TimeUtc
send	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^string VnSensor::send(string toSend, bool waitForReply, ErrorDetectionMode errorDetectionMode)$/;"	f	class:vn::sensors::VnSensor
sendErrorDetectionMode	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^ErrorDetectionMode VnSensor::sendErrorDetectionMode()$/;"	f	class:vn::sensors::VnSensor
sensSat	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	SensSat sensSat;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
sensSat	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^SensSat CompositeData::sensSat()$/;"	f	class:vn::sensors::CompositeData
sensor	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^VnSensor* EzAsyncData::sensor()$/;"	f	class:vn::sensors::EzAsyncData
sensorFound	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	bool sensorFound;$/;"	m	struct:vn::sensors::SearchHelper	file:
sensor_error	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^struct sensor_error : public std::exception$/;"	s	namespace:vn::sensors
sensor_error	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^sensor_error::sensor_error()$/;"	f	class:vn::sensors::sensor_error
sensor_error	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^sensor_error::sensor_error(SensorError e) :$/;"	f	class:vn::sensors::sensor_error
sensor_error	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^sensor_error::sensor_error(sensor_error const& e) :$/;"	f	class:vn::sensors::sensor_error
sensors	vnproglib-1.1.4.0/cpp/include/vn/compositedata.h	/^namespace sensors {$/;"	n	namespace:vn
sensors	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^namespace sensors {$/;"	n	namespace:vn
sensors	vnproglib-1.1.4.0/cpp/include/vn/mock.h	/^namespace sensors {$/;"	n	namespace:xplat
sensors	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^namespace sensors {$/;"	n	namespace:vn
sensors	vnproglib-1.1.4.0/cpp/include/vn/searcher.h	/^namespace sensors {$/;"	n	namespace:vn
sensors	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^namespace sensors {$/;"	n	namespace:vn
sensors	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^namespace sensors {$/;"	n	namespace:vn	file:
sensors	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^namespace sensors {$/;"	n	namespace:vn	file:
sensors	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^namespace sensors {$/;"	n	namespace:vn	file:
sensors	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^namespace sensors {$/;"	n	namespace:vn	file:
serialChecksum	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ChecksumMode serialChecksum; \/\/\/< The serialChecksum field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
serialCount	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::CountMode serialCount; \/\/\/< The serialCount field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
serialPort	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	SerialPort *serialPort;$/;"	m	struct:vn::sensors::TestHelper	file:
serialStatus	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::StatusMode serialStatus; \/\/\/< The serialStatus field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
setAcceleration	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAcceleration(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAccelerationEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAccelerationEcef(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAccelerationLinearBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAccelerationLinearBody(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAccelerationLinearEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAccelerationLinearEcef(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAccelerationLinearNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAccelerationLinearNed(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAccelerationNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAccelerationNed(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAccelerationUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAccelerationUncompensated(vec3f accel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAngularRate	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAngularRate(vec3f ar)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAngularRateUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAngularRateUncompensated(vec3f ar)$/;"	f	struct:vn::sensors::CompositeData::Impl
setAttitudeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setAttitudeUncertainty(vec3f u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setCov	src/main.cpp	/^boost::array<double, 9ul> setCov(XmlRpc::XmlRpcValue rpc){$/;"	f
setDeltaTheta	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setDeltaTheta(vec3f theta)$/;"	f	struct:vn::sensors::CompositeData::Impl
setDeltaTime	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setDeltaTime(float time)$/;"	f	struct:vn::sensors::CompositeData::Impl
setDeltaVelocity	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setDeltaVelocity(vec3f vel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setDirectionConsineMatrix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setDirectionConsineMatrix(mat3f dcm)$/;"	f	struct:vn::sensors::CompositeData::Impl
setFix	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setFix(GpsFix f)$/;"	f	struct:vn::sensors::CompositeData::Impl
setGnssDop	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  void setGnssDop(GnssDop d)$/;"	f	struct:vn::sensors::CompositeData::Impl
setGpsTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setGpsTow(uint64_t tow)$/;"	f	struct:vn::sensors::CompositeData::Impl
setGyroBias	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::setGyroBias(bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
setInsStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setInsStatus(InsStatus s)$/;"	f	struct:vn::sensors::CompositeData::Impl
setMagnetic	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setMagnetic(vec3f mag)$/;"	f	struct:vn::sensors::CompositeData::Impl
setMagneticEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setMagneticEcef(vec3f mag)$/;"	f	struct:vn::sensors::CompositeData::Impl
setMagneticNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setMagneticNed(vec3f mag)$/;"	f	struct:vn::sensors::CompositeData::Impl
setMagneticUncompensated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setMagneticUncompensated(vec3f mag)$/;"	f	struct:vn::sensors::CompositeData::Impl
setNumSats	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setNumSats(uint8_t s)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionEstimatedEcef(vec3d pos)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionEstimatedLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionEstimatedLla(vec3d pos)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionGpsEcef(vec3d pos)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionGpsLla	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionGpsLla(vec3d pos)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionUncertaintyEstimated(float u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionUncertaintyGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionUncertaintyGpsEcef(vec3f u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPositionUncertaintyGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPositionUncertaintyGpsNed(vec3f u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setPressure	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setPressure(float pres)$/;"	f	struct:vn::sensors::CompositeData::Impl
setQuaternion	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setQuaternion(vec4f quat)$/;"	f	struct:vn::sensors::CompositeData::Impl
setResponseTimeoutMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::setResponseTimeoutMs(uint16_t timeout)$/;"	f	class:vn::sensors::VnSensor
setRetransmitDelayMs	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::setRetransmitDelayMs(uint16_t delay)$/;"	f	class:vn::sensors::VnSensor
setSendErrorDetectionMode	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::setSendErrorDetectionMode(ErrorDetectionMode mode)$/;"	f	class:vn::sensors::VnSensor
setSensSat	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setSensSat(SensSat s)$/;"	f	struct:vn::sensors::CompositeData::Impl
setStopBits	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::setStopBits(SerialPort::StopBits stopBits)$/;"	f	class:vn::xplat::SerialPort
setSyncInCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setSyncInCnt(uint32_t count)$/;"	f	struct:vn::sensors::CompositeData::Impl
setSyncOutCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  void setSyncOutCnt(uint32_t count)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTemperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTemperature(float temp)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTimeGps(uint64_t time)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeGpsPps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTimeGpsPps(uint64_t pps)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeInfo	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  void setTimeInfo(TimeInfo t)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeStartup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTimeStartup(uint64_t ts)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  void setTimeStatus(uint8_t status)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeSyncIn	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTimeSyncIn(uint64_t t)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTimeUncertainty(uint32_t u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTimeUtc	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTimeUtc(TimeUtc t)$/;"	f	struct:vn::sensors::CompositeData::Impl
setTow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setTow(double t)$/;"	f	struct:vn::sensors::CompositeData::Impl
setValues	vnproglib-1.1.4.0/cpp/include/vn/compositedata.h	/^	static void setValues(T val, std::vector<CompositeData*>& o, void (Impl::* function)(T))$/;"	f	class:vn::sensors::CompositeData
setVelocityEstimatedBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityEstimatedBody(vec3f vel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVelocityEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityEstimatedEcef(vec3f vel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVelocityEstimatedNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityEstimatedNed(vec3f vel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVelocityGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityGpsEcef(vec3f vel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVelocityGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityGpsNed(vec3f vel)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVelocityUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityUncertaintyEstimated(float u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVelocityUncertaintyGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVelocityUncertaintyGps(float u)$/;"	f	struct:vn::sensors::CompositeData::Impl
setVpeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setVpeStatus(VpeStatus s)$/;"	f	struct:vn::sensors::CompositeData::Impl
setWeek	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setWeek(uint16_t w)$/;"	f	struct:vn::sensors::CompositeData::Impl
setYawPitchRoll	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	void setYawPitchRoll(vec3f ypr)$/;"	f	struct:vn::sensors::CompositeData::Impl
shutdownRequest	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::shutdownRequest()$/;"	f	class:vn::sensors::VnSensor
signal	vnproglib-1.1.4.0/cpp/src/event.cpp	/^void Event::signal()$/;"	f	class:vn::xplat::Event
sleepMs	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^void Thread::sleepMs(uint32_t numOfMsToSleep)$/;"	f	class:vn::xplat::Thread
sleepNs	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^void Thread::sleepNs(uint32_t numOfNsToSleep)$/;"	f	class:vn::xplat::Thread
sleepSec	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^void Thread::sleepSec(uint32_t numOfSecsToSleep)$/;"	f	class:vn::xplat::Thread
sleepUs	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^void Thread::sleepUs(uint32_t numOfUsToSleep)$/;"	f	class:vn::xplat::Thread
speedAcc	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float speedAcc; \/\/\/< The speedAcc field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
speedAcc	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float speedAcc; \/\/\/< The speedAcc field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
speedOverGround	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::speedOverGround()$/;"	f	class:vn::sensors::CompositeData
speed_over_ground	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float speed_over_ground(float velNedX, float velNedY)$/;"	f	namespace:vn::math
speed_over_ground	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^float speed_over_ground(vec3f velNed)$/;"	f	namespace:vn::math
spiChecksum	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::ChecksumMode spiChecksum; \/\/\/< The spiChecksum field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
spiCount	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::CountMode spiCount; \/\/\/< The spiCount field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
spiStatus	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::StatusMode spiStatus; \/\/\/< The spiStatus field.$/;"	m	struct:vn::sensors::CommunicationProtocolControlRegister
start	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^void Thread::start(void* routineData)$/;"	f	class:vn::xplat::Thread
startAsciiPacketParse	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^char* startAsciiPacketParse(char* packetStart, size_t& index)$/;"	f	namespace:vn::protocol::uart
startAsciiResponsePacketParse	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^char* startAsciiResponsePacketParse(char* packetStart, size_t& index)$/;"	f	namespace:vn::protocol::uart
startFoundInProvidedDataBuffer	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	bool startFoundInProvidedDataBuffer;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
startNew	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^Thread* Thread::startNew(ThreadStartRoutine startRoutine, void* routineData)$/;"	f	class:vn::xplat::Thread
status	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t status; \/\/\/< The status field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
status	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t status; \/\/\/< The status field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
stoh	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint16_t stoh(uint16_t sensorOrdered)$/;"	f	namespace:vn
stoh	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint32_t stoh(uint32_t sensorOrdered)$/;"	f	namespace:vn
stoh	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint64_t stoh(uint64_t sensorOrdered)$/;"	f	namespace:vn
stopBits	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	StopBits stopBits;$/;"	m	struct:vn::xplat::SerialPort::Impl	file:
stopBits	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^SerialPort::StopBits SerialPort::stopBits()$/;"	f	class:vn::xplat::SerialPort
stopRequest	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::stopRequest()$/;"	f	class:vn::sensors::VnSensor
stopThread	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^	virtual void stopThread(){}$/;"	f	class:vn::xplat::IPort
stopThread	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::stopThread()$/;"	f	class:vn::xplat::SerialPort
str	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^template <size_t mDim, size_t nDim, typename T> std::string str(mat<mDim, nDim, T> m)$/;"	f	namespace:vn::math
str	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^template <size_t tdim, typename T> std::string str(vec<tdim, T> v)$/;"	f	namespace:vn::math
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(AsciiAsync val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(ChecksumMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(CompensationMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(CountMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(ErrorMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(ExternalSensorMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(FilterMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(FoamInit val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(GpsFix val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(GpsMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(HeadingMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(HsiMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(HsiOutput val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(IntegrationFrame val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(MagneticMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(PpsSource val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(Scenario val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(SensorError val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(StatusMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(SyncInEdge val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(SyncInMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(SyncOutMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(SyncOutPolarity val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(VelocityCompensationMode val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(VpeEnable val)$/;"	f	namespace:vn::protocol::uart
str	vnproglib-1.1.4.0/cpp/src/util.cpp	/^string str(VpeMode val)$/;"	f	namespace:vn::protocol::uart
sub	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat sub(const mat& toSub) const$/;"	f	struct:vn::math::mat
sub	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec sub(const vec& to_sub) const$/;"	f	struct:vn::math::vec
supportedBaudrates	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^vector<uint32_t> VnSensor::supportedBaudrates()$/;"	f	class:vn::sensors::VnSensor
syncInCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  uint32_t syncInCnt, syncOutCnt, timeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
syncInCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint32_t CompositeData::syncInCnt()$/;"	f	class:vn::sensors::CompositeData
syncInCount	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint32_t syncInCount; \/\/\/< The syncInCount field.$/;"	m	struct:vn::sensors::SynchronizationStatusRegister
syncInEdge	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::SyncInEdge syncInEdge; \/\/\/< The syncInEdge field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
syncInMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::SyncInMode syncInMode; \/\/\/< The syncInMode field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
syncInSkipFactor	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t syncInSkipFactor; \/\/\/< The syncInSkipFactor field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
syncInTime	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint32_t syncInTime; \/\/\/< The syncInTime field.$/;"	m	struct:vn::sensors::SynchronizationStatusRegister
syncOutCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  uint32_t syncInCnt, syncOutCnt, timeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
syncOutCnt	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint32_t CompositeData::syncOutCnt()$/;"	f	class:vn::sensors::CompositeData
syncOutCount	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint32_t syncOutCount; \/\/\/< The syncOutCount field.$/;"	m	struct:vn::sensors::SynchronizationStatusRegister
syncOutMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::SyncOutMode syncOutMode; \/\/\/< The syncOutMode field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
syncOutPolarity	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::SyncOutPolarity syncOutPolarity; \/\/\/< The syncOutPolarity field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
syncOutPulseWidth	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint32_t syncOutPulseWidth; \/\/\/< The syncOutPulseWidth field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
syncOutSkipFactor	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t syncOutSkipFactor; \/\/\/< The syncOutSkipFactor field.$/;"	m	struct:vn::sensors::SynchronizationControlRegister
tDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float tDop;	\/\/\/< \\brief tDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
tare	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::tare(bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
temp	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float temp; \/\/\/< The temp field.$/;"	m	struct:vn::sensors::ImuMeasurementsRegister
tempFilterMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::FilterMode tempFilterMode; \/\/\/< The tempFilterMode field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
tempWindowSize	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t tempWindowSize; \/\/\/< The tempWindowSize field.$/;"	m	struct:vn::sensors::ImuFilteringConfigurationRegister
temperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	float temperature, pressure, deltaTime, positionUncertaintyEstimated,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
temperature	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::temperature()$/;"	f	class:vn::sensors::CompositeData
test	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^bool Searcher::test(string portName, uint32_t baudrate)$/;"	f	class:vn::sensors::Searcher
testDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^void testDataReceivedHandler(void* userData)$/;"	f	namespace:vn::sensors
testValidPacketFoundHandler	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^void testValidPacketFoundHandler(void *userData, Packet &packet, size_t runningIndexOfPacketStart, TimeStamp timestamp)$/;"	f	namespace:vn::sensors
tf_ned_to_enu	src/main.cpp	/^bool tf_ned_to_enu;$/;"	v
threadStopped	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^	virtual bool threadStopped(){ return false; }$/;"	f	class:vn::xplat::IPort
threadStopped	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^bool VnSensor::threadStopped()$/;"	f	class:vn::sensors::VnSensor
threadStopped	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^bool SerialPort::threadStopped()$/;"	f	class:vn::xplat::SerialPort
time	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	double time; \/\/\/< The time field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
time	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	double time; \/\/\/< The time field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
time	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	double time; \/\/\/< The time field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
timeAcc	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float timeAcc; \/\/\/< The timeAcc field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
timeAcc	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float timeAcc; \/\/\/< The timeAcc field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
timeField	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::TimeGroup timeField;			\/\/\/< Group 2 (Time)$/;"	m	struct:vn::sensors::BinaryOutputRegister
timeFound	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^		TimeStamp timeFound;$/;"	m	struct:vn::protocol::uart::PacketFinder::Impl::AsciiTracker	file:
timeFound	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	vn::xplat::TimeStamp timeFound;$/;"	m	struct:vn::protocol::uart::BinaryTracker	file:
timeGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint64_t timeStartup, timeGps, timeSyncIn, timeGpsPps, gpsTow;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint64_t CompositeData::timeGps()$/;"	f	class:vn::sensors::CompositeData
timeGpsPps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint64_t timeStartup, timeGps, timeSyncIn, timeGpsPps, gpsTow;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeGpsPps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint64_t CompositeData::timeGpsPps()$/;"	f	class:vn::sensors::CompositeData
timeInfo	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  TimeInfo timeInfo;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeInfo	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^TimeInfo CompositeData::timeInfo()$/;"	f	class:vn::sensors::CompositeData
timeStartup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint64_t timeStartup, timeGps, timeSyncIn, timeGpsPps, gpsTow;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeStartup	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint64_t CompositeData::timeStartup()$/;"	f	class:vn::sensors::CompositeData
timeStatus	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  uint8_t timeStatus;	\/\/\/< \\brief Time Status field.$/;"	m	struct:vn::protocol::uart::TimeInfo
timeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint8_t numSats, timeStatus;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint8_t CompositeData::timeStatus()$/;"	f	class:vn::sensors::CompositeData
timeSyncIn	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint64_t timeStartup, timeGps, timeSyncIn, timeGpsPps, gpsTow;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeSyncIn	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint64_t CompositeData::timeSyncIn()$/;"	f	class:vn::sensors::CompositeData
timeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^  uint32_t syncInCnt, syncOutCnt, timeUncertainty;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeUncertainty	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint32_t CompositeData::timeUncertainty()$/;"	f	class:vn::sensors::CompositeData
timeUtc	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	TimeUtc timeUtc;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
timeUtc	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^TimeUtc CompositeData::timeUtc()$/;"	f	class:vn::sensors::CompositeData
timeout	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	timeout() : exception() { }$/;"	f	class:vn::timeout
timeout	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class timeout : public std::exception$/;"	c	namespace:vn
toUint8FromHexStr	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint8_t toUint8FromHexStr(char const* str)$/;"	f	namespace:vn
to_uint16_from_hexstr	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint16_t to_uint16_from_hexstr(char const* str)$/;"	f	namespace:vn
to_uint8_from_hexchar	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint8_t to_uint8_from_hexchar(char c)$/;"	f	namespace:vn
to_uint8_from_hexstr	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^uint8_t to_uint8_from_hexstr(char const* str)$/;"	f	namespace:vn
tow	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	double tow; \/\/\/< The tow field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
tow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	double tow;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
tow	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^double CompositeData::tow()$/;"	f	class:vn::sensors::CompositeData
transaction	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void transaction(char* toSend, size_t length, bool waitForReply, Packet *response)$/;"	f	struct:vn::sensors::VnSensor::Impl
transaction	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void transaction(char* toSend, size_t length, bool waitForReply, Packet *response, uint16_t responseTimeoutMs, uint16_t retransmitDelayMs)$/;"	f	struct:vn::sensors::VnSensor::Impl
transaction	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^string VnSensor::transaction(string toSend)$/;"	f	class:vn::sensors::VnSensor
transactionNoFinalize	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void transactionNoFinalize(char* toSend, size_t length, bool waitForReply, Packet *response)$/;"	f	struct:vn::sensors::VnSensor::Impl
transactionNoFinalize	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void transactionNoFinalize(char* toSend, size_t length, bool waitForReply, Packet *response, uint16_t responseTimeoutMs, uint16_t retransmitDelayMs)$/;"	f	struct:vn::sensors::VnSensor::Impl
transactionWithWait	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	Packet transactionWithWait(char* toSend, size_t length, uint16_t responseTimeoutMs, uint16_t retransmitDelayMs)$/;"	f	struct:vn::sensors::VnSensor::Impl
transpose	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat<2, 2, T> transpose() const$/;"	f	struct:vn::math::mat
transpose	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat<3, 3, T> transpose() const$/;"	f	struct:vn::math::mat
transpose	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat<4, 4, T> transpose() const$/;"	f	struct:vn::math::mat
transpose	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	mat<n, m, T> transpose() const$/;"	f	struct:vn::math::mat
tuningMode	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::VpeMode tuningMode; \/\/\/< The tuningMode field.$/;"	m	struct:vn::sensors::VpeBasicControlRegister
type	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet::Type Packet::type()$/;"	f	class:vn::protocol::uart::Packet
uart	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^namespace uart {$/;"	n	namespace:vn::protocol
uart	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	/^namespace uart {$/;"	n	namespace:vn::protocol
uart	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^namespace uart {$/;"	n	namespace:vn::protocol
uart	vnproglib-1.1.4.0/cpp/include/vn/util.h	/^namespace uart {$/;"	n	namespace:vn::protocol
uart	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^namespace uart {$/;"	n	namespace:vn::protocol	file:
uart	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^namespace uart {$/;"	n	namespace:vn::protocol	file:
uart	vnproglib-1.1.4.0/cpp/src/types.cpp	/^namespace uart {$/;"	n	namespace:vn::protocol	file:
uart	vnproglib-1.1.4.0/cpp/src/util.cpp	/^namespace uart {$/;"	n	namespace:vn::protocol	file:
uint16_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef unsigned __int16	uint16_t;$/;"	t
uint32_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef unsigned __int32	uint32_t;$/;"	t
uint64_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef unsigned __int64	uint64_t;$/;"	t
uint8_t	vnproglib-1.1.4.0/cpp/include/vn/int.h	/^	typedef unsigned __int8		uint8_t;$/;"	t
uncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f uncertainty; \/\/\/< The uncertainty field.$/;"	m	struct:vn::sensors::GpsCompassBaselineRegister
uncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f uncertainty; \/\/\/< The uncertainty field.$/;"	m	struct:vn::sensors::GpsCompassEstimatedBaselineRegister
unitW	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	static vec unitW()$/;"	f	struct:vn::math::vec
unitX	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	static vec unitX()$/;"	f	struct:vn::math::vec
unitY	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	static vec unitY()$/;"	f	struct:vn::math::vec
unitZ	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	static vec unitZ()$/;"	f	struct:vn::math::vec
unknown_error	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	unknown_error() : exception() { }$/;"	f	class:vn::unknown_error
unknown_error	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^class unknown_error : public std::exception$/;"	c	namespace:vn
unregisterAsyncPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::unregisterAsyncPacketReceivedHandler()$/;"	f	class:vn::sensors::VnSensor
unregisterDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::unregisterDataReceivedHandler()$/;"	f	class:vn::util::MemoryPort
unregisterDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::unregisterDataReceivedHandler()$/;"	f	class:vn::xplat::SerialPort
unregisterDataWrittenHandler	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::unregisterDataWrittenHandler()$/;"	f	class:vn::util::MemoryPort
unregisterErrorPacketReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::unregisterErrorPacketReceivedHandler()$/;"	f	class:vn::sensors::VnSensor
unregisterListners	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::unregisterListners()$/;"	f	class:vn::sensors::VnSensor
unregisterPossiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^void PacketFinder::unregisterPossiblePacketFoundHandler()$/;"	f	class:vn::protocol::uart::PacketFinder
unregisterPossiblePacketFoundHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::unregisterPossiblePacketFoundHandler()$/;"	f	class:vn::sensors::VnSensor
unregisterRawDataReceivedHandler	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::unregisterRawDataReceivedHandler()$/;"	f	class:vn::sensors::VnSensor
useFoam	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	protocol::uart::FoamInit useFoam; \/\/\/< The useFoam field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
useGravityModel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool useGravityModel; \/\/\/< The useGravityModel field.$/;"	m	struct:vn::sensors::ReferenceVectorConfigurationRegister
useMag	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool useMag; \/\/\/< The useMag field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
useMagModel	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool useMagModel; \/\/\/< The useMagModel field.$/;"	m	struct:vn::sensors::ReferenceVectorConfigurationRegister
usePres	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool usePres; \/\/\/< The usePres field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
util	vnproglib-1.1.4.0/cpp/include/vn/memoryport.h	/^namespace util {$/;"	n	namespace:vn
util	vnproglib-1.1.4.0/cpp/include/vn/nocopy.h	/^namespace util {$/;"	n	namespace:vn
util	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^namespace util {$/;"	n	namespace:vn	file:
vDop	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^  float vDop;	\/\/\/< \\brief vDOP field.$/;"	m	struct:vn::protocol::uart::GnssDop
validate	vnproglib-1.1.4.0/cpp/src/dllvalidator.cpp	/^bool DllValidator::validate()$/;"	f	class:DllValidator
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	explicit vec(T val) : x(val), y(val) { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	explicit vec(T val) : x(val), y(val), z(val) { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	explicit vec(T val) : x(val), y(val), z(val), w(val) { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	explicit vec(T val)$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec() { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec(T x_val, T y_val) : x(x_val), y(y_val) { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec(T x_val, T y_val, T z_val, T w_val) : x(x_val), y(y_val), z(z_val), w(w_val) { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	vec(const T& x_val, const T& y_val, const T& z_val) : x(x_val), y(y_val), z(z_val) { }$/;"	f	struct:vn::math::vec
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^struct vec$/;"	s	namespace:vn::math
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^struct vec<2, T>$/;"	s	namespace:vn::math
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^struct vec<3, T>$/;"	s	namespace:vn::math
vec	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^struct vec<4, T>$/;"	s	namespace:vn::math
vec2	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<2> vec2;$/;"	t	namespace:vn::math
vec2d	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<2, double> vec2d;$/;"	t	namespace:vn::math
vec2f	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<2, float> vec2f;$/;"	t	namespace:vn::math
vec2i32	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<2, int32_t> vec2i32;$/;"	t	namespace:vn::math
vec2ld	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<2, long double> vec2ld;$/;"	t	namespace:vn::math
vec2u32	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<2, uint32_t> vec2u32;$/;"	t	namespace:vn::math
vec3	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<3> vec3;$/;"	t	namespace:vn::math
vec3d	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<3, double> vec3d;$/;"	t	namespace:vn::math
vec3f	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<3, float> vec3f;$/;"	t	namespace:vn::math
vec3i32	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<3, int32_t> vec3i32;$/;"	t	namespace:vn::math
vec3ld	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<3, long double> vec3ld;$/;"	t	namespace:vn::math
vec3u32	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<3, uint32_t> vec3u32;$/;"	t	namespace:vn::math
vec4	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<4> vec4;$/;"	t	namespace:vn::math
vec4d	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<4, double> vec4d;$/;"	t	namespace:vn::math
vec4f	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<4, float> vec4f;$/;"	t	namespace:vn::math
vec4i32	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<4, int32_t> vec4i32;$/;"	t	namespace:vn::math
vec4ld	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<4, long double> vec4ld;$/;"	t	namespace:vn::math
vec4u32	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^typedef vec<4, uint32_t> vec4u32;$/;"	t	namespace:vn::math
velAtt	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool velAtt; \/\/\/< The velAtt field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
velBias	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	bool velBias; \/\/\/< The velBias field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
velCount	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint8_t velCount; \/\/\/< The velCount field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
velInit	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float velInit; \/\/\/< The velInit field.$/;"	m	struct:vn::sensors::InsAdvancedConfigurationRegister
velUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float velUncertainty; \/\/\/< The velUncertainty field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
velUncertainty	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float velUncertainty; \/\/\/< The velUncertainty field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
velocity	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f velocity; \/\/\/< The velocity field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
velocity	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f velocity; \/\/\/< The velocity field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
velocity	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f velocity; \/\/\/< The velocity field.$/;"	m	struct:vn::sensors::InsStateEcefRegister
velocity	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f velocity; \/\/\/< The velocity field.$/;"	m	struct:vn::sensors::InsStateLlaRegister
velocityEstimatedBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityGpsNed, velocityGpsEcef, velocityEstimatedNed, velocityEstimatedEcef, velocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityEstimatedBody	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::velocityEstimatedBody()$/;"	f	class:vn::sensors::CompositeData
velocityEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityGpsNed, velocityGpsEcef, velocityEstimatedNed, velocityEstimatedEcef, velocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityEstimatedEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::velocityEstimatedEcef()$/;"	f	class:vn::sensors::CompositeData
velocityEstimatedNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityGpsNed, velocityGpsEcef, velocityEstimatedNed, velocityEstimatedEcef, velocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityEstimatedNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::velocityEstimatedNed()$/;"	f	class:vn::sensors::CompositeData
velocityGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityGpsNed, velocityGpsEcef, velocityEstimatedNed, velocityEstimatedEcef, velocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityGpsEcef	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::velocityGpsEcef()$/;"	f	class:vn::sensors::CompositeData
velocityGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityGpsNed, velocityGpsEcef, velocityEstimatedNed, velocityEstimatedEcef, velocityEstimatedBody,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityGpsNed	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::velocityGpsNed()$/;"	f	class:vn::sensors::CompositeData
velocityTuning	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float velocityTuning; \/\/\/< The velocityTuning field.$/;"	m	struct:vn::sensors::VelocityCompensationControlRegister
velocityUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityUncertaintyGps, velocityUncertaintyEstimated;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityUncertaintyEstimated	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::velocityUncertaintyEstimated()$/;"	f	class:vn::sensors::CompositeData
velocityUncertaintyGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^		velocityUncertaintyGps, velocityUncertaintyEstimated;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
velocityUncertaintyGps	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^float CompositeData::velocityUncertaintyGps()$/;"	f	class:vn::sensors::CompositeData
verifySensorConnectivity	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^bool VnSensor::verifySensorConnectivity()$/;"	f	class:vn::sensors::VnSensor
vn	vnproglib-1.1.4.0/cpp/include/vn/attitude.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/compositedata.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/consts.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/conversions.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/criticalsection.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/error_detection.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/ezasyncdata.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/memoryport.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/nocopy.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/packet.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/packetfinder.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/position.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/searcher.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/thread.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/util.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/utilities.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^namespace vn {$/;"	n
vn	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/error_detection.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/event.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/port.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/position.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/types.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/util.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/utilities.cpp	/^namespace vn {$/;"	n	file:
vn	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^namespace vn {$/;"	n	file:
vn_proglib_DLLEXPORT	vnproglib-1.1.4.0/cpp/include/vn/export.h	11;"	d
vn_proglib_DLLEXPORT	vnproglib-1.1.4.0/cpp/include/vn/export.h	6;"	d
vn_proglib_DLLEXPORT	vnproglib-1.1.4.0/cpp/include/vn/export.h	8;"	d
vn_proglib_graphics_DLLEXPORT	vnproglib-1.1.4.0/cpp/include/vn/export.h	16;"	d
vn_proglib_graphics_DLLEXPORT	vnproglib-1.1.4.0/cpp/include/vn/export.h	18;"	d
vn_proglib_graphics_DLLEXPORT	vnproglib-1.1.4.0/cpp/include/vn/export.h	21;"	d
vnstrtok	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^char* vnstrtok(char* str, size_t& startIndex)$/;"	f	namespace:vn::protocol::uart
vpeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	VpeStatus vpeStatus;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
vpeStatus	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^VpeStatus CompositeData::vpeStatus()$/;"	f	class:vn::sensors::CompositeData
w	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T w;$/;"	m	struct:vn::math::vec::__anon6::__anon7
wait	vnproglib-1.1.4.0/cpp/src/event.cpp	/^void Event::wait()$/;"	f	class:vn::xplat::Event
waitForCheckingOnPort	vnproglib-1.1.4.0/cpp/src/searcher.cpp	/^	Event waitForCheckingOnPort;$/;"	m	struct:vn::sensors::TestHelper	file:
waitMs	vnproglib-1.1.4.0/cpp/src/event.cpp	/^Event::WaitResult Event::waitMs(uint32_t timeoutInMs)$/;"	f	class:vn::xplat::Event
waitUs	vnproglib-1.1.4.0/cpp/src/event.cpp	/^Event::WaitResult Event::waitUs(uint32_t timeoutInMicroSec)$/;"	f	class:vn::xplat::Event
week	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t week; \/\/\/< The week field.$/;"	m	struct:vn::sensors::GpsSolutionEcefRegister
week	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t week; \/\/\/< The week field.$/;"	m	struct:vn::sensors::GpsSolutionLlaRegister
week	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t week; \/\/\/< The week field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
week	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	uint16_t week; \/\/\/< The week field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
week	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	uint16_t week;$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
week	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^uint16_t CompositeData::week()$/;"	f	class:vn::sensors::CompositeData
what	vnproglib-1.1.4.0/cpp/include/vn/exceptions.h	/^	char const* what() const throw() { return "timeout"; }$/;"	f	class:vn::timeout
what	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^char const* sensor_error::what() const throw()$/;"	f	class:vn::sensors::sensor_error
write	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^void MemoryPort::write(const char data[], size_t length)$/;"	f	class:vn::util::MemoryPort
write	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^void SerialPort::write(const char data[], size_t length)$/;"	f	class:vn::xplat::SerialPort
writeAccelerationCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeAccelerationCompensation($/;"	f	class:vn::sensors::VnSensor
writeAccelerationCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeAccelerationCompensation(AccelerationCompensationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeAsyncDataOutputFrequency(const uint32_t &adof, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeAsyncDataOutputFrequency	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeAsyncDataOutputFrequency(const uint32_t &adof, uint8_t port, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeAsyncDataOutputType(AsciiAsync ador, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeAsyncDataOutputType	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeAsyncDataOutputType(AsciiAsync ador, uint8_t port, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeBinaryOutput	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^size_t writeBinaryOutput(ErrorDetectionMode errorDetectionMode, char* buffer, size_t size, uint8_t binaryOutputNumber, uint16_t asyncMode, uint16_t rateDivisor, uint16_t commonField, uint16_t timeField, uint16_t imuField, uint16_t gpsField, uint16_t attitudeField, uint16_t insField)$/;"	f	namespace:vn::protocol::uart
writeBinaryOutput	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	void writeBinaryOutput(uint8_t binaryOutputNumber, BinaryOutputRegister &fields, bool waitForReply)$/;"	f	struct:vn::sensors::VnSensor::Impl
writeBinaryOutput1	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeBinaryOutput1(BinaryOutputRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeBinaryOutput2	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeBinaryOutput2(BinaryOutputRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeBinaryOutput3	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeBinaryOutput3(BinaryOutputRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeCommunicationProtocolControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeCommunicationProtocolControl($/;"	f	class:vn::sensors::VnSensor
writeCommunicationProtocolControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeCommunicationProtocolControl(CommunicationProtocolControlRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeDeltaThetaAndDeltaVelocityConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeDeltaThetaAndDeltaVelocityConfiguration($/;"	f	class:vn::sensors::VnSensor
writeDeltaThetaAndDeltaVelocityConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeDeltaThetaAndDeltaVelocityConfiguration(DeltaThetaAndDeltaVelocityConfigurationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeFilterActiveTuningParameters	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterActiveTuningParameters($/;"	f	class:vn::sensors::VnSensor
writeFilterActiveTuningParameters	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterActiveTuningParameters(FilterActiveTuningParametersRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeFilterBasicControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterBasicControl($/;"	f	class:vn::sensors::VnSensor
writeFilterBasicControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterBasicControl(FilterBasicControlRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeFilterMeasurementsVarianceParameters	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterMeasurementsVarianceParameters($/;"	f	class:vn::sensors::VnSensor
writeFilterMeasurementsVarianceParameters	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterMeasurementsVarianceParameters(FilterMeasurementsVarianceParametersRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeFilterStartupGyroBias	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeFilterStartupGyroBias(const vec3f &bias, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeGpsAntennaOffset	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGpsAntennaOffset(const vec3f &position, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeGpsCompassBaseline	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGpsCompassBaseline($/;"	f	class:vn::sensors::VnSensor
writeGpsCompassBaseline	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGpsCompassBaseline(GpsCompassBaselineRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeGpsConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGpsConfiguration($/;"	f	class:vn::sensors::VnSensor
writeGpsConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGpsConfiguration(GpsConfigurationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeGyroCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGyroCompensation($/;"	f	class:vn::sensors::VnSensor
writeGyroCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeGyroCompensation(GyroCompensationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeImuFilteringConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeImuFilteringConfiguration($/;"	f	class:vn::sensors::VnSensor
writeImuFilteringConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeImuFilteringConfiguration(ImuFilteringConfigurationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeImuRateConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeImuRateConfiguration($/;"	f	class:vn::sensors::VnSensor
writeImuRateConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeImuRateConfiguration(ImuRateConfigurationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeIndoorHeadingModeControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeIndoorHeadingModeControl(const float &maxRateError, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeInsAdvancedConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeInsAdvancedConfiguration($/;"	f	class:vn::sensors::VnSensor
writeInsAdvancedConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeInsAdvancedConfiguration(InsAdvancedConfigurationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeInsBasicConfigurationVn200	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeInsBasicConfigurationVn200($/;"	f	class:vn::sensors::VnSensor
writeInsBasicConfigurationVn200	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeInsBasicConfigurationVn200(InsBasicConfigurationRegisterVn200 &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeInsBasicConfigurationVn300	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeInsBasicConfigurationVn300($/;"	f	class:vn::sensors::VnSensor
writeInsBasicConfigurationVn300	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeInsBasicConfigurationVn300(InsBasicConfigurationRegisterVn300 &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeMagneticAndGravityReferenceVectors	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeMagneticAndGravityReferenceVectors($/;"	f	class:vn::sensors::VnSensor
writeMagneticAndGravityReferenceVectors	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeMagneticAndGravityReferenceVectors(MagneticAndGravityReferenceVectorsRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeMagnetometerCalibrationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeMagnetometerCalibrationControl($/;"	f	class:vn::sensors::VnSensor
writeMagnetometerCalibrationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeMagnetometerCalibrationControl(MagnetometerCalibrationControlRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeMagnetometerCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeMagnetometerCompensation($/;"	f	class:vn::sensors::VnSensor
writeMagnetometerCompensation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeMagnetometerCompensation(MagnetometerCompensationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeReferenceFrameRotation	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeReferenceFrameRotation(const mat3f &c, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeReferenceVectorConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeReferenceVectorConfiguration($/;"	f	class:vn::sensors::VnSensor
writeReferenceVectorConfiguration	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeReferenceVectorConfiguration(ReferenceVectorConfigurationRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeSerialBaudRate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSerialBaudRate(const uint32_t &baudrate, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeSerialBaudRate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSerialBaudRate(const uint32_t &baudrate, uint8_t port, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeSettings	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSettings(bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeStartupFilterBiasEstimate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeStartupFilterBiasEstimate($/;"	f	class:vn::sensors::VnSensor
writeStartupFilterBiasEstimate	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeStartupFilterBiasEstimate(StartupFilterBiasEstimateRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeSynchronizationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSynchronizationControl($/;"	f	class:vn::sensors::VnSensor
writeSynchronizationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSynchronizationControl(SynchronizationControlRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeSynchronizationStatus	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSynchronizationStatus($/;"	f	class:vn::sensors::VnSensor
writeSynchronizationStatus	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeSynchronizationStatus(SynchronizationStatusRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeUserTag	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeUserTag(const string &tag, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVelocityCompensationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVelocityCompensationControl($/;"	f	class:vn::sensors::VnSensor
writeVelocityCompensationControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVelocityCompensationControl(VelocityCompensationControlRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVelocityCompensationMeasurement	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVelocityCompensationMeasurement(const vec3f &velocity, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVpeAccelerometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeAccelerometerAdvancedTuning($/;"	f	class:vn::sensors::VnSensor
writeVpeAccelerometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeAccelerometerAdvancedTuning(VpeAccelerometerAdvancedTuningRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVpeAccelerometerBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeAccelerometerBasicTuning($/;"	f	class:vn::sensors::VnSensor
writeVpeAccelerometerBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeAccelerometerBasicTuning(VpeAccelerometerBasicTuningRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVpeBasicControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeBasicControl($/;"	f	class:vn::sensors::VnSensor
writeVpeBasicControl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeBasicControl(VpeBasicControlRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVpeGyroBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeGyroBasicTuning($/;"	f	class:vn::sensors::VnSensor
writeVpeGyroBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeGyroBasicTuning(VpeGyroBasicTuningRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVpeMagnetometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeMagnetometerAdvancedTuning($/;"	f	class:vn::sensors::VnSensor
writeVpeMagnetometerAdvancedTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeMagnetometerAdvancedTuning(VpeMagnetometerAdvancedTuningRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
writeVpeMagnetometerBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeMagnetometerBasicTuning($/;"	f	class:vn::sensors::VnSensor
writeVpeMagnetometerBasicTuning	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^void VnSensor::writeVpeMagnetometerBasicTuning(VpeMagnetometerBasicTuningRegister &fields, bool waitForReply)$/;"	f	class:vn::sensors::VnSensor
x	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float x; \/\/\/< The x field.$/;"	m	struct:vn::sensors::VelocityCompensationStatusRegister
x	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T x;$/;"	m	struct:vn::math::vec::__anon1::__anon2
x	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T x;$/;"	m	struct:vn::math::vec::__anon3::__anon4
x	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T x;$/;"	m	struct:vn::math::vec::__anon6::__anon7
xDot	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float xDot; \/\/\/< The xDot field.$/;"	m	struct:vn::sensors::VelocityCompensationStatusRegister
xplat	vnproglib-1.1.4.0/cpp/include/vn/criticalsection.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/event.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/mock.h	/^namespace xplat {$/;"	n
xplat	vnproglib-1.1.4.0/cpp/include/vn/port.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/sensors.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/serialport.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/thread.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/include/vn/vntime.h	/^namespace xplat {$/;"	n	namespace:vn
xplat	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^namespace xplat {$/;"	n	namespace:vn	file:
xplat	vnproglib-1.1.4.0/cpp/src/event.cpp	/^namespace xplat {$/;"	n	namespace:vn	file:
xplat	vnproglib-1.1.4.0/cpp/src/port.cpp	/^namespace xplat {$/;"	n	namespace:vn	file:
xplat	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^namespace xplat {$/;"	n	namespace:vn	file:
xplat	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^namespace xplat {$/;"	n	namespace:vn	file:
xplat	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^namespace xplat {$/;"	n	namespace:vn	file:
xy	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		vec<2, T> xy;$/;"	m	union:vn::math::vec::__anon3
xy	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		vec<2, T> xy;$/;"	m	union:vn::math::vec::__anon6
xyz	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^		vec<3, T> xyz;$/;"	m	union:vn::math::vec::__anon6
y	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T y;$/;"	m	struct:vn::math::vec::__anon1::__anon2
y	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T y;$/;"	m	struct:vn::math::vec::__anon3::__anon4
y	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T y;$/;"	m	struct:vn::math::vec::__anon6::__anon7
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::InsSolutionEcefRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::InsSolutionLlaRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::InsStateEcefRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::InsStateLlaRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::YawPitchRollMagneticAccelerationAndAngularRatesRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::YawPitchRollTrueBodyAccelerationAndAngularRatesRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	vn::math::vec3f yawPitchRoll; \/\/\/< The yawPitchRoll field.$/;"	m	struct:vn::sensors::YawPitchRollTrueInertialAccelerationAndAngularRatesRegister
yawPitchRoll	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^	vec3f yawPitchRoll,$/;"	m	struct:vn::sensors::CompositeData::Impl	file:
yawPitchRoll	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^vec3f CompositeData::yawPitchRoll()$/;"	f	class:vn::sensors::CompositeData
year	vnproglib-1.1.4.0/cpp/include/vn/registers.h	/^	float year; \/\/\/< The year field.$/;"	m	struct:vn::sensors::ReferenceVectorConfigurationRegister
year	vnproglib-1.1.4.0/cpp/include/vn/types.h	/^	int8_t year;	\/\/\/< \\brief Year field.$/;"	m	struct:vn::protocol::uart::TimeUtc
yprInDegs	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^vec3f AttitudeF::yprInDegs()$/;"	f	class:vn::math::AttitudeF
yprInDegs2Dcm	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^mat3f yprInDegs2Dcm(vec3f yprInDegs)$/;"	f	namespace:vn::math
yprInDegs2Quat	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec4f yprInDegs2Quat(vec3f yprInDegs)$/;"	f	namespace:vn::math
yprInDegs2omegaPhiKappaInRads	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f yprInDegs2omegaPhiKappaInRads(vec3f yprDegs)$/;"	f	namespace:vn::math
yprInRads	vnproglib-1.1.4.0/cpp/src/attitude.cpp	/^vec3f AttitudeF::yprInRads()$/;"	f	class:vn::math::AttitudeF
yprInRads2Dcm	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^mat3f yprInRads2Dcm(vec3f yprInRads)$/;"	f	namespace:vn::math
yprInRads2Quat	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec4f yprInRads2Quat(vec3f ypr)$/;"	f	namespace:vn::math
yprInRads2omegaPhiKappaInRads	vnproglib-1.1.4.0/cpp/src/conversions.cpp	/^vec3f yprInRads2omegaPhiKappaInRads(vec3f yprRads)$/;"	f	namespace:vn::math
z	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T z;$/;"	m	struct:vn::math::vec::__anon3::__anon4
z	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^			T z;$/;"	m	struct:vn::math::vec::__anon6::__anon7
zero	vnproglib-1.1.4.0/cpp/include/vn/matrix.h	/^	static mat zero()$/;"	f	struct:vn::math::mat
zero	vnproglib-1.1.4.0/cpp/include/vn/vector.h	/^	static vec zero()$/;"	f	struct:vn::math::vec
~CompositeData	vnproglib-1.1.4.0/cpp/src/compositedata.cpp	/^CompositeData::~CompositeData()$/;"	f	class:vn::sensors::CompositeData
~CriticalSection	vnproglib-1.1.4.0/cpp/src/criticalsection.cpp	/^CriticalSection::~CriticalSection()$/;"	f	class:vn::xplat::CriticalSection
~Event	vnproglib-1.1.4.0/cpp/src/event.cpp	/^Event::~Event()$/;"	f	class:vn::xplat::Event
~EzAsyncData	vnproglib-1.1.4.0/cpp/src/ezasyncdata.cpp	/^EzAsyncData::~EzAsyncData()$/;"	f	class:vn::sensors::EzAsyncData
~IPort	vnproglib-1.1.4.0/cpp/src/port.cpp	/^IPort::~IPort() { }$/;"	f	class:vn::xplat::IPort
~Impl	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^	~Impl()$/;"	f	struct:vn::protocol::uart::PacketFinder::Impl
~Impl	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^	~Impl()$/;"	f	struct:vn::sensors::VnSensor::Impl
~Impl	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^	~Impl()$/;"	f	struct:vn::xplat::SerialPort::Impl
~MemoryPort	vnproglib-1.1.4.0/cpp/src/memoryport.cpp	/^MemoryPort::~MemoryPort()$/;"	f	class:vn::util::MemoryPort
~NoCopy	vnproglib-1.1.4.0/cpp/include/vn/nocopy.h	/^	~NoCopy() { }$/;"	f	class:vn::util::NoCopy
~Observer	vnproglib-1.1.4.0/cpp/include/vn/signal.h	/^		virtual ~Observer() { }$/;"	f	class:vn::xplat::Signal::Observer
~Packet	vnproglib-1.1.4.0/cpp/src/packet.cpp	/^Packet::~Packet()$/;"	f	class:vn::protocol::uart::Packet
~PacketFinder	vnproglib-1.1.4.0/cpp/src/packetfinder.cpp	/^PacketFinder::~PacketFinder()$/;"	f	class:vn::protocol::uart::PacketFinder
~SerialPort	vnproglib-1.1.4.0/cpp/src/serialport.cpp	/^SerialPort::~SerialPort()$/;"	f	class:vn::xplat::SerialPort
~Stopwatch	vnproglib-1.1.4.0/cpp/src/vntime.cpp	/^Stopwatch::~Stopwatch()$/;"	f	class:vn::xplat::Stopwatch
~Thread	vnproglib-1.1.4.0/cpp/src/thread.cpp	/^Thread::~Thread()$/;"	f	class:vn::xplat::Thread
~VnSensor	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^VnSensor::~VnSensor()$/;"	f	class:vn::sensors::VnSensor
~sensor_error	vnproglib-1.1.4.0/cpp/src/sensors.cpp	/^sensor_error::~sensor_error() throw()$/;"	f	class:vn::sensors::sensor_error
